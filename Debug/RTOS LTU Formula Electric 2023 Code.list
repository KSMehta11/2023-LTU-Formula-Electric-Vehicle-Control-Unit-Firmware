
RTOS LTU Formula Electric 2023 Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000725c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800742c  0800742c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007564  08007564  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800756c  0800756c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800756c  0800756c  0001756c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004234  20000014  08007588  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004248  08007588  00024248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b40  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9d  00000000  00000000  00032bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00035b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dda  00000000  00000000  00036d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024413  00000000  00000000  00037b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148d8  00000000  00000000  0005bf55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5942  00000000  00000000  0007082d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bd0  00000000  00000000  00156170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0015ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007414 	.word	0x08007414

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08007414 	.word	0x08007414

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <startNode>:
 */

#include "CAN.h"

void startNode()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
	uint8_t data[8] = { 0x01, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <startNode+0x64>)
 8000d50:	f107 0320 	add.w	r3, r7, #32
 8000d54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d58:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t mailbox = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]

	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	617b      	str	r3, [r7, #20]
	txHeader.ExtId = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
	txHeader.IDE = CAN_ID_STD;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
	txHeader.RTR = CAN_RTR_DATA;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
	txHeader.StdId = 0x000;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	763b      	strb	r3, [r7, #24]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	f107 0220 	add.w	r2, r7, #32
 8000d80:	1d39      	adds	r1, r7, #4
 8000d82:	480b      	ldr	r0, [pc, #44]	; (8000db0 <startNode+0x68>)
 8000d84:	f002 fa82 	bl	800328c <HAL_CAN_AddTxMessage>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <startNode+0x4a>
	{
		Error_Handler();
 8000d8e:	f001 f995 	bl	80020bc <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000d92:	bf00      	nop
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <startNode+0x68>)
 8000d9a:	f002 fb52 	bl	8003442 <HAL_CAN_IsTxMessagePending>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1f7      	bne.n	8000d94 <startNode+0x4c>

	return;
 8000da4:	bf00      	nop
}
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	0800742c 	.word	0x0800742c
 8000db0:	2000035c 	.word	0x2000035c

08000db4 <clearErrors>:

void clearErrors()
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
	uint8_t data[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00 };
 8000dba:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <clearErrors+0x68>)
 8000dbc:	f107 0320 	add.w	r3, r7, #32
 8000dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc4:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t mailbox = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]

	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 6;
 8000dcc:	2306      	movs	r3, #6
 8000dce:	617b      	str	r3, [r7, #20]
	txHeader.ExtId = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
	txHeader.IDE = CAN_ID_STD;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
	txHeader.RTR = CAN_RTR_DATA;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
	txHeader.StdId = 0x47A;
 8000ddc:	f240 437a 	movw	r3, #1146	; 0x47a
 8000de0:	607b      	str	r3, [r7, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	763b      	strb	r3, [r7, #24]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	f107 0220 	add.w	r2, r7, #32
 8000dee:	1d39      	adds	r1, r7, #4
 8000df0:	480b      	ldr	r0, [pc, #44]	; (8000e20 <clearErrors+0x6c>)
 8000df2:	f002 fa4b 	bl	800328c <HAL_CAN_AddTxMessage>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <clearErrors+0x4c>
	{
		Error_Handler();
 8000dfc:	f001 f95e 	bl	80020bc <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000e00:	bf00      	nop
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <clearErrors+0x6c>)
 8000e08:	f002 fb1b 	bl	8003442 <HAL_CAN_IsTxMessagePending>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f7      	bne.n	8000e02 <clearErrors+0x4e>

	return;
 8000e12:	bf00      	nop
}
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	08007434 	.word	0x08007434
 8000e20:	2000035c 	.word	0x2000035c

08000e24 <nodeGuarding>:

void nodeGuarding()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
	uint8_t data[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8000e2a:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <nodeGuarding+0x68>)
 8000e2c:	f107 0320 	add.w	r3, r7, #32
 8000e30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e34:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t mailbox = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]

	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 8;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	617b      	str	r3, [r7, #20]
	txHeader.ExtId = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
	txHeader.IDE = CAN_ID_STD;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
	txHeader.RTR = CAN_RTR_REMOTE;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	613b      	str	r3, [r7, #16]
	txHeader.StdId = 0x77A;
 8000e4c:	f240 737a 	movw	r3, #1914	; 0x77a
 8000e50:	607b      	str	r3, [r7, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	763b      	strb	r3, [r7, #24]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	f107 0220 	add.w	r2, r7, #32
 8000e5e:	1d39      	adds	r1, r7, #4
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <nodeGuarding+0x6c>)
 8000e62:	f002 fa13 	bl	800328c <HAL_CAN_AddTxMessage>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <nodeGuarding+0x4c>
	{
		Error_Handler();
 8000e6c:	f001 f926 	bl	80020bc <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000e70:	bf00      	nop
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <nodeGuarding+0x6c>)
 8000e78:	f002 fae3 	bl	8003442 <HAL_CAN_IsTxMessagePending>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f7      	bne.n	8000e72 <nodeGuarding+0x4e>

	return;
 8000e82:	bf00      	nop
}
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	0800743c 	.word	0x0800743c
 8000e90:	2000035c 	.word	0x2000035c

08000e94 <syncMessage>:

void syncMessage()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
	uint8_t data[8] = { 0x00, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <syncMessage+0x68>)
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea4:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t mailbox = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]

	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	617b      	str	r3, [r7, #20]
	txHeader.ExtId = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
	txHeader.IDE = CAN_ID_STD;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
	txHeader.RTR = CAN_RTR_DATA;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
	txHeader.StdId = 0x080;
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	607b      	str	r3, [r7, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	763b      	strb	r3, [r7, #24]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	f107 0220 	add.w	r2, r7, #32
 8000ecc:	1d39      	adds	r1, r7, #4
 8000ece:	480c      	ldr	r0, [pc, #48]	; (8000f00 <syncMessage+0x6c>)
 8000ed0:	f002 f9dc 	bl	800328c <HAL_CAN_AddTxMessage>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <syncMessage+0x4a>
	{
		Error_Handler();
 8000eda:	f001 f8ef 	bl	80020bc <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000ede:	bf00      	nop
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <syncMessage+0x6c>)
 8000ee6:	f002 faac 	bl	8003442 <HAL_CAN_IsTxMessagePending>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f7      	bne.n	8000ee0 <syncMessage+0x4c>
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	08007444 	.word	0x08007444
 8000f00:	2000035c 	.word	0x2000035c

08000f04 <torqueControlMessage>:

void torqueControlMessage(int* torqueRefLim, const int* speedRefLimit)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	uint8_t data[8] = { *torqueRefLim & 0xFF, (*torqueRefLim >> 8) & 0xFF,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	121b      	asrs	r3, r3, #8
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
					 *speedRefLimit & 0xFF, (*speedRefLimit >> 8) & 0xFF,
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
	uint8_t data[8] = { *torqueRefLim & 0xFF, (*torqueRefLim >> 8) & 0xFF,
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					 *speedRefLimit & 0xFF, (*speedRefLimit >> 8) & 0xFF,
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	121b      	asrs	r3, r3, #8
	uint8_t data[8] = { *torqueRefLim & 0xFF, (*torqueRefLim >> 8) & 0xFF,
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					 0x01, 0x00,
					 0x00, 0x00 };

	uint32_t mailbox = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24

	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 6;
 8000f56:	2306      	movs	r3, #6
 8000f58:	61fb      	str	r3, [r7, #28]
	txHeader.ExtId = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_STD;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
	txHeader.RTR = CAN_RTR_DATA;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
	txHeader.StdId = 0x47A;
 8000f66:	f240 437a 	movw	r3, #1146	; 0x47a
 8000f6a:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 3020 	strb.w	r3, [r7, #32]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f7a:	f107 010c 	add.w	r1, r7, #12
 8000f7e:	480b      	ldr	r0, [pc, #44]	; (8000fac <torqueControlMessage+0xa8>)
 8000f80:	f002 f984 	bl	800328c <HAL_CAN_AddTxMessage>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <torqueControlMessage+0x8a>
	{
		Error_Handler();
 8000f8a:	f001 f897 	bl	80020bc <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000f8e:	bf00      	nop
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <torqueControlMessage+0xa8>)
 8000f96:	f002 fa54 	bl	8003442 <HAL_CAN_IsTxMessagePending>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f7      	bne.n	8000f90 <torqueControlMessage+0x8c>
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3730      	adds	r7, #48	; 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000035c 	.word	0x2000035c

08000fb0 <orionFilterConfig>:

void orionFilterConfig()
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef orionFilter;

	orionFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	623b      	str	r3, [r7, #32]
	orionFilter.FilterBank = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
	orionFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
	orionFilter.FilterIdHigh = 0x6CA<<5;
 8000fc2:	f64d 1340 	movw	r3, #55616	; 0xd940
 8000fc6:	603b      	str	r3, [r7, #0]
	orionFilter.FilterIdLow = 0x000;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
	orionFilter.FilterMaskIdHigh = 0x6CA<<5;
 8000fcc:	f64d 1340 	movw	r3, #55616	; 0xd940
 8000fd0:	60bb      	str	r3, [r7, #8]
	orionFilter.FilterMaskIdLow = 0x000;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
	orionFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
	orionFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61fb      	str	r3, [r7, #28]
	orionFilter.SlaveStartFilterBank = 20;
 8000fde:	2314      	movs	r3, #20
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &orionFilter) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <orionFilterConfig+0x50>)
 8000fe8:	f002 f82c 	bl	8003044 <HAL_CAN_ConfigFilter>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <orionFilterConfig+0x46>
	{
		Error_Handler();
 8000ff2:	f001 f863 	bl	80020bc <Error_Handler>
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000035c 	.word	0x2000035c

08001004 <motorAndControllerTempFilterConfig>:
		Error_Handler();
	}
}

void motorAndControllerTempFilterConfig()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef tempFilter;

	tempFilter.FilterActivation = CAN_FILTER_ENABLE;
 800100a:	2301      	movs	r3, #1
 800100c:	623b      	str	r3, [r7, #32]
	tempFilter.FilterBank = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
	tempFilter.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001012:	2301      	movs	r3, #1
 8001014:	613b      	str	r3, [r7, #16]
	tempFilter.FilterIdHigh = 0x1BA<<5;
 8001016:	f44f 535d 	mov.w	r3, #14144	; 0x3740
 800101a:	603b      	str	r3, [r7, #0]
	tempFilter.FilterIdLow = 0x000;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
	tempFilter.FilterMaskIdHigh = 0x1BA<<5;
 8001020:	f44f 535d 	mov.w	r3, #14144	; 0x3740
 8001024:	60bb      	str	r3, [r7, #8]
	tempFilter.FilterMaskIdLow = 0x000;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
	tempFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 800102a:	2301      	movs	r3, #1
 800102c:	61bb      	str	r3, [r7, #24]
	tempFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800102e:	2301      	movs	r3, #1
 8001030:	61fb      	str	r3, [r7, #28]
	tempFilter.SlaveStartFilterBank = 20;
 8001032:	2314      	movs	r3, #20
 8001034:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &tempFilter) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <motorAndControllerTempFilterConfig+0x50>)
 800103c:	f002 f802 	bl	8003044 <HAL_CAN_ConfigFilter>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <motorAndControllerTempFilterConfig+0x46>
	{
		Error_Handler();
 8001046:	f001 f839 	bl	80020bc <Error_Handler>
	}
}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000035c 	.word	0x2000035c

08001058 <motorRPMFilterConfig>:

void motorRPMFilterConfig()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef rpmFilter;

	rpmFilter.FilterActivation = CAN_FILTER_ENABLE;
 800105e:	2301      	movs	r3, #1
 8001060:	623b      	str	r3, [r7, #32]
	rpmFilter.FilterBank = 2;
 8001062:	2302      	movs	r3, #2
 8001064:	617b      	str	r3, [r7, #20]
	rpmFilter.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001066:	2301      	movs	r3, #1
 8001068:	613b      	str	r3, [r7, #16]
	rpmFilter.FilterIdHigh = 0x3FA<<5;
 800106a:	f647 7340 	movw	r3, #32576	; 0x7f40
 800106e:	603b      	str	r3, [r7, #0]
	rpmFilter.FilterIdLow = 0x000;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
	rpmFilter.FilterMaskIdHigh = 0x3FA<<5;
 8001074:	f647 7340 	movw	r3, #32576	; 0x7f40
 8001078:	60bb      	str	r3, [r7, #8]
	rpmFilter.FilterMaskIdLow = 0x000;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
	rpmFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
	rpmFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001082:	2301      	movs	r3, #1
 8001084:	61fb      	str	r3, [r7, #28]
	rpmFilter.SlaveStartFilterBank = 20;
 8001086:	2314      	movs	r3, #20
 8001088:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &rpmFilter) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <motorRPMFilterConfig+0x50>)
 8001090:	f001 ffd8 	bl	8003044 <HAL_CAN_ConfigFilter>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <motorRPMFilterConfig+0x46>
	{
		Error_Handler();
 800109a:	f001 f80f 	bl	80020bc <Error_Handler>
	}
}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000035c 	.word	0x2000035c

080010ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80010bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <vApplicationGetIdleTaskMemory+0x30>)
 80010c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000030 	.word	0x20000030
 80010dc:	20000084 	.word	0x20000084

080010e0 <ADC_GetAverageValue>:

/* USER CODE BEGIN PFP */

// Pedal Position Output Filter (Eliminates induces noise and spikes in signal)
uint32_t ADC_GetAverageValue(ADC_HandleTypeDef* hadc, int numOfReadings)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b098      	sub	sp, #96	; 0x60
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]

	int max = 0, min = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010ee:	2300      	movs	r3, #0
 80010f0:	65bb      	str	r3, [r7, #88]	; 0x58
	int maxIndex = 0, minIndex = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	657b      	str	r3, [r7, #84]	; 0x54
 80010f6:	2300      	movs	r3, #0
 80010f8:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t data[10] = { 0 };
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2228      	movs	r2, #40	; 0x28
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f006 f95a 	bl	80073bc <memset>
	uint32_t sum = 0, average = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800110c:	2300      	movs	r3, #0
 800110e:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < numOfReadings; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
 8001114:	e016      	b.n	8001144 <ADC_GetAverageValue+0x64>
	{
		HAL_ADC_Start(hadc);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f001 facc 	bl	80026b4 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(hadc, 1);
 800111c:	2101      	movs	r1, #1
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f001 fbcd 	bl	80028be <HAL_ADC_PollForConversion>

		data[i] = HAL_ADC_GetValue(hadc);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f001 fc55 	bl	80029d4 <HAL_ADC_GetValue>
 800112a:	4602      	mov	r2, r0
 800112c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	3360      	adds	r3, #96	; 0x60
 8001132:	443b      	add	r3, r7
 8001134:	f843 2c54 	str.w	r2, [r3, #-84]

		HAL_ADC_Stop(hadc);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f001 fb8d 	bl	8002858 <HAL_ADC_Stop>
	for (int i = 0; i < numOfReadings; i++)
 800113e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001140:	3301      	adds	r3, #1
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
 8001144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbe4      	blt.n	8001116 <ADC_GetAverageValue+0x36>
	}

	max = data[0];
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	65fb      	str	r3, [r7, #92]	; 0x5c

	for (int i = 1; i < 10; i++)
 8001150:	2301      	movs	r3, #1
 8001152:	647b      	str	r3, [r7, #68]	; 0x44
 8001154:	e014      	b.n	8001180 <ADC_GetAverageValue+0xa0>
	{
		if (data[i] > max)
 8001156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	3360      	adds	r3, #96	; 0x60
 800115c:	443b      	add	r3, r7
 800115e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001164:	429a      	cmp	r2, r3
 8001166:	d908      	bls.n	800117a <ADC_GetAverageValue+0x9a>
		{
			max = data[i];
 8001168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	3360      	adds	r3, #96	; 0x60
 800116e:	443b      	add	r3, r7
 8001170:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001174:	65fb      	str	r3, [r7, #92]	; 0x5c
			maxIndex = i;
 8001176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001178:	657b      	str	r3, [r7, #84]	; 0x54
	for (int i = 1; i < 10; i++)
 800117a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800117c:	3301      	adds	r3, #1
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
 8001180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001182:	2b09      	cmp	r3, #9
 8001184:	dde7      	ble.n	8001156 <ADC_GetAverageValue+0x76>
		}
	}

	min = data[0];
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	65bb      	str	r3, [r7, #88]	; 0x58

	for (int i = 1; i < 10; i++)
 800118a:	2301      	movs	r3, #1
 800118c:	643b      	str	r3, [r7, #64]	; 0x40
 800118e:	e014      	b.n	80011ba <ADC_GetAverageValue+0xda>
	{
		if (data[i] < min)
 8001190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	3360      	adds	r3, #96	; 0x60
 8001196:	443b      	add	r3, r7
 8001198:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800119c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800119e:	429a      	cmp	r2, r3
 80011a0:	d208      	bcs.n	80011b4 <ADC_GetAverageValue+0xd4>
		{
			min = data[i];
 80011a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	3360      	adds	r3, #96	; 0x60
 80011a8:	443b      	add	r3, r7
 80011aa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80011ae:	65bb      	str	r3, [r7, #88]	; 0x58
			minIndex = i;
 80011b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011b2:	653b      	str	r3, [r7, #80]	; 0x50
	for (int i = 1; i < 10; i++)
 80011b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011b6:	3301      	adds	r3, #1
 80011b8:	643b      	str	r3, [r7, #64]	; 0x40
 80011ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011bc:	2b09      	cmp	r3, #9
 80011be:	dde7      	ble.n	8001190 <ADC_GetAverageValue+0xb0>
		}
	}

	for (int i = 0; i < 10; i++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011c4:	e013      	b.n	80011ee <ADC_GetAverageValue+0x10e>
	{
		if (i == minIndex || i == maxIndex)
 80011c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d00c      	beq.n	80011e8 <ADC_GetAverageValue+0x108>
 80011ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d008      	beq.n	80011e8 <ADC_GetAverageValue+0x108>
		{

		}
		else
		{
			sum += data[i];
 80011d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	3360      	adds	r3, #96	; 0x60
 80011dc:	443b      	add	r3, r7
 80011de:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80011e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011e4:	4413      	add	r3, r2
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i = 0; i < 10; i++)
 80011e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ea:	3301      	adds	r3, #1
 80011ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011f0:	2b09      	cmp	r3, #9
 80011f2:	dde8      	ble.n	80011c6 <ADC_GetAverageValue+0xe6>
		}
	}

	average = sum / 8;
 80011f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011f6:	08db      	lsrs	r3, r3, #3
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34

	data[maxIndex] = average;
 80011fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	3360      	adds	r3, #96	; 0x60
 8001200:	443b      	add	r3, r7
 8001202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001204:	f843 2c54 	str.w	r2, [r3, #-84]

	data[minIndex] = average;
 8001208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	3360      	adds	r3, #96	; 0x60
 800120e:	443b      	add	r3, r7
 8001210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001212:	f843 2c54 	str.w	r2, [r3, #-84]

	sum = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	64fb      	str	r3, [r7, #76]	; 0x4c

	for (int i = 0; i < 10; i++)
 800121a:	2300      	movs	r3, #0
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
 800121e:	e00b      	b.n	8001238 <ADC_GetAverageValue+0x158>
	{
		sum += data[i];
 8001220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	3360      	adds	r3, #96	; 0x60
 8001226:	443b      	add	r3, r7
 8001228:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800122c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800122e:	4413      	add	r3, r2
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i = 0; i < 10; i++)
 8001232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001234:	3301      	adds	r3, #1
 8001236:	63bb      	str	r3, [r7, #56]	; 0x38
 8001238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800123a:	2b09      	cmp	r3, #9
 800123c:	ddf0      	ble.n	8001220 <ADC_GetAverageValue+0x140>
	}

	average = sum / 10;
 800123e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <ADC_GetAverageValue+0x174>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	08db      	lsrs	r3, r3, #3
 8001248:	637b      	str	r3, [r7, #52]	; 0x34

	return (average);
 800124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800124c:	4618      	mov	r0, r3
 800124e:	3760      	adds	r7, #96	; 0x60
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	cccccccd 	.word	0xcccccccd

08001258 <ignitionTask>:
}
*/

// Handles Vehicle Ignition Process
void ignitionTask()
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	buttonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 800125c:	2101      	movs	r1, #1
 800125e:	481c      	ldr	r0, [pc, #112]	; (80012d0 <ignitionTask+0x78>)
 8001260:	f002 fc9c 	bl	8003b9c <HAL_GPIO_ReadPin>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <ignitionTask+0x7c>)
 800126a:	701a      	strb	r2, [r3, #0]

	buttonPressTime = HAL_GetTick();
 800126c:	f001 f9d2 	bl	8002614 <HAL_GetTick>
 8001270:	4603      	mov	r3, r0
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <ignitionTask+0x80>)
 8001274:	6013      	str	r3, [r2, #0]

	while (buttonState == GPIO_PIN_RESET)
 8001276:	e023      	b.n	80012c0 <ignitionTask+0x68>
	{
		if (HAL_GetTick() - buttonPressTime > 50)
 8001278:	f001 f9cc 	bl	8002614 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <ignitionTask+0x80>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b32      	cmp	r3, #50	; 0x32
 8001286:	d913      	bls.n	80012b0 <ignitionTask+0x58>
		{
			startNode();
 8001288:	f7ff fd5e 	bl	8000d48 <startNode>
			clearErrors();
 800128c:	f7ff fd92 	bl	8000db4 <clearErrors>

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2110      	movs	r1, #16
 8001294:	480e      	ldr	r0, [pc, #56]	; (80012d0 <ignitionTask+0x78>)
 8001296:	f002 fc99 	bl	8003bcc <HAL_GPIO_WritePin>

			TIM2->CNT = 0;
 800129a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80012a2:	2100      	movs	r1, #0
 80012a4:	480d      	ldr	r0, [pc, #52]	; (80012dc <ignitionTask+0x84>)
 80012a6:	f003 fbcb 	bl	8004a40 <HAL_TIM_OC_Start_IT>

			enableCar = true;
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <ignitionTask+0x88>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
		}

		buttonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80012b0:	2101      	movs	r1, #1
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <ignitionTask+0x78>)
 80012b4:	f002 fc72 	bl	8003b9c <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <ignitionTask+0x7c>)
 80012be:	701a      	strb	r2, [r3, #0]
	while (buttonState == GPIO_PIN_RESET)
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <ignitionTask+0x7c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0d7      	beq.n	8001278 <ignitionTask+0x20>
	}
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40020400 	.word	0x40020400
 80012d4:	2000042c 	.word	0x2000042c
 80012d8:	20000430 	.word	0x20000430
 80012dc:	20000384 	.word	0x20000384
 80012e0:	2000042d 	.word	0x2000042d

080012e4 <map>:
		return false;
	}
}

// General purpose map function
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	69b9      	ldr	r1, [r7, #24]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	1a8a      	subs	r2, r1, r2
 80012fe:	fb03 f202 	mul.w	r2, r3, r2
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1acb      	subs	r3, r1, r3
 8001308:	fb92 f2f3 	sdiv	r2, r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4413      	add	r3, r2
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <constrain>:

// General constrain function
long constrain(long x, long out_min, long out_max)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
	if (x < out_min)
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	429a      	cmp	r2, r3
 800132e:	da01      	bge.n	8001334 <constrain+0x18>
	{
		x = out_min;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60fb      	str	r3, [r7, #12]
	}

	if (x > out_max)
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	dd01      	ble.n	8001340 <constrain+0x24>
	{
		x = out_max;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	60fb      	str	r3, [r7, #12]
	}

	return x;
 8001340:	68fb      	ldr	r3, [r7, #12]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <primaryPotErrorCheck>:

// Primary Pedal position sensor range check
void primaryPotErrorCheck()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	primaryPotValue = constrain(ADC_GetAverageValue(&hadc1, 10), 0, 1023);
 8001354:	210a      	movs	r1, #10
 8001356:	4811      	ldr	r0, [pc, #68]	; (800139c <primaryPotErrorCheck+0x4c>)
 8001358:	f7ff fec2 	bl	80010e0 <ADC_GetAverageValue>
 800135c:	4603      	mov	r3, r0
 800135e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ffd9 	bl	800131c <constrain>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <primaryPotErrorCheck+0x50>)
 8001370:	601a      	str	r2, [r3, #0]

	if (primaryPotValue <= 0 || primaryPotValue >= 550)
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <primaryPotErrorCheck+0x50>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <primaryPotErrorCheck+0x36>
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <primaryPotErrorCheck+0x50>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f240 2225 	movw	r2, #549	; 0x225
 8001382:	4293      	cmp	r3, r2
 8001384:	d903      	bls.n	800138e <primaryPotErrorCheck+0x3e>
	{
		errorSet[0] = true;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <primaryPotErrorCheck+0x54>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	e003      	b.n	8001396 <primaryPotErrorCheck+0x46>
	}
	else
	{
		errorSet[0] = false;
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <primaryPotErrorCheck+0x54>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	}
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000284 	.word	0x20000284
 80013a0:	20000438 	.word	0x20000438
 80013a4:	20000434 	.word	0x20000434

080013a8 <secondaryPotErrorCheck>:

// Secondary Pedal position sensor range check
void secondaryPotErrorCheck()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	secondaryPotValue = constrain(ADC_GetAverageValue(&hadc2, 10), 0, 1023);
 80013ac:	210a      	movs	r1, #10
 80013ae:	4811      	ldr	r0, [pc, #68]	; (80013f4 <secondaryPotErrorCheck+0x4c>)
 80013b0:	f7ff fe96 	bl	80010e0 <ADC_GetAverageValue>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ffad 	bl	800131c <constrain>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <secondaryPotErrorCheck+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]

	if (secondaryPotValue <= 0 || secondaryPotValue >= 550)
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <secondaryPotErrorCheck+0x50>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <secondaryPotErrorCheck+0x36>
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <secondaryPotErrorCheck+0x50>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f240 2225 	movw	r2, #549	; 0x225
 80013da:	4293      	cmp	r3, r2
 80013dc:	d903      	bls.n	80013e6 <secondaryPotErrorCheck+0x3e>
	{
		errorSet[1] = true;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <secondaryPotErrorCheck+0x54>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	705a      	strb	r2, [r3, #1]
 80013e4:	e003      	b.n	80013ee <secondaryPotErrorCheck+0x46>
	}
	else
	{
		errorSet[1] = false;
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <secondaryPotErrorCheck+0x54>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	705a      	strb	r2, [r3, #1]
	}
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200002cc 	.word	0x200002cc
 80013f8:	2000043c 	.word	0x2000043c
 80013fc:	20000434 	.word	0x20000434

08001400 <torqueControl>:
	}
}

// Torque Control and Regenerative Braking Function
void torqueControl()
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b083      	sub	sp, #12
 8001404:	af02      	add	r7, sp, #8

	if (errorSet[0] == true && errorSet[1] == true)
 8001406:	4b54      	ldr	r3, [pc, #336]	; (8001558 <torqueControl+0x158>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <torqueControl+0x20>
 800140e:	4b52      	ldr	r3, [pc, #328]	; (8001558 <torqueControl+0x158>)
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d104      	bne.n	8001420 <torqueControl+0x20>
	{
		torqueRefLimit = 5000;
 8001416:	4b51      	ldr	r3, [pc, #324]	; (800155c <torqueControl+0x15c>)
 8001418:	f241 3288 	movw	r2, #5000	; 0x1388
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e05f      	b.n	80014e0 <torqueControl+0xe0>
	}
	else if (errorSet[0] == true)
 8001420:	4b4d      	ldr	r3, [pc, #308]	; (8001558 <torqueControl+0x158>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d12e      	bne.n	8001486 <torqueControl+0x86>
	{
		secondaryPotValue = constrain(ADC_GetAverageValue(&hadc2, 10), 0, 1023);
 8001428:	210a      	movs	r1, #10
 800142a:	484d      	ldr	r0, [pc, #308]	; (8001560 <torqueControl+0x160>)
 800142c:	f7ff fe58 	bl	80010e0 <ADC_GetAverageValue>
 8001430:	4603      	mov	r3, r0
 8001432:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff6f 	bl	800131c <constrain>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b48      	ldr	r3, [pc, #288]	; (8001564 <torqueControl+0x164>)
 8001444:	601a      	str	r2, [r3, #0]

		torqueRefLimit = map(secondaryPotValue, THROTTLE_POSITION_MIN_2, THROTTLE_POSITION_MAX_2, TORQUE_REF_LIM_MIN, TORQUE_REF_LIM_MAX);
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <torqueControl+0x164>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	461c      	mov	r4, r3
 800144c:	f240 113b 	movw	r1, #315	; 0x13b
 8001450:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8001454:	f241 3088 	movw	r0, #5000	; 0x1388
 8001458:	f242 531c 	movw	r3, #9500	; 0x251c
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	4603      	mov	r3, r0
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff ff3f 	bl	80012e4 <map>
 8001466:	4603      	mov	r3, r0
 8001468:	4a3c      	ldr	r2, [pc, #240]	; (800155c <torqueControl+0x15c>)
 800146a:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIM_MIN, TORQUE_REF_LIM_MAX);
 800146c:	4b3b      	ldr	r3, [pc, #236]	; (800155c <torqueControl+0x15c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f241 3188 	movw	r1, #5000	; 0x1388
 8001474:	f242 521c 	movw	r2, #9500	; 0x251c
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff4f 	bl	800131c <constrain>
 800147e:	4603      	mov	r3, r0
 8001480:	4a36      	ldr	r2, [pc, #216]	; (800155c <torqueControl+0x15c>)
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e02c      	b.n	80014e0 <torqueControl+0xe0>
	}
	else
	{
		primaryPotValue = constrain(ADC_GetAverageValue(&hadc1, 10), 0, 1023);
 8001486:	210a      	movs	r1, #10
 8001488:	4837      	ldr	r0, [pc, #220]	; (8001568 <torqueControl+0x168>)
 800148a:	f7ff fe29 	bl	80010e0 <ADC_GetAverageValue>
 800148e:	4603      	mov	r3, r0
 8001490:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff40 	bl	800131c <constrain>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <torqueControl+0x16c>)
 80014a2:	601a      	str	r2, [r3, #0]

		torqueRefLimit = map(primaryPotValue, THROTTLE_POSITION_MIN_1, THROTTLE_POSITION_MAX_1, TORQUE_REF_LIM_MIN, TORQUE_REF_LIM_MAX);
 80014a4:	4b31      	ldr	r3, [pc, #196]	; (800156c <torqueControl+0x16c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	461c      	mov	r4, r3
 80014aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80014ae:	22ea      	movs	r2, #234	; 0xea
 80014b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80014b4:	f242 531c 	movw	r3, #9500	; 0x251c
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	4603      	mov	r3, r0
 80014bc:	4620      	mov	r0, r4
 80014be:	f7ff ff11 	bl	80012e4 <map>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a25      	ldr	r2, [pc, #148]	; (800155c <torqueControl+0x15c>)
 80014c6:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIM_MIN, TORQUE_REF_LIM_MAX);
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <torqueControl+0x15c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f241 3188 	movw	r1, #5000	; 0x1388
 80014d0:	f242 521c 	movw	r2, #9500	; 0x251c
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff21 	bl	800131c <constrain>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a1f      	ldr	r2, [pc, #124]	; (800155c <torqueControl+0x15c>)
 80014de:	6013      	str	r3, [r2, #0]
	}

	brakePressure = ADC_GetAverageValue(&hadc3, 10);
 80014e0:	210a      	movs	r1, #10
 80014e2:	4823      	ldr	r0, [pc, #140]	; (8001570 <torqueControl+0x170>)
 80014e4:	f7ff fdfc 	bl	80010e0 <ADC_GetAverageValue>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <torqueControl+0x174>)
 80014ee:	801a      	strh	r2, [r3, #0]

    brakePressure += 44;
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <torqueControl+0x174>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	332c      	adds	r3, #44	; 0x2c
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <torqueControl+0x174>)
 80014fa:	801a      	strh	r2, [r3, #0]

	if (brakePressure > 110 && brakePressure < 127)
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <torqueControl+0x174>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	2b6e      	cmp	r3, #110	; 0x6e
 8001502:	d921      	bls.n	8001548 <torqueControl+0x148>
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <torqueControl+0x174>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2b7e      	cmp	r3, #126	; 0x7e
 800150a:	d81d      	bhi.n	8001548 <torqueControl+0x148>
	{
		 if (rpm > 200 && errorSet[0] == false && errorSet[1] == false && errorSet[2] == false)
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <torqueControl+0x178>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2bc8      	cmp	r3, #200	; 0xc8
 8001512:	dd19      	ble.n	8001548 <torqueControl+0x148>
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <torqueControl+0x158>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d115      	bne.n	8001548 <torqueControl+0x148>
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <torqueControl+0x158>)
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d111      	bne.n	8001548 <torqueControl+0x148>
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <torqueControl+0x158>)
 8001526:	789b      	ldrb	r3, [r3, #2]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10d      	bne.n	8001548 <torqueControl+0x148>
		 {
			 torqueRefLimit = map(torqueRefLimit, 110, 127, 5000, 4500);
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <torqueControl+0x15c>)
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	f241 1394 	movw	r3, #4500	; 0x1194
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	f241 3388 	movw	r3, #5000	; 0x1388
 800153a:	227f      	movs	r2, #127	; 0x7f
 800153c:	216e      	movs	r1, #110	; 0x6e
 800153e:	f7ff fed1 	bl	80012e4 <map>
 8001542:	4603      	mov	r3, r0
 8001544:	4a05      	ldr	r2, [pc, #20]	; (800155c <torqueControl+0x15c>)
 8001546:	6013      	str	r3, [r2, #0]
		 }
	}

	torqueControlMessage(&torqueRefLimit, &SPEED_REF_LIMIT);
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <torqueControl+0x17c>)
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <torqueControl+0x15c>)
 800154c:	f7ff fcda 	bl	8000f04 <torqueControlMessage>
}
 8001550:	bf00      	nop
 8001552:	3704      	adds	r7, #4
 8001554:	46bd      	mov	sp, r7
 8001556:	bd90      	pop	{r4, r7, pc}
 8001558:	20000434 	.word	0x20000434
 800155c:	20000000 	.word	0x20000000
 8001560:	200002cc 	.word	0x200002cc
 8001564:	2000043c 	.word	0x2000043c
 8001568:	20000284 	.word	0x20000284
 800156c:	20000438 	.word	0x20000438
 8001570:	20000314 	.word	0x20000314
 8001574:	200004a4 	.word	0x200004a4
 8001578:	20000490 	.word	0x20000490
 800157c:	08007548 	.word	0x08007548

08001580 <HAL_TIM_OC_DelayElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// RTD Speaker interrupt handler
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2110      	movs	r1, #16
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 800158e:	f002 fb1d 	bl	8003bcc <HAL_GPIO_WritePin>

	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001592:	2100      	movs	r1, #0
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8001596:	f003 fb69 	bl	8004c6c <HAL_TIM_OC_Stop_IT>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020400 	.word	0x40020400
 80015a8:	20000384 	.word	0x20000384

080015ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b0aa      	sub	sp, #168	; 0xa8
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b2:	f000 fff9 	bl	80025a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b6:	f000 f8bf 	bl	8001738 <SystemClock_Config>
  //vTraceEnable(TRC_START);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ba:	f000 fb7d 	bl	8001cb8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80015be:	f000 f927 	bl	8001810 <MX_ADC1_Init>
  MX_ADC2_Init();
 80015c2:	f000 f979 	bl	80018b8 <MX_ADC2_Init>
  MX_CAN1_Init();
 80015c6:	f000 fa1f 	bl	8001a08 <MX_CAN1_Init>
  MX_TIM2_Init();
 80015ca:	f000 fa55 	bl	8001a78 <MX_TIM2_Init>
  MX_TIM8_Init();
 80015ce:	f000 fac7 	bl	8001b60 <MX_TIM8_Init>
  MX_ADC3_Init();
 80015d2:	f000 f9c5 	bl	8001960 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  // Iniitialize CAN Protocol
  HAL_CAN_Start(&hcan1);
 80015d6:	4847      	ldr	r0, [pc, #284]	; (80016f4 <main+0x148>)
 80015d8:	f001 fe14 	bl	8003204 <HAL_CAN_Start>

  // Pump and Fan PWM
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80015dc:	2108      	movs	r1, #8
 80015de:	4846      	ldr	r0, [pc, #280]	; (80016f8 <main+0x14c>)
 80015e0:	f003 fc5c 	bl	8004e9c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80015e4:	210c      	movs	r1, #12
 80015e6:	4844      	ldr	r0, [pc, #272]	; (80016f8 <main+0x14c>)
 80015e8:	f003 fc58 	bl	8004e9c <HAL_TIM_PWM_Start>

  TIM8->CCR3 = 50;
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <main+0x150>)
 80015ee:	2232      	movs	r2, #50	; 0x32
 80015f0:	63da      	str	r2, [r3, #60]	; 0x3c

  TIM8->CCR4 = 50;
 80015f2:	4b42      	ldr	r3, [pc, #264]	; (80016fc <main+0x150>)
 80015f4:	2232      	movs	r2, #50	; 0x32
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015fe:	4840      	ldr	r0, [pc, #256]	; (8001700 <main+0x154>)
 8001600:	f002 fae4 	bl	8003bcc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2120      	movs	r1, #32
 8001608:	483e      	ldr	r0, [pc, #248]	; (8001704 <main+0x158>)
 800160a:	f002 fadf 	bl	8003bcc <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TorqueControl */
  osThreadDef(TorqueControl, StartDefaultTask, osPriorityNormal, 0, 200);
 800160e:	4b3e      	ldr	r3, [pc, #248]	; (8001708 <main+0x15c>)
 8001610:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001614:	461d      	mov	r5, r3
 8001616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800161e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TorqueControlHandle = osThreadCreate(osThread(TorqueControl), NULL);
 8001622:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f004 fc1c 	bl	8005e66 <osThreadCreate>
 800162e:	4603      	mov	r3, r0
 8001630:	4a36      	ldr	r2, [pc, #216]	; (800170c <main+0x160>)
 8001632:	6013      	str	r3, [r2, #0]

  /* definition and creation of NodeGuarding */
  osThreadDef(NodeGuarding, StartTask02, osPriorityAboveNormal, 0, 200);
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <main+0x164>)
 8001636:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800163a:	461d      	mov	r5, r3
 800163c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800163e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NodeGuardingHandle = osThreadCreate(osThread(NodeGuarding), NULL);
 8001648:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f004 fc09 	bl	8005e66 <osThreadCreate>
 8001654:	4603      	mov	r3, r0
 8001656:	4a2f      	ldr	r2, [pc, #188]	; (8001714 <main+0x168>)
 8001658:	6013      	str	r3, [r2, #0]

  /* definition and creation of OrionData */
  osThreadDef(OrionData, StartTask04, osPriorityNormal, 0, 200);
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <main+0x16c>)
 800165c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001660:	461d      	mov	r5, r3
 8001662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800166a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrionDataHandle = osThreadCreate(osThread(OrionData), NULL);
 800166e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f004 fbf6 	bl	8005e66 <osThreadCreate>
 800167a:	4603      	mov	r3, r0
 800167c:	4a27      	ldr	r2, [pc, #156]	; (800171c <main+0x170>)
 800167e:	6013      	str	r3, [r2, #0]

  /* definition and creation of PWM */
  osThreadDef(PWM, StartTask05, osPriorityNormal, 0, 200);
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <main+0x174>)
 8001682:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001686:	461d      	mov	r5, r3
 8001688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PWMHandle = osThreadCreate(osThread(PWM), NULL);
 8001694:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f004 fbe3 	bl	8005e66 <osThreadCreate>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a20      	ldr	r2, [pc, #128]	; (8001724 <main+0x178>)
 80016a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of OrionDerateData */
  osThreadDef(OrionDerateData, StartTask06, osPriorityNormal, 0, 200);
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <main+0x17c>)
 80016a8:	f107 041c 	add.w	r4, r7, #28
 80016ac:	461d      	mov	r5, r3
 80016ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrionDerateDataHandle = osThreadCreate(osThread(OrionDerateData), NULL);
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 fbd0 	bl	8005e66 <osThreadCreate>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a18      	ldr	r2, [pc, #96]	; (800172c <main+0x180>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of Ignition */
  osThreadDef(Ignition, StartTask06, osPriorityNormal, 0, 200);
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <main+0x184>)
 80016ce:	463c      	mov	r4, r7
 80016d0:	461d      	mov	r5, r3
 80016d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IgnitionHandle = osThreadCreate(osThread(Ignition), NULL);
 80016de:	463b      	mov	r3, r7
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 fbbf 	bl	8005e66 <osThreadCreate>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <main+0x188>)
 80016ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016ee:	f004 fbb3 	bl	8005e58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <main+0x146>
 80016f4:	2000035c 	.word	0x2000035c
 80016f8:	200003cc 	.word	0x200003cc
 80016fc:	40010400 	.word	0x40010400
 8001700:	40020400 	.word	0x40020400
 8001704:	40020800 	.word	0x40020800
 8001708:	0800745c 	.word	0x0800745c
 800170c:	20000414 	.word	0x20000414
 8001710:	08007488 	.word	0x08007488
 8001714:	20000418 	.word	0x20000418
 8001718:	080074b0 	.word	0x080074b0
 800171c:	2000041c 	.word	0x2000041c
 8001720:	080074d0 	.word	0x080074d0
 8001724:	20000420 	.word	0x20000420
 8001728:	080074fc 	.word	0x080074fc
 800172c:	20000424 	.word	0x20000424
 8001730:	08007524 	.word	0x08007524
 8001734:	20000428 	.word	0x20000428

08001738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b094      	sub	sp, #80	; 0x50
 800173c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	2234      	movs	r2, #52	; 0x34
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f005 fe38 	bl	80073bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <SystemClock_Config+0xd0>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	4a28      	ldr	r2, [pc, #160]	; (8001808 <SystemClock_Config+0xd0>)
 8001766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <SystemClock_Config+0xd0>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001778:	2300      	movs	r3, #0
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <SystemClock_Config+0xd4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <SystemClock_Config+0xd4>)
 8001786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <SystemClock_Config+0xd4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001798:	2302      	movs	r3, #2
 800179a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179c:	2301      	movs	r3, #1
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a0:	2310      	movs	r3, #16
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a4:	2302      	movs	r3, #2
 80017a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017a8:	2300      	movs	r3, #0
 80017aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ac:	2308      	movs	r3, #8
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80017b0:	235a      	movs	r3, #90	; 0x5a
 80017b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017bc:	2302      	movs	r3, #2
 80017be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fd83 	bl	80042d0 <HAL_RCC_OscConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80017d0:	f000 fc74 	bl	80020bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d4:	230f      	movs	r3, #15
 80017d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d8:	2302      	movs	r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	2102      	movs	r1, #2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fa05 	bl	8003c00 <HAL_RCC_ClockConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80017fc:	f000 fc5e 	bl	80020bc <Error_Handler>
  }
}
 8001800:	bf00      	nop
 8001802:	3750      	adds	r7, #80	; 0x50
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000

08001810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001816:	463b      	mov	r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <MX_ADC1_Init+0x9c>)
 8001824:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <MX_ADC1_Init+0xa0>)
 8001826:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <MX_ADC1_Init+0x9c>)
 800182a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800182e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <MX_ADC1_Init+0x9c>)
 8001832:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001836:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MX_ADC1_Init+0x9c>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <MX_ADC1_Init+0x9c>)
 8001840:	2200      	movs	r2, #0
 8001842:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <MX_ADC1_Init+0x9c>)
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_ADC1_Init+0x9c>)
 800184e:	2200      	movs	r2, #0
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_ADC1_Init+0x9c>)
 8001854:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <MX_ADC1_Init+0xa4>)
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_ADC1_Init+0x9c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_ADC1_Init+0x9c>)
 8001860:	2201      	movs	r2, #1
 8001862:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_ADC1_Init+0x9c>)
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_ADC1_Init+0x9c>)
 800186e:	2201      	movs	r2, #1
 8001870:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001872:	480e      	ldr	r0, [pc, #56]	; (80018ac <MX_ADC1_Init+0x9c>)
 8001874:	f000 feda 	bl	800262c <HAL_ADC_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800187e:	f000 fc1d 	bl	80020bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001882:	230b      	movs	r3, #11
 8001884:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800188a:	2303      	movs	r3, #3
 800188c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800188e:	463b      	mov	r3, r7
 8001890:	4619      	mov	r1, r3
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <MX_ADC1_Init+0x9c>)
 8001894:	f001 f8ac 	bl	80029f0 <HAL_ADC_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800189e:	f000 fc0d 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000284 	.word	0x20000284
 80018b0:	40012000 	.word	0x40012000
 80018b4:	0f000001 	.word	0x0f000001

080018b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018be:	463b      	mov	r3, r7
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <MX_ADC2_Init+0x9c>)
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <MX_ADC2_Init+0xa0>)
 80018ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <MX_ADC2_Init+0x9c>)
 80018d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <MX_ADC2_Init+0x9c>)
 80018da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018de:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <MX_ADC2_Init+0x9c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_ADC2_Init+0x9c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <MX_ADC2_Init+0x9c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_ADC2_Init+0x9c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <MX_ADC2_Init+0x9c>)
 80018fc:	4a17      	ldr	r2, [pc, #92]	; (800195c <MX_ADC2_Init+0xa4>)
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_ADC2_Init+0x9c>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_ADC2_Init+0x9c>)
 8001908:	2201      	movs	r2, #1
 800190a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_ADC2_Init+0x9c>)
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_ADC2_Init+0x9c>)
 8001916:	2201      	movs	r2, #1
 8001918:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800191a:	480e      	ldr	r0, [pc, #56]	; (8001954 <MX_ADC2_Init+0x9c>)
 800191c:	f000 fe86 	bl	800262c <HAL_ADC_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001926:	f000 fbc9 	bl	80020bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800192a:	230c      	movs	r3, #12
 800192c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800192e:	2301      	movs	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001932:	2303      	movs	r3, #3
 8001934:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001936:	463b      	mov	r3, r7
 8001938:	4619      	mov	r1, r3
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <MX_ADC2_Init+0x9c>)
 800193c:	f001 f858 	bl	80029f0 <HAL_ADC_ConfigChannel>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001946:	f000 fbb9 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200002cc 	.word	0x200002cc
 8001958:	40012100 	.word	0x40012100
 800195c:	0f000001 	.word	0x0f000001

08001960 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001966:	463b      	mov	r3, r7
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <MX_ADC3_Init+0x9c>)
 8001974:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <MX_ADC3_Init+0xa0>)
 8001976:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <MX_ADC3_Init+0x9c>)
 800197a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800197e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <MX_ADC3_Init+0x9c>)
 8001982:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001986:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <MX_ADC3_Init+0x9c>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_ADC3_Init+0x9c>)
 8001990:	2200      	movs	r2, #0
 8001992:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <MX_ADC3_Init+0x9c>)
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_ADC3_Init+0x9c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_ADC3_Init+0x9c>)
 80019a4:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <MX_ADC3_Init+0xa4>)
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_ADC3_Init+0x9c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <MX_ADC3_Init+0x9c>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_ADC3_Init+0x9c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_ADC3_Init+0x9c>)
 80019be:	2201      	movs	r2, #1
 80019c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80019c2:	480e      	ldr	r0, [pc, #56]	; (80019fc <MX_ADC3_Init+0x9c>)
 80019c4:	f000 fe32 	bl	800262c <HAL_ADC_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 80019ce:	f000 fb75 	bl	80020bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80019d2:	230d      	movs	r3, #13
 80019d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80019da:	2303      	movs	r3, #3
 80019dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019de:	463b      	mov	r3, r7
 80019e0:	4619      	mov	r1, r3
 80019e2:	4806      	ldr	r0, [pc, #24]	; (80019fc <MX_ADC3_Init+0x9c>)
 80019e4:	f001 f804 	bl	80029f0 <HAL_ADC_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 80019ee:	f000 fb65 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000314 	.word	0x20000314
 8001a00:	40012200 	.word	0x40012200
 8001a04:	0f000001 	.word	0x0f000001

08001a08 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a0e:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <MX_CAN1_Init+0x6c>)
 8001a10:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a14:	2205      	movs	r2, #5
 8001a16:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a26:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a2a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a32:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_CAN1_Init+0x68>)
 8001a5a:	f001 f9f7 	bl	8002e4c <HAL_CAN_Init>
  {
    //Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  motorAndControllerTempFilterConfig();
 8001a5e:	f7ff fad1 	bl	8001004 <motorAndControllerTempFilterConfig>

  motorRPMFilterConfig();
 8001a62:	f7ff faf9 	bl	8001058 <motorRPMFilterConfig>

  orionFilterConfig();
 8001a66:	f7ff faa3 	bl	8000fb0 <orionFilterConfig>

  //orionFilterConfig_1();

  /* USER CODE END CAN1_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000035c 	.word	0x2000035c
 8001a74:	40006400 	.word	0x40006400

08001a78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	615a      	str	r2, [r3, #20]
 8001aa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <MX_TIM2_Init+0xe4>)
 8001aaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000-1;
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <MX_TIM2_Init+0xe4>)
 8001ab2:	f244 624f 	movw	r2, #17999	; 0x464f
 8001ab6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <MX_TIM2_Init+0xe4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001abe:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <MX_TIM2_Init+0xe4>)
 8001ac0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ac4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac6:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <MX_TIM2_Init+0xe4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <MX_TIM2_Init+0xe4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ad2:	4822      	ldr	r0, [pc, #136]	; (8001b5c <MX_TIM2_Init+0xe4>)
 8001ad4:	f002 fe9a 	bl	800480c <HAL_TIM_Base_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ade:	f000 faed 	bl	80020bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aec:	4619      	mov	r1, r3
 8001aee:	481b      	ldr	r0, [pc, #108]	; (8001b5c <MX_TIM2_Init+0xe4>)
 8001af0:	f003 fcc2 	bl	8005478 <HAL_TIM_ConfigClockSource>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001afa:	f000 fadf 	bl	80020bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001afe:	4817      	ldr	r0, [pc, #92]	; (8001b5c <MX_TIM2_Init+0xe4>)
 8001b00:	f002 ff44 	bl	800498c <HAL_TIM_OC_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b0a:	f000 fad7 	bl	80020bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480f      	ldr	r0, [pc, #60]	; (8001b5c <MX_TIM2_Init+0xe4>)
 8001b1e:	f004 f8a1 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b28:	f000 fac8 	bl	80020bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8001b30:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_TIM2_Init+0xe4>)
 8001b46:	f003 fb79 	bl	800523c <HAL_TIM_OC_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001b50:	f000 fab4 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3738      	adds	r7, #56	; 0x38
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000384 	.word	0x20000384

08001b60 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b096      	sub	sp, #88	; 0x58
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	615a      	str	r2, [r3, #20]
 8001b90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2220      	movs	r2, #32
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f005 fc0f 	bl	80073bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b9e:	4b44      	ldr	r3, [pc, #272]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001ba0:	4a44      	ldr	r2, [pc, #272]	; (8001cb4 <MX_TIM8_Init+0x154>)
 8001ba2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 36-1;
 8001ba4:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001ba6:	2223      	movs	r2, #35	; 0x23
 8001ba8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8001bb0:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001bb2:	2263      	movs	r2, #99	; 0x63
 8001bb4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bbc:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001bc8:	4839      	ldr	r0, [pc, #228]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001bca:	f002 fe1f 	bl	800480c <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001bd4:	f000 fa72 	bl	80020bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001be2:	4619      	mov	r1, r3
 8001be4:	4832      	ldr	r0, [pc, #200]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001be6:	f003 fc47 	bl	8005478 <HAL_TIM_ConfigClockSource>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001bf0:	f000 fa64 	bl	80020bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bf4:	482e      	ldr	r0, [pc, #184]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001bf6:	f003 f8f7 	bl	8004de8 <HAL_TIM_PWM_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001c00:	f000 fa5c 	bl	80020bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c10:	4619      	mov	r1, r3
 8001c12:	4827      	ldr	r0, [pc, #156]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001c14:	f004 f826 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001c1e:	f000 fa4d 	bl	80020bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c22:	2360      	movs	r3, #96	; 0x60
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	2208      	movs	r2, #8
 8001c44:	4619      	mov	r1, r3
 8001c46:	481a      	ldr	r0, [pc, #104]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001c48:	f003 fb54 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001c52:	f000 fa33 	bl	80020bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4814      	ldr	r0, [pc, #80]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001c60:	f003 fb48 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001c6a:	f000 fa27 	bl	80020bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001c92:	f004 f863 	bl	8005d5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001c9c:	f000 fa0e 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ca0:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <MX_TIM8_Init+0x150>)
 8001ca2:	f000 fb65 	bl	8002370 <HAL_TIM_MspPostInit>

}
 8001ca6:	bf00      	nop
 8001ca8:	3758      	adds	r7, #88	; 0x58
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200003cc 	.word	0x200003cc
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a40      	ldr	r2, [pc, #256]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a39      	ldr	r2, [pc, #228]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a32      	ldr	r2, [pc, #200]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <MX_GPIO_Init+0x120>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8001d44:	4825      	ldr	r0, [pc, #148]	; (8001ddc <MX_GPIO_Init+0x124>)
 8001d46:	f001 ff41 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d50:	4823      	ldr	r0, [pc, #140]	; (8001de0 <MX_GPIO_Init+0x128>)
 8001d52:	f001 ff3b 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2110      	movs	r1, #16
 8001d5a:	4821      	ldr	r0, [pc, #132]	; (8001de0 <MX_GPIO_Init+0x128>)
 8001d5c:	f001 ff36 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11;
 8001d60:	f44f 6342 	mov.w	r3, #3104	; 0xc20
 8001d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4818      	ldr	r0, [pc, #96]	; (8001ddc <MX_GPIO_Init+0x124>)
 8001d7a:	f001 fd7b 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4813      	ldr	r0, [pc, #76]	; (8001de0 <MX_GPIO_Init+0x128>)
 8001d92:	f001 fd6f 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da4:	2302      	movs	r3, #2
 8001da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	480c      	ldr	r0, [pc, #48]	; (8001de0 <MX_GPIO_Init+0x128>)
 8001db0:	f001 fd60 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001db4:	2310      	movs	r3, #16
 8001db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_GPIO_Init+0x128>)
 8001dcc:	f001 fd52 	bl	8003874 <HAL_GPIO_Init>

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	; 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020400 	.word	0x40020400

08001de4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) // Torque Control Thread
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;
 8001dec:	230a      	movs	r3, #10
 8001dee:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8001df0:	f004 fc88 	bl	8006704 <xTaskGetTickCount>
 8001df4:	4603      	mov	r3, r0
 8001df6:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {

	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001df8:	f107 0308 	add.w	r3, r7, #8
 8001dfc:	68f9      	ldr	r1, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 fac4 	bl	800638c <vTaskDelayUntil>

	  syncMessage();
 8001e04:	f7ff f846 	bl	8000e94 <syncMessage>

	  vTaskDelay(pdMS_TO_TICKS(2));
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f004 fb3d 	bl	8006488 <vTaskDelay>

	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeaderFIFO1, data);
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <StartDefaultTask+0x90>)
 8001e10:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <StartDefaultTask+0x94>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	4819      	ldr	r0, [pc, #100]	; (8001e7c <StartDefaultTask+0x98>)
 8001e16:	f001 fb38 	bl	800348a <HAL_CAN_GetRxMessage>

	  if (rxHeaderFIFO1.StdId == 0x3FA)
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <StartDefaultTask+0x94>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f240 32fa 	movw	r2, #1018	; 0x3fa
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d109      	bne.n	8001e3a <StartDefaultTask+0x56>
	  {
		  rpm = ((int)(data[1]<<8) | (int)data[0]) - 32768;
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <StartDefaultTask+0x90>)
 8001e28:	785b      	ldrb	r3, [r3, #1]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <StartDefaultTask+0x90>)
 8001e2e:	7812      	ldrb	r2, [r2, #0]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <StartDefaultTask+0x9c>)
 8001e38:	6013      	str	r3, [r2, #0]
	  }

	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeaderFIFO1, data);
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <StartDefaultTask+0x90>)
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <StartDefaultTask+0x94>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	480e      	ldr	r0, [pc, #56]	; (8001e7c <StartDefaultTask+0x98>)
 8001e42:	f001 fb22 	bl	800348a <HAL_CAN_GetRxMessage>

	  if (rxHeaderFIFO1.StdId == 0x1BA)
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <StartDefaultTask+0x94>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f5b3 7fdd 	cmp.w	r3, #442	; 0x1ba
 8001e4e:	d109      	bne.n	8001e64 <StartDefaultTask+0x80>
	  {
		  motorControllerTemp = (int)data[0] - 40;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <StartDefaultTask+0x90>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	3b28      	subs	r3, #40	; 0x28
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <StartDefaultTask+0xa0>)
 8001e58:	6013      	str	r3, [r2, #0]

		  motorTemp = (int)data[1] - 40;
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <StartDefaultTask+0x90>)
 8001e5c:	785b      	ldrb	r3, [r3, #1]
 8001e5e:	3b28      	subs	r3, #40	; 0x28
 8001e60:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <StartDefaultTask+0xa4>)
 8001e62:	6013      	str	r3, [r2, #0]
	  }

	  primaryPotErrorCheck();
 8001e64:	f7ff fa74 	bl	8001350 <primaryPotErrorCheck>

	  secondaryPotErrorCheck();
 8001e68:	f7ff fa9e 	bl	80013a8 <secondaryPotErrorCheck>

	  torqueControl();
 8001e6c:	f7ff fac8 	bl	8001400 <torqueControl>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001e70:	e7c2      	b.n	8001df8 <StartDefaultTask+0x14>
 8001e72:	bf00      	nop
 8001e74:	20000480 	.word	0x20000480
 8001e78:	20000464 	.word	0x20000464
 8001e7c:	2000035c 	.word	0x2000035c
 8001e80:	20000490 	.word	0x20000490
 8001e84:	20000498 	.word	0x20000498
 8001e88:	20000494 	.word	0x20000494

08001e8c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument) // Inverter Node Guarding Thread
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 150;
 8001e94:	2396      	movs	r3, #150	; 0x96
 8001e96:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8001e98:	f004 fc34 	bl	8006704 <xTaskGetTickCount>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	68f9      	ldr	r1, [r7, #12]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f004 fa70 	bl	800638c <vTaskDelayUntil>

	  nodeGuarding();
 8001eac:	f7fe ffba 	bl	8000e24 <nodeGuarding>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001eb0:	e7f6      	b.n	8001ea0 <StartTask02+0x14>
	...

08001eb4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument) // BMS Torque Deration Thread
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 95;
 8001ebc:	235f      	movs	r3, #95	; 0x5f
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	68f9      	ldr	r1, [r7, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f004 fa60 	bl	800638c <vTaskDelayUntil>

	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeaderFIFO0, dataFIFO0);
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <StartTask04+0x90>)
 8001ece:	4a1e      	ldr	r2, [pc, #120]	; (8001f48 <StartTask04+0x94>)
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	481e      	ldr	r0, [pc, #120]	; (8001f4c <StartTask04+0x98>)
 8001ed4:	f001 fad9 	bl	800348a <HAL_CAN_GetRxMessage>

	  if (rxHeaderFIFO0.StdId == 0x6CA)
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <StartTask04+0x94>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f240 62ca 	movw	r2, #1738	; 0x6ca
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d1ed      	bne.n	8001ec0 <StartTask04+0xc>
	  {
		  packCurrent = ((dataFIFO0[0]<<8) | dataFIFO0[1]) / 100;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <StartTask04+0x90>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <StartTask04+0x90>)
 8001eec:	7852      	ldrb	r2, [r2, #1]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <StartTask04+0x9c>)
 8001ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef6:	1152      	asrs	r2, r2, #5
 8001ef8:	17db      	asrs	r3, r3, #31
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <StartTask04+0xa0>)
 8001f00:	801a      	strh	r2, [r3, #0]

		  packStateOfCharge = ((dataFIFO0[2]<<8) | dataFIFO0[3]) / 100.0 * 2.0;
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <StartTask04+0x90>)
 8001f04:	789b      	ldrb	r3, [r3, #2]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <StartTask04+0x90>)
 8001f0a:	78d2      	ldrb	r2, [r2, #3]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fad0 	bl	80004b4 <__aeabi_i2d>
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <StartTask04+0xa4>)
 8001f1a:	f7fe fc5f 	bl	80007dc <__aeabi_ddiv>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	f7fe f977 	bl	800021c <__adddf3>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	f7fe fd39 	bl	80009ac <__aeabi_d2f>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <StartTask04+0xa8>)
 8001f3e:	6013      	str	r3, [r2, #0]
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001f40:	e7be      	b.n	8001ec0 <StartTask04+0xc>
 8001f42:	bf00      	nop
 8001f44:	2000045c 	.word	0x2000045c
 8001f48:	20000440 	.word	0x20000440
 8001f4c:	2000035c 	.word	0x2000035c
 8001f50:	51eb851f 	.word	0x51eb851f
 8001f54:	2000048c 	.word	0x2000048c
 8001f58:	40590000 	.word	0x40590000
 8001f5c:	20000488 	.word	0x20000488

08001f60 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument) // Radiator Fan and Pump PWM Thread
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {

	  if (motorTemp > 30 || motorControllerTemp > 30)
 8001f68:	4b42      	ldr	r3, [pc, #264]	; (8002074 <StartTask05+0x114>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b1e      	cmp	r3, #30
 8001f6e:	dc03      	bgt.n	8001f78 <StartTask05+0x18>
 8001f70:	4b41      	ldr	r3, [pc, #260]	; (8002078 <StartTask05+0x118>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b1e      	cmp	r3, #30
 8001f76:	dd6d      	ble.n	8002054 <StartTask05+0xf4>
	  {
		  if (motorTemp > motorControllerTemp)
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <StartTask05+0x114>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <StartTask05+0x118>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	dd33      	ble.n	8001fec <StartTask05+0x8c>
		  {
			  constrain(motorTemp, 25, 80);
 8001f84:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <StartTask05+0x114>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2250      	movs	r2, #80	; 0x50
 8001f8a:	2119      	movs	r1, #25
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f9c5 	bl	800131c <constrain>

			  pumpPWM = constrain(map(motorTemp, 25, 80, 30, 50), 30, 50);
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <StartTask05+0x114>)
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	2332      	movs	r3, #50	; 0x32
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	231e      	movs	r3, #30
 8001f9c:	2250      	movs	r2, #80	; 0x50
 8001f9e:	2119      	movs	r1, #25
 8001fa0:	f7ff f9a0 	bl	80012e4 <map>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2232      	movs	r2, #50	; 0x32
 8001fa8:	211e      	movs	r1, #30
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f9b6 	bl	800131c <constrain>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4a32      	ldr	r2, [pc, #200]	; (800207c <StartTask05+0x11c>)
 8001fb4:	6013      	str	r3, [r2, #0]

			  TIM8->CCR3 =  pumpPWM; // Pump
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <StartTask05+0x11c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <StartTask05+0x120>)
 8001fbc:	63da      	str	r2, [r3, #60]	; 0x3c

			  fanPWM = constrain(map(motorTemp, 25, 80, 30, 50), 30, 50);
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <StartTask05+0x114>)
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	2332      	movs	r3, #50	; 0x32
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	231e      	movs	r3, #30
 8001fc8:	2250      	movs	r2, #80	; 0x50
 8001fca:	2119      	movs	r1, #25
 8001fcc:	f7ff f98a 	bl	80012e4 <map>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2232      	movs	r2, #50	; 0x32
 8001fd4:	211e      	movs	r1, #30
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f9a0 	bl	800131c <constrain>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4a29      	ldr	r2, [pc, #164]	; (8002084 <StartTask05+0x124>)
 8001fe0:	6013      	str	r3, [r2, #0]

			  TIM8->CCR4 = fanPWM; // Fan
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <StartTask05+0x124>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <StartTask05+0x120>)
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
		  if (motorTemp > motorControllerTemp)
 8001fea:	e041      	b.n	8002070 <StartTask05+0x110>
		  }
		  else
		  {
			  constrain(motorControllerTemp, 25, 55);
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <StartTask05+0x118>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2237      	movs	r2, #55	; 0x37
 8001ff2:	2119      	movs	r1, #25
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff f991 	bl	800131c <constrain>

			  pumpPWM = constrain(map(motorControllerTemp, 25, 55, 30, 50), 30, 50);
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <StartTask05+0x118>)
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	2332      	movs	r3, #50	; 0x32
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	231e      	movs	r3, #30
 8002004:	2237      	movs	r2, #55	; 0x37
 8002006:	2119      	movs	r1, #25
 8002008:	f7ff f96c 	bl	80012e4 <map>
 800200c:	4603      	mov	r3, r0
 800200e:	2232      	movs	r2, #50	; 0x32
 8002010:	211e      	movs	r1, #30
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f982 	bl	800131c <constrain>
 8002018:	4603      	mov	r3, r0
 800201a:	4a18      	ldr	r2, [pc, #96]	; (800207c <StartTask05+0x11c>)
 800201c:	6013      	str	r3, [r2, #0]

			  TIM8->CCR3 = pumpPWM; // Pump
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <StartTask05+0x11c>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <StartTask05+0x120>)
 8002024:	63da      	str	r2, [r3, #60]	; 0x3c

			  fanPWM = constrain(map(motorControllerTemp, 25, 55, 30, 50), 30, 50);
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <StartTask05+0x118>)
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	2332      	movs	r3, #50	; 0x32
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	231e      	movs	r3, #30
 8002030:	2237      	movs	r2, #55	; 0x37
 8002032:	2119      	movs	r1, #25
 8002034:	f7ff f956 	bl	80012e4 <map>
 8002038:	4603      	mov	r3, r0
 800203a:	2232      	movs	r2, #50	; 0x32
 800203c:	211e      	movs	r1, #30
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f96c 	bl	800131c <constrain>
 8002044:	4603      	mov	r3, r0
 8002046:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <StartTask05+0x124>)
 8002048:	6013      	str	r3, [r2, #0]

			  TIM8->CCR4 = fanPWM; // Fan
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <StartTask05+0x124>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <StartTask05+0x120>)
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
		  if (motorTemp > motorControllerTemp)
 8002052:	e00d      	b.n	8002070 <StartTask05+0x110>
		  }
	  }
	  else
	  {
		  pumpPWM = 50;
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <StartTask05+0x11c>)
 8002056:	2232      	movs	r2, #50	; 0x32
 8002058:	601a      	str	r2, [r3, #0]

		  fanPWM = 50;
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <StartTask05+0x124>)
 800205c:	2232      	movs	r2, #50	; 0x32
 800205e:	601a      	str	r2, [r3, #0]

		  TIM8->CCR3 = pumpPWM;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <StartTask05+0x11c>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <StartTask05+0x120>)
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c

		  TIM8->CCR4 = fanPWM;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <StartTask05+0x124>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <StartTask05+0x120>)
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
	  if (motorTemp > 30 || motorControllerTemp > 30)
 8002070:	e77a      	b.n	8001f68 <StartTask05+0x8>
 8002072:	bf00      	nop
 8002074:	20000494 	.word	0x20000494
 8002078:	20000498 	.word	0x20000498
 800207c:	2000049c 	.word	0x2000049c
 8002080:	40010400 	.word	0x40010400
 8002084:	200004a0 	.word	0x200004a0

08002088 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument) // Ignition Thread
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
	  ignitionTask();
 8002090:	f7ff f8e2 	bl	8001258 <ignitionTask>
 8002094:	e7fc      	b.n	8002090 <StartTask06+0x8>
	...

08002098 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020aa:	f000 fa9f 	bl	80025ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40000400 	.word	0x40000400

080020bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c0:	b672      	cpsid	i
}
 80020c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <Error_Handler+0x8>
	...

080020c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_MspInit+0x54>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_MspInit+0x54>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_MspInit+0x54>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_MspInit+0x54>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <HAL_MspInit+0x54>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_MspInit+0x54>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	210f      	movs	r1, #15
 800210a:	f06f 0001 	mvn.w	r0, #1
 800210e:	f001 fb87 	bl	8003820 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800

08002120 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08e      	sub	sp, #56	; 0x38
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a45      	ldr	r2, [pc, #276]	; (8002254 <HAL_ADC_MspInit+0x134>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d128      	bne.n	8002194 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	4b44      	ldr	r3, [pc, #272]	; (8002258 <HAL_ADC_MspInit+0x138>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a43      	ldr	r2, [pc, #268]	; (8002258 <HAL_ADC_MspInit+0x138>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b41      	ldr	r3, [pc, #260]	; (8002258 <HAL_ADC_MspInit+0x138>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	623b      	str	r3, [r7, #32]
 800215c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <HAL_ADC_MspInit+0x138>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a3c      	ldr	r2, [pc, #240]	; (8002258 <HAL_ADC_MspInit+0x138>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <HAL_ADC_MspInit+0x138>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800217a:	2302      	movs	r3, #2
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800217e:	2303      	movs	r3, #3
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218a:	4619      	mov	r1, r3
 800218c:	4833      	ldr	r0, [pc, #204]	; (800225c <HAL_ADC_MspInit+0x13c>)
 800218e:	f001 fb71 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002192:	e05a      	b.n	800224a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a31      	ldr	r2, [pc, #196]	; (8002260 <HAL_ADC_MspInit+0x140>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d128      	bne.n	80021f0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_ADC_MspInit+0x138>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4a2c      	ldr	r2, [pc, #176]	; (8002258 <HAL_ADC_MspInit+0x138>)
 80021a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ac:	6453      	str	r3, [r2, #68]	; 0x44
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <HAL_ADC_MspInit+0x138>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <HAL_ADC_MspInit+0x138>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a25      	ldr	r2, [pc, #148]	; (8002258 <HAL_ADC_MspInit+0x138>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b23      	ldr	r3, [pc, #140]	; (8002258 <HAL_ADC_MspInit+0x138>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d6:	2304      	movs	r3, #4
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021da:	2303      	movs	r3, #3
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e6:	4619      	mov	r1, r3
 80021e8:	481c      	ldr	r0, [pc, #112]	; (800225c <HAL_ADC_MspInit+0x13c>)
 80021ea:	f001 fb43 	bl	8003874 <HAL_GPIO_Init>
}
 80021ee:	e02c      	b.n	800224a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_ADC_MspInit+0x144>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d127      	bne.n	800224a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_ADC_MspInit+0x138>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a15      	ldr	r2, [pc, #84]	; (8002258 <HAL_ADC_MspInit+0x138>)
 8002204:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_ADC_MspInit+0x138>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <HAL_ADC_MspInit+0x138>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <HAL_ADC_MspInit+0x138>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <HAL_ADC_MspInit+0x138>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002232:	2308      	movs	r3, #8
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002236:	2303      	movs	r3, #3
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	4805      	ldr	r0, [pc, #20]	; (800225c <HAL_ADC_MspInit+0x13c>)
 8002246:	f001 fb15 	bl	8003874 <HAL_GPIO_Init>
}
 800224a:	bf00      	nop
 800224c:	3738      	adds	r7, #56	; 0x38
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40012000 	.word	0x40012000
 8002258:	40023800 	.word	0x40023800
 800225c:	40020800 	.word	0x40020800
 8002260:	40012100 	.word	0x40012100
 8002264:	40012200 	.word	0x40012200

08002268 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <HAL_CAN_MspInit+0x84>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d12c      	bne.n	80022e4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <HAL_CAN_MspInit+0x88>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <HAL_CAN_MspInit+0x88>)
 8002294:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_CAN_MspInit+0x88>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_CAN_MspInit+0x88>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <HAL_CAN_MspInit+0x88>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <HAL_CAN_MspInit+0x88>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d0:	2303      	movs	r3, #3
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80022d4:	2309      	movs	r3, #9
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4619      	mov	r1, r3
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <HAL_CAN_MspInit+0x8c>)
 80022e0:	f001 fac8 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40006400 	.word	0x40006400
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020000 	.word	0x40020000

080022f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002308:	d116      	bne.n	8002338 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_TIM_Base_MspInit+0x70>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_TIM_Base_MspInit+0x70>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_TIM_Base_MspInit+0x70>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2105      	movs	r1, #5
 800232a:	201c      	movs	r0, #28
 800232c:	f001 fa78 	bl	8003820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002330:	201c      	movs	r0, #28
 8002332:	f001 fa91 	bl	8003858 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002336:	e012      	b.n	800235e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM8)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_TIM_Base_MspInit+0x74>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10d      	bne.n	800235e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_TIM_Base_MspInit+0x70>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a07      	ldr	r2, [pc, #28]	; (8002368 <HAL_TIM_Base_MspInit+0x70>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_TIM_Base_MspInit+0x70>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <HAL_TIM_MspPostInit+0x68>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d11e      	bne.n	80023d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_TIM_MspPostInit+0x6c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a10      	ldr	r2, [pc, #64]	; (80023dc <HAL_TIM_MspPostInit+0x6c>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <HAL_TIM_MspPostInit+0x6c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023c0:	2303      	movs	r3, #3
 80023c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	4619      	mov	r1, r3
 80023ca:	4805      	ldr	r0, [pc, #20]	; (80023e0 <HAL_TIM_MspPostInit+0x70>)
 80023cc:	f001 fa52 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80023d0:	bf00      	nop
 80023d2:	3720      	adds	r7, #32
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40010400 	.word	0x40010400
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020800 	.word	0x40020800

080023e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08e      	sub	sp, #56	; 0x38
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_InitTick+0xe4>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	4a32      	ldr	r2, [pc, #200]	; (80024c8 <HAL_InitTick+0xe4>)
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	6413      	str	r3, [r2, #64]	; 0x40
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_InitTick+0xe4>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002410:	f107 0210 	add.w	r2, r7, #16
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f001 fcf6 	bl	8003e0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800242a:	f001 fcdb 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 800242e:	6378      	str	r0, [r7, #52]	; 0x34
 8002430:	e004      	b.n	800243c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002432:	f001 fcd7 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 8002436:	4603      	mov	r3, r0
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	4a23      	ldr	r2, [pc, #140]	; (80024cc <HAL_InitTick+0xe8>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	3b01      	subs	r3, #1
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_InitTick+0xec>)
 800244c:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <HAL_InitTick+0xf0>)
 800244e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002450:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <HAL_InitTick+0xec>)
 8002452:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002456:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002458:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <HAL_InitTick+0xec>)
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_InitTick+0xec>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_InitTick+0xec>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_InitTick+0xec>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002470:	4817      	ldr	r0, [pc, #92]	; (80024d0 <HAL_InitTick+0xec>)
 8002472:	f002 f9cb 	bl	800480c <HAL_TIM_Base_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800247c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002480:	2b00      	cmp	r3, #0
 8002482:	d11b      	bne.n	80024bc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002484:	4812      	ldr	r0, [pc, #72]	; (80024d0 <HAL_InitTick+0xec>)
 8002486:	f002 fa11 	bl	80048ac <HAL_TIM_Base_Start_IT>
 800248a:	4603      	mov	r3, r0
 800248c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002490:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002498:	201d      	movs	r0, #29
 800249a:	f001 f9dd 	bl	8003858 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b0f      	cmp	r3, #15
 80024a2:	d808      	bhi.n	80024b6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80024a4:	2200      	movs	r2, #0
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	201d      	movs	r0, #29
 80024aa:	f001 f9b9 	bl	8003820 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_InitTick+0xf4>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e002      	b.n	80024bc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3738      	adds	r7, #56	; 0x38
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	431bde83 	.word	0x431bde83
 80024d0:	200004a8 	.word	0x200004a8
 80024d4:	40000400 	.word	0x40000400
 80024d8:	20000008 	.word	0x20000008

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <NMI_Handler+0x4>

080024e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <MemManage_Handler+0x4>

080024ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <TIM2_IRQHandler+0x10>)
 800250e:	f002 fd8d 	bl	800502c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000384 	.word	0x20000384

0800251c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <TIM3_IRQHandler+0x10>)
 8002522:	f002 fd83 	bl	800502c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200004a8 	.word	0x200004a8

08002530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <SystemInit+0x20>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <SystemInit+0x20>)
 800253c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800258c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002558:	480d      	ldr	r0, [pc, #52]	; (8002590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800255a:	490e      	ldr	r1, [pc, #56]	; (8002594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800255c:	4a0e      	ldr	r2, [pc, #56]	; (8002598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002560:	e002      	b.n	8002568 <LoopCopyDataInit>

08002562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002566:	3304      	adds	r3, #4

08002568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800256a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800256c:	d3f9      	bcc.n	8002562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002570:	4c0b      	ldr	r4, [pc, #44]	; (80025a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002574:	e001      	b.n	800257a <LoopFillZerobss>

08002576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002578:	3204      	adds	r2, #4

0800257a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800257a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800257c:	d3fb      	bcc.n	8002576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800257e:	f7ff ffd7 	bl	8002530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002582:	f004 ff23 	bl	80073cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002586:	f7ff f811 	bl	80015ac <main>
  bx  lr    
 800258a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800258c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002594:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002598:	08007574 	.word	0x08007574
  ldr r2, =_sbss
 800259c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80025a0:	20004248 	.word	0x20004248

080025a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025a4:	e7fe      	b.n	80025a4 <ADC_IRQHandler>
	...

080025a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_Init+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <HAL_Init+0x40>)
 80025b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <HAL_Init+0x40>)
 80025be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_Init+0x40>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_Init+0x40>)
 80025ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d0:	2003      	movs	r0, #3
 80025d2:	f001 f91a 	bl	800380a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025d6:	200f      	movs	r0, #15
 80025d8:	f7ff ff04 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025dc:	f7ff fd74 	bl	80020c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023c00 	.word	0x40023c00

080025ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_IncTick+0x20>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x24>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_IncTick+0x24>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2000000c 	.word	0x2000000c
 8002610:	200004f0 	.word	0x200004f0

08002614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_GetTick+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	200004f0 	.word	0x200004f0

0800262c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e033      	b.n	80026aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fd68 	bl	8002120 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d118      	bne.n	800269c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002672:	f023 0302 	bic.w	r3, r3, #2
 8002676:	f043 0202 	orr.w	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fae8 	bl	8002c54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
 800269a:	e001      	b.n	80026a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_Start+0x1a>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e0b2      	b.n	8002834 <HAL_ADC_Start+0x180>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d018      	beq.n	8002716 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026f4:	4b52      	ldr	r3, [pc, #328]	; (8002840 <HAL_ADC_Start+0x18c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_ADC_Start+0x190>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0c9a      	lsrs	r2, r3, #18
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002708:	e002      	b.n	8002710 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	3b01      	subs	r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f9      	bne.n	800270a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d17a      	bne.n	800281a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800274e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002762:	d106      	bne.n	8002772 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	f023 0206 	bic.w	r2, r3, #6
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	645a      	str	r2, [r3, #68]	; 0x44
 8002770:	e002      	b.n	8002778 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002780:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_ADC_Start+0x194>)
 8002782:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800278c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2b00      	cmp	r3, #0
 8002798:	d12a      	bne.n	80027f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2b      	ldr	r2, [pc, #172]	; (800284c <HAL_ADC_Start+0x198>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d015      	beq.n	80027d0 <HAL_ADC_Start+0x11c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a29      	ldr	r2, [pc, #164]	; (8002850 <HAL_ADC_Start+0x19c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d105      	bne.n	80027ba <HAL_ADC_Start+0x106>
 80027ae:	4b26      	ldr	r3, [pc, #152]	; (8002848 <HAL_ADC_Start+0x194>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a25      	ldr	r2, [pc, #148]	; (8002854 <HAL_ADC_Start+0x1a0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d136      	bne.n	8002832 <HAL_ADC_Start+0x17e>
 80027c4:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_ADC_Start+0x194>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d130      	bne.n	8002832 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d129      	bne.n	8002832 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	e020      	b.n	8002832 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a15      	ldr	r2, [pc, #84]	; (800284c <HAL_ADC_Start+0x198>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d11b      	bne.n	8002832 <HAL_ADC_Start+0x17e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d114      	bne.n	8002832 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	e00b      	b.n	8002832 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f043 0210 	orr.w	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	20000004 	.word	0x20000004
 8002844:	431bde83 	.word	0x431bde83
 8002848:	40012300 	.word	0x40012300
 800284c:	40012000 	.word	0x40012000
 8002850:	40012100 	.word	0x40012100
 8002854:	40012200 	.word	0x40012200

08002858 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_ADC_Stop+0x16>
 800286a:	2302      	movs	r3, #2
 800286c:	e021      	b.n	80028b2 <HAL_ADC_Stop+0x5a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	d113      	bne.n	8002904 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ea:	d10b      	bne.n	8002904 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e063      	b.n	80029cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002904:	f7ff fe86 	bl	8002614 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800290a:	e021      	b.n	8002950 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d01d      	beq.n	8002950 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <HAL_ADC_PollForConversion+0x6c>
 800291a:	f7ff fe7b 	bl	8002614 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d212      	bcs.n	8002950 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b02      	cmp	r3, #2
 8002936:	d00b      	beq.n	8002950 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f043 0204 	orr.w	r2, r3, #4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e03d      	b.n	80029cc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d1d6      	bne.n	800290c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f06f 0212 	mvn.w	r2, #18
 8002966:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d123      	bne.n	80029ca <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11f      	bne.n	80029ca <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d111      	bne.n	80029ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1c>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e113      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x244>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b09      	cmp	r3, #9
 8002a1a:	d925      	bls.n	8002a68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68d9      	ldr	r1, [r3, #12]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b1e      	subs	r3, #30
 8002a32:	2207      	movs	r2, #7
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	400a      	ands	r2, r1
 8002a40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68d9      	ldr	r1, [r3, #12]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	4603      	mov	r3, r0
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4403      	add	r3, r0
 8002a5a:	3b1e      	subs	r3, #30
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	e022      	b.n	8002aae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6919      	ldr	r1, [r3, #16]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	400a      	ands	r2, r1
 8002a8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6919      	ldr	r1, [r3, #16]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4403      	add	r3, r0
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d824      	bhi.n	8002b00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3b05      	subs	r3, #5
 8002ac8:	221f      	movs	r2, #31
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	3b05      	subs	r3, #5
 8002af2:	fa00 f203 	lsl.w	r2, r0, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34
 8002afe:	e04c      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d824      	bhi.n	8002b52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	3b23      	subs	r3, #35	; 0x23
 8002b1a:	221f      	movs	r2, #31
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43da      	mvns	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	400a      	ands	r2, r1
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	4618      	mov	r0, r3
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	3b23      	subs	r3, #35	; 0x23
 8002b44:	fa00 f203 	lsl.w	r2, r0, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b50:	e023      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	3b41      	subs	r3, #65	; 0x41
 8002b64:	221f      	movs	r2, #31
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	400a      	ands	r2, r1
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4618      	mov	r0, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3b41      	subs	r3, #65	; 0x41
 8002b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b9a:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_ADC_ConfigChannel+0x250>)
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <HAL_ADC_ConfigChannel+0x254>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d8>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b12      	cmp	r3, #18
 8002bae:	d10b      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_ADC_ConfigChannel+0x254>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d12b      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x23a>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <HAL_ADC_ConfigChannel+0x258>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d003      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x1f4>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b11      	cmp	r3, #17
 8002be2:	d122      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <HAL_ADC_ConfigChannel+0x258>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d111      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_ADC_ConfigChannel+0x25c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <HAL_ADC_ConfigChannel+0x260>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	0c9a      	lsrs	r2, r3, #18
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c1c:	e002      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f9      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40012300 	.word	0x40012300
 8002c44:	40012000 	.word	0x40012000
 8002c48:	10000012 	.word	0x10000012
 8002c4c:	20000004 	.word	0x20000004
 8002c50:	431bde83 	.word	0x431bde83

08002c54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c5c:	4b79      	ldr	r3, [pc, #484]	; (8002e44 <ADC_Init+0x1f0>)
 8002c5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	021a      	lsls	r2, r3, #8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6899      	ldr	r1, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <ADC_Init+0x1f4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d022      	beq.n	8002d32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cfa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6899      	ldr	r1, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6899      	ldr	r1, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	e00f      	b.n	8002d52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0202 	bic.w	r2, r2, #2
 8002d60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6899      	ldr	r1, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7e1b      	ldrb	r3, [r3, #24]
 8002d6c:	005a      	lsls	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01b      	beq.n	8002db8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	3b01      	subs	r3, #1
 8002dac:	035a      	lsls	r2, r3, #13
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	e007      	b.n	8002dc8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	051a      	lsls	r2, r3, #20
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e0a:	025a      	lsls	r2, r3, #9
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6899      	ldr	r1, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	029a      	lsls	r2, r3, #10
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40012300 	.word	0x40012300
 8002e48:	0f000001 	.word	0x0f000001

08002e4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0ed      	b.n	800303a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff f9fc 	bl	8002268 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e80:	f7ff fbc8 	bl	8002614 <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e86:	e012      	b.n	8002eae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e88:	f7ff fbc4 	bl	8002614 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b0a      	cmp	r3, #10
 8002e94:	d90b      	bls.n	8002eae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2205      	movs	r2, #5
 8002ea6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0c5      	b.n	800303a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0e5      	beq.n	8002e88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0202 	bic.w	r2, r2, #2
 8002eca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ecc:	f7ff fba2 	bl	8002614 <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ed2:	e012      	b.n	8002efa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ed4:	f7ff fb9e 	bl	8002614 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b0a      	cmp	r3, #10
 8002ee0:	d90b      	bls.n	8002efa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2205      	movs	r2, #5
 8002ef2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e09f      	b.n	800303a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e5      	bne.n	8002ed4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7e1b      	ldrb	r3, [r3, #24]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d108      	bne.n	8002f22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e007      	b.n	8002f32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7e5b      	ldrb	r3, [r3, #25]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d108      	bne.n	8002f4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e007      	b.n	8002f5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7e9b      	ldrb	r3, [r3, #26]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d108      	bne.n	8002f76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0220 	orr.w	r2, r2, #32
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e007      	b.n	8002f86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0220 	bic.w	r2, r2, #32
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7edb      	ldrb	r3, [r3, #27]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d108      	bne.n	8002fa0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0210 	bic.w	r2, r2, #16
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e007      	b.n	8002fb0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0210 	orr.w	r2, r2, #16
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7f1b      	ldrb	r3, [r3, #28]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d108      	bne.n	8002fca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0208 	orr.w	r2, r2, #8
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e007      	b.n	8002fda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0208 	bic.w	r2, r2, #8
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7f5b      	ldrb	r3, [r3, #29]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0204 	orr.w	r2, r2, #4
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e007      	b.n	8003004 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0204 	bic.w	r2, r2, #4
 8003002:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	ea42 0103 	orr.w	r1, r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	1e5a      	subs	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800305a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d003      	beq.n	800306a <HAL_CAN_ConfigFilter+0x26>
 8003062:	7cfb      	ldrb	r3, [r7, #19]
 8003064:	2b02      	cmp	r3, #2
 8003066:	f040 80be 	bne.w	80031e6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800306a:	4b65      	ldr	r3, [pc, #404]	; (8003200 <HAL_CAN_ConfigFilter+0x1bc>)
 800306c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003084:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	431a      	orrs	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2201      	movs	r2, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	401a      	ands	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d123      	bne.n	8003114 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	401a      	ands	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3248      	adds	r2, #72	; 0x48
 80030f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003108:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800310a:	6979      	ldr	r1, [r7, #20]
 800310c:	3348      	adds	r3, #72	; 0x48
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d122      	bne.n	8003162 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	431a      	orrs	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800313c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3248      	adds	r2, #72	; 0x48
 8003142:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003156:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003158:	6979      	ldr	r1, [r7, #20]
 800315a:	3348      	adds	r3, #72	; 0x48
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	43db      	mvns	r3, r3
 8003174:	401a      	ands	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800317c:	e007      	b.n	800318e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	431a      	orrs	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	43db      	mvns	r3, r3
 80031a0:	401a      	ands	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80031a8:	e007      	b.n	80031ba <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031d8:	f023 0201 	bic.w	r2, r3, #1
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e006      	b.n	80031f4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40006400 	.word	0x40006400

08003204 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d12e      	bne.n	8003276 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003230:	f7ff f9f0 	bl	8002614 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003236:	e012      	b.n	800325e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003238:	f7ff f9ec 	bl	8002614 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b0a      	cmp	r3, #10
 8003244:	d90b      	bls.n	800325e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2205      	movs	r2, #5
 8003256:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e012      	b.n	8003284 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e5      	bne.n	8003238 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e006      	b.n	8003284 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d003      	beq.n	80032b8 <HAL_CAN_AddTxMessage+0x2c>
 80032b0:	7ffb      	ldrb	r3, [r7, #31]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	f040 80b8 	bne.w	8003428 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80a0 	beq.w	8003418 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	0e1b      	lsrs	r3, r3, #24
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d907      	bls.n	80032f8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e09e      	b.n	8003436 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80032f8:	2201      	movs	r2, #1
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	409a      	lsls	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10d      	bne.n	8003326 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003314:	68f9      	ldr	r1, [r7, #12]
 8003316:	6809      	ldr	r1, [r1, #0]
 8003318:	431a      	orrs	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3318      	adds	r3, #24
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	440b      	add	r3, r1
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e00f      	b.n	8003346 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003330:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800333a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	3318      	adds	r3, #24
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	440b      	add	r3, r1
 8003344:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3318      	adds	r3, #24
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	440b      	add	r3, r1
 8003356:	3304      	adds	r3, #4
 8003358:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	7d1b      	ldrb	r3, [r3, #20]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d111      	bne.n	8003386 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3318      	adds	r3, #24
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	4413      	add	r3, r2
 800336e:	3304      	adds	r3, #4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	6811      	ldr	r1, [r2, #0]
 8003376:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3318      	adds	r3, #24
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	440b      	add	r3, r1
 8003382:	3304      	adds	r3, #4
 8003384:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3307      	adds	r3, #7
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	061a      	lsls	r2, r3, #24
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3306      	adds	r3, #6
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	041b      	lsls	r3, r3, #16
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3305      	adds	r3, #5
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	4313      	orrs	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	3204      	adds	r2, #4
 80033a6:	7812      	ldrb	r2, [r2, #0]
 80033a8:	4610      	mov	r0, r2
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	6811      	ldr	r1, [r2, #0]
 80033ae:	ea43 0200 	orr.w	r2, r3, r0
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	440b      	add	r3, r1
 80033b8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80033bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3303      	adds	r3, #3
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	061a      	lsls	r2, r3, #24
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3302      	adds	r3, #2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3301      	adds	r3, #1
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	4313      	orrs	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	7812      	ldrb	r2, [r2, #0]
 80033de:	4610      	mov	r0, r2
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	6811      	ldr	r1, [r2, #0]
 80033e4:	ea43 0200 	orr.w	r2, r3, r0
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	440b      	add	r3, r1
 80033ee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80033f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	3318      	adds	r3, #24
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4413      	add	r3, r2
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	6811      	ldr	r1, [r2, #0]
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3318      	adds	r3, #24
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	440b      	add	r3, r1
 8003412:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e00e      	b.n	8003436 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e006      	b.n	8003436 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	; 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003456:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003458:	7afb      	ldrb	r3, [r7, #11]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d002      	beq.n	8003464 <HAL_CAN_IsTxMessagePending+0x22>
 800345e:	7afb      	ldrb	r3, [r7, #11]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d10b      	bne.n	800347c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	069b      	lsls	r3, r3, #26
 800346e:	401a      	ands	r2, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	069b      	lsls	r3, r3, #26
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003478:	2301      	movs	r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800347c:	68fb      	ldr	r3, [r7, #12]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800348a:	b480      	push	{r7}
 800348c:	b087      	sub	sp, #28
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800349e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d003      	beq.n	80034ae <HAL_CAN_GetRxMessage+0x24>
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	f040 80f3 	bne.w	8003694 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10e      	bne.n	80034d2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0e7      	b.n	80036a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d107      	bne.n	80034f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0d8      	b.n	80036a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	331b      	adds	r3, #27
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	4413      	add	r3, r2
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0204 	and.w	r2, r3, #4
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10c      	bne.n	8003528 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	331b      	adds	r3, #27
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	4413      	add	r3, r2
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0d5b      	lsrs	r3, r3, #21
 800351e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e00b      	b.n	8003540 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	331b      	adds	r3, #27
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	4413      	add	r3, r2
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	08db      	lsrs	r3, r3, #3
 8003538:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	331b      	adds	r3, #27
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	4413      	add	r3, r2
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0202 	and.w	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	331b      	adds	r3, #27
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	4413      	add	r3, r2
 8003562:	3304      	adds	r3, #4
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 020f 	and.w	r2, r3, #15
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	331b      	adds	r3, #27
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	4413      	add	r3, r2
 800357a:	3304      	adds	r3, #4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	b2da      	uxtb	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	331b      	adds	r3, #27
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	4413      	add	r3, r2
 8003592:	3304      	adds	r3, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	0c1b      	lsrs	r3, r3, #16
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	4413      	add	r3, r2
 80035be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	0a1a      	lsrs	r2, r3, #8
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	0c1a      	lsrs	r2, r3, #16
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	3302      	adds	r3, #2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0e1a      	lsrs	r2, r3, #24
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	3303      	adds	r3, #3
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	3304      	adds	r3, #4
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0a1a      	lsrs	r2, r3, #8
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	3305      	adds	r3, #5
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4413      	add	r3, r2
 800363e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0c1a      	lsrs	r2, r3, #16
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	3306      	adds	r3, #6
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	4413      	add	r3, r2
 8003658:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e1a      	lsrs	r2, r3, #24
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	3307      	adds	r3, #7
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d108      	bne.n	8003680 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0220 	orr.w	r2, r2, #32
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	e007      	b.n	8003690 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0220 	orr.w	r2, r2, #32
 800368e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e006      	b.n	80036a2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036cc:	4013      	ands	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e2:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	60d3      	str	r3, [r2, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <__NVIC_GetPriorityGrouping+0x18>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 0307 	and.w	r3, r3, #7
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	db0b      	blt.n	800373e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4907      	ldr	r1, [pc, #28]	; (800374c <__NVIC_EnableIRQ+0x38>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2001      	movs	r0, #1
 8003736:	fa00 f202 	lsl.w	r2, r0, r2
 800373a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000e100 	.word	0xe000e100

08003750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	2b00      	cmp	r3, #0
 8003762:	db0a      	blt.n	800377a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	490c      	ldr	r1, [pc, #48]	; (800379c <__NVIC_SetPriority+0x4c>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	0112      	lsls	r2, r2, #4
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	440b      	add	r3, r1
 8003774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003778:	e00a      	b.n	8003790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4908      	ldr	r1, [pc, #32]	; (80037a0 <__NVIC_SetPriority+0x50>)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	3b04      	subs	r3, #4
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	440b      	add	r3, r1
 800378e:	761a      	strb	r2, [r3, #24]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f1c3 0307 	rsb	r3, r3, #7
 80037be:	2b04      	cmp	r3, #4
 80037c0:	bf28      	it	cs
 80037c2:	2304      	movcs	r3, #4
 80037c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d902      	bls.n	80037d4 <NVIC_EncodePriority+0x30>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3b03      	subs	r3, #3
 80037d2:	e000      	b.n	80037d6 <NVIC_EncodePriority+0x32>
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	f04f 32ff 	mov.w	r2, #4294967295
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	401a      	ands	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ec:	f04f 31ff 	mov.w	r1, #4294967295
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	43d9      	mvns	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	4313      	orrs	r3, r2
         );
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3724      	adds	r7, #36	; 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ff4c 	bl	80036b0 <__NVIC_SetPriorityGrouping>
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003832:	f7ff ff61 	bl	80036f8 <__NVIC_GetPriorityGrouping>
 8003836:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	6978      	ldr	r0, [r7, #20]
 800383e:	f7ff ffb1 	bl	80037a4 <NVIC_EncodePriority>
 8003842:	4602      	mov	r2, r0
 8003844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff ff80 	bl	8003750 <__NVIC_SetPriority>
}
 8003850:	bf00      	nop
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff54 	bl	8003714 <__NVIC_EnableIRQ>
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e165      	b.n	8003b5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	f040 8154 	bne.w	8003b56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d005      	beq.n	80038c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d130      	bne.n	8003928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	2203      	movs	r2, #3
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038fc:	2201      	movs	r2, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 0201 	and.w	r2, r3, #1
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b03      	cmp	r3, #3
 8003932:	d017      	beq.n	8003964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d123      	bne.n	80039b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	08da      	lsrs	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3208      	adds	r2, #8
 8003978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	220f      	movs	r2, #15
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	08da      	lsrs	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3208      	adds	r2, #8
 80039b2:	69b9      	ldr	r1, [r7, #24]
 80039b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0203 	and.w	r2, r3, #3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80ae 	beq.w	8003b56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	4b5d      	ldr	r3, [pc, #372]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	4a5c      	ldr	r2, [pc, #368]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a08:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0a:	4b5a      	ldr	r3, [pc, #360]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a16:	4a58      	ldr	r2, [pc, #352]	; (8003b78 <HAL_GPIO_Init+0x304>)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a4f      	ldr	r2, [pc, #316]	; (8003b7c <HAL_GPIO_Init+0x308>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d025      	beq.n	8003a8e <HAL_GPIO_Init+0x21a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4e      	ldr	r2, [pc, #312]	; (8003b80 <HAL_GPIO_Init+0x30c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01f      	beq.n	8003a8a <HAL_GPIO_Init+0x216>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4d      	ldr	r2, [pc, #308]	; (8003b84 <HAL_GPIO_Init+0x310>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d019      	beq.n	8003a86 <HAL_GPIO_Init+0x212>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4c      	ldr	r2, [pc, #304]	; (8003b88 <HAL_GPIO_Init+0x314>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_GPIO_Init+0x20e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4b      	ldr	r2, [pc, #300]	; (8003b8c <HAL_GPIO_Init+0x318>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00d      	beq.n	8003a7e <HAL_GPIO_Init+0x20a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a4a      	ldr	r2, [pc, #296]	; (8003b90 <HAL_GPIO_Init+0x31c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a49      	ldr	r2, [pc, #292]	; (8003b94 <HAL_GPIO_Init+0x320>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_GPIO_Init+0x202>
 8003a72:	2306      	movs	r3, #6
 8003a74:	e00c      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a76:	2307      	movs	r3, #7
 8003a78:	e00a      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a7a:	2305      	movs	r3, #5
 8003a7c:	e008      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a7e:	2304      	movs	r3, #4
 8003a80:	e006      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a82:	2303      	movs	r3, #3
 8003a84:	e004      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e002      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	f002 0203 	and.w	r2, r2, #3
 8003a96:	0092      	lsls	r2, r2, #2
 8003a98:	4093      	lsls	r3, r2
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa0:	4935      	ldr	r1, [pc, #212]	; (8003b78 <HAL_GPIO_Init+0x304>)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aae:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ad2:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad8:	4b2f      	ldr	r3, [pc, #188]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003afc:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b02:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b26:	4a1c      	ldr	r2, [pc, #112]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b50:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b0f      	cmp	r3, #15
 8003b60:	f67f ae96 	bls.w	8003890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3724      	adds	r7, #36	; 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40013800 	.word	0x40013800
 8003b7c:	40020000 	.word	0x40020000
 8003b80:	40020400 	.word	0x40020400
 8003b84:	40020800 	.word	0x40020800
 8003b88:	40020c00 	.word	0x40020c00
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40021400 	.word	0x40021400
 8003b94:	40021800 	.word	0x40021800
 8003b98:	40013c00 	.word	0x40013c00

08003b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
 8003bb8:	e001      	b.n	8003bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bdc:	787b      	ldrb	r3, [r7, #1]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003be8:	e003      	b.n	8003bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	041a      	lsls	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	619a      	str	r2, [r3, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0cc      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c14:	4b68      	ldr	r3, [pc, #416]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d90c      	bls.n	8003c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b63      	ldr	r3, [pc, #396]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0b8      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c54:	4b59      	ldr	r3, [pc, #356]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4a58      	ldr	r2, [pc, #352]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c6c:	4b53      	ldr	r3, [pc, #332]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4a52      	ldr	r2, [pc, #328]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c78:	4b50      	ldr	r3, [pc, #320]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	494d      	ldr	r1, [pc, #308]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d044      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d107      	bne.n	8003cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	4b47      	ldr	r3, [pc, #284]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d119      	bne.n	8003cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e07f      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d107      	bne.n	8003cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbe:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e06f      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cce:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e067      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cde:	4b37      	ldr	r3, [pc, #220]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f023 0203 	bic.w	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4934      	ldr	r1, [pc, #208]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf0:	f7fe fc90 	bl	8002614 <HAL_GetTick>
 8003cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf8:	f7fe fc8c 	bl	8002614 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e04f      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0e:	4b2b      	ldr	r3, [pc, #172]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 020c 	and.w	r2, r3, #12
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d1eb      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d20c      	bcs.n	8003d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2e:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e032      	b.n	8003dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d54:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4916      	ldr	r1, [pc, #88]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	490e      	ldr	r1, [pc, #56]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d86:	f000 f873 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	490a      	ldr	r1, [pc, #40]	; (8003dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d98:	5ccb      	ldrb	r3, [r1, r3]
 8003d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9e:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe fb1c 	bl	80023e4 <HAL_InitTick>

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023c00 	.word	0x40023c00
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	0800754c 	.word	0x0800754c
 8003dc4:	20000004 	.word	0x20000004
 8003dc8:	20000008 	.word	0x20000008

08003dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000004 	.word	0x20000004

08003de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003de8:	f7ff fff0 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0a9b      	lsrs	r3, r3, #10
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	4903      	ldr	r1, [pc, #12]	; (8003e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40023800 	.word	0x40023800
 8003e08:	0800755c 	.word	0x0800755c

08003e0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	220f      	movs	r2, #15
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0203 	and.w	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e4e:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <HAL_RCC_GetClockConfig+0x60>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 020f 	and.w	r2, r3, #15
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40023c00 	.word	0x40023c00

08003e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e74:	b0ae      	sub	sp, #184	; 0xb8
 8003e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e96:	4bcb      	ldr	r3, [pc, #812]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	f200 8206 	bhi.w	80042b0 <HAL_RCC_GetSysClockFreq+0x440>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ee1 	.word	0x08003ee1
 8003eb0:	080042b1 	.word	0x080042b1
 8003eb4:	080042b1 	.word	0x080042b1
 8003eb8:	080042b1 	.word	0x080042b1
 8003ebc:	08003ee9 	.word	0x08003ee9
 8003ec0:	080042b1 	.word	0x080042b1
 8003ec4:	080042b1 	.word	0x080042b1
 8003ec8:	080042b1 	.word	0x080042b1
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	080042b1 	.word	0x080042b1
 8003ed4:	080042b1 	.word	0x080042b1
 8003ed8:	080042b1 	.word	0x080042b1
 8003edc:	080040e1 	.word	0x080040e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4bb9      	ldr	r3, [pc, #740]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003ee6:	e1e7      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ee8:	4bb8      	ldr	r3, [pc, #736]	; (80041cc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003eee:	e1e3      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef0:	4bb4      	ldr	r3, [pc, #720]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efc:	4bb1      	ldr	r3, [pc, #708]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d071      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f08:	4bae      	ldr	r3, [pc, #696]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f2e:	4622      	mov	r2, r4
 8003f30:	462b      	mov	r3, r5
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	0159      	lsls	r1, r3, #5
 8003f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f40:	0150      	lsls	r0, r2, #5
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4621      	mov	r1, r4
 8003f48:	1a51      	subs	r1, r2, r1
 8003f4a:	6439      	str	r1, [r7, #64]	; 0x40
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f52:	647b      	str	r3, [r7, #68]	; 0x44
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003f60:	4649      	mov	r1, r9
 8003f62:	018b      	lsls	r3, r1, #6
 8003f64:	4641      	mov	r1, r8
 8003f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f6a:	4641      	mov	r1, r8
 8003f6c:	018a      	lsls	r2, r1, #6
 8003f6e:	4641      	mov	r1, r8
 8003f70:	1a51      	subs	r1, r2, r1
 8003f72:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f74:	4649      	mov	r1, r9
 8003f76:	eb63 0301 	sbc.w	r3, r3, r1
 8003f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003f88:	4649      	mov	r1, r9
 8003f8a:	00cb      	lsls	r3, r1, #3
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f92:	4641      	mov	r1, r8
 8003f94:	00ca      	lsls	r2, r1, #3
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4622      	mov	r2, r4
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	460a      	mov	r2, r1
 8003fa6:	eb42 0303 	adc.w	r3, r2, r3
 8003faa:	637b      	str	r3, [r7, #52]	; 0x34
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fb8:	4629      	mov	r1, r5
 8003fba:	024b      	lsls	r3, r1, #9
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	024a      	lsls	r2, r1, #9
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fd8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003fdc:	f7fc fd36 	bl	8000a4c <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fea:	e067      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fec:	4b75      	ldr	r3, [pc, #468]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	099b      	lsrs	r3, r3, #6
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ff8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004004:	67bb      	str	r3, [r7, #120]	; 0x78
 8004006:	2300      	movs	r3, #0
 8004008:	67fb      	str	r3, [r7, #124]	; 0x7c
 800400a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800400e:	4622      	mov	r2, r4
 8004010:	462b      	mov	r3, r5
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	0159      	lsls	r1, r3, #5
 800401c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004020:	0150      	lsls	r0, r2, #5
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4621      	mov	r1, r4
 8004028:	1a51      	subs	r1, r2, r1
 800402a:	62b9      	str	r1, [r7, #40]	; 0x28
 800402c:	4629      	mov	r1, r5
 800402e:	eb63 0301 	sbc.w	r3, r3, r1
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004040:	4649      	mov	r1, r9
 8004042:	018b      	lsls	r3, r1, #6
 8004044:	4641      	mov	r1, r8
 8004046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800404a:	4641      	mov	r1, r8
 800404c:	018a      	lsls	r2, r1, #6
 800404e:	4641      	mov	r1, r8
 8004050:	ebb2 0a01 	subs.w	sl, r2, r1
 8004054:	4649      	mov	r1, r9
 8004056:	eb63 0b01 	sbc.w	fp, r3, r1
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004066:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800406a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800406e:	4692      	mov	sl, r2
 8004070:	469b      	mov	fp, r3
 8004072:	4623      	mov	r3, r4
 8004074:	eb1a 0303 	adds.w	r3, sl, r3
 8004078:	623b      	str	r3, [r7, #32]
 800407a:	462b      	mov	r3, r5
 800407c:	eb4b 0303 	adc.w	r3, fp, r3
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800408e:	4629      	mov	r1, r5
 8004090:	028b      	lsls	r3, r1, #10
 8004092:	4621      	mov	r1, r4
 8004094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004098:	4621      	mov	r1, r4
 800409a:	028a      	lsls	r2, r1, #10
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040a4:	2200      	movs	r2, #0
 80040a6:	673b      	str	r3, [r7, #112]	; 0x70
 80040a8:	677a      	str	r2, [r7, #116]	; 0x74
 80040aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80040ae:	f7fc fccd 	bl	8000a4c <__aeabi_uldivmod>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4613      	mov	r3, r2
 80040b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040bc:	4b41      	ldr	r3, [pc, #260]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	3301      	adds	r3, #1
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80040ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040de:	e0eb      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e0:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ec:	4b35      	ldr	r3, [pc, #212]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d06b      	beq.n	80041d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f8:	4b32      	ldr	r3, [pc, #200]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	099b      	lsrs	r3, r3, #6
 80040fe:	2200      	movs	r2, #0
 8004100:	66bb      	str	r3, [r7, #104]	; 0x68
 8004102:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410a:	663b      	str	r3, [r7, #96]	; 0x60
 800410c:	2300      	movs	r3, #0
 800410e:	667b      	str	r3, [r7, #100]	; 0x64
 8004110:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004114:	4622      	mov	r2, r4
 8004116:	462b      	mov	r3, r5
 8004118:	f04f 0000 	mov.w	r0, #0
 800411c:	f04f 0100 	mov.w	r1, #0
 8004120:	0159      	lsls	r1, r3, #5
 8004122:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004126:	0150      	lsls	r0, r2, #5
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4621      	mov	r1, r4
 800412e:	1a51      	subs	r1, r2, r1
 8004130:	61b9      	str	r1, [r7, #24]
 8004132:	4629      	mov	r1, r5
 8004134:	eb63 0301 	sbc.w	r3, r3, r1
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004146:	4659      	mov	r1, fp
 8004148:	018b      	lsls	r3, r1, #6
 800414a:	4651      	mov	r1, sl
 800414c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004150:	4651      	mov	r1, sl
 8004152:	018a      	lsls	r2, r1, #6
 8004154:	4651      	mov	r1, sl
 8004156:	ebb2 0801 	subs.w	r8, r2, r1
 800415a:	4659      	mov	r1, fp
 800415c:	eb63 0901 	sbc.w	r9, r3, r1
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800416c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004170:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004174:	4690      	mov	r8, r2
 8004176:	4699      	mov	r9, r3
 8004178:	4623      	mov	r3, r4
 800417a:	eb18 0303 	adds.w	r3, r8, r3
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	462b      	mov	r3, r5
 8004182:	eb49 0303 	adc.w	r3, r9, r3
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004194:	4629      	mov	r1, r5
 8004196:	024b      	lsls	r3, r1, #9
 8004198:	4621      	mov	r1, r4
 800419a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800419e:	4621      	mov	r1, r4
 80041a0:	024a      	lsls	r2, r1, #9
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041aa:	2200      	movs	r2, #0
 80041ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041b4:	f7fc fc4a 	bl	8000a4c <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4613      	mov	r3, r2
 80041be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041c2:	e065      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x420>
 80041c4:	40023800 	.word	0x40023800
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d0:	4b3d      	ldr	r3, [pc, #244]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	099b      	lsrs	r3, r3, #6
 80041d6:	2200      	movs	r2, #0
 80041d8:	4618      	mov	r0, r3
 80041da:	4611      	mov	r1, r2
 80041dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041e0:	653b      	str	r3, [r7, #80]	; 0x50
 80041e2:	2300      	movs	r3, #0
 80041e4:	657b      	str	r3, [r7, #84]	; 0x54
 80041e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80041ea:	4642      	mov	r2, r8
 80041ec:	464b      	mov	r3, r9
 80041ee:	f04f 0000 	mov.w	r0, #0
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	0159      	lsls	r1, r3, #5
 80041f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041fc:	0150      	lsls	r0, r2, #5
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4641      	mov	r1, r8
 8004204:	1a51      	subs	r1, r2, r1
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	4649      	mov	r1, r9
 800420a:	eb63 0301 	sbc.w	r3, r3, r1
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800421c:	4659      	mov	r1, fp
 800421e:	018b      	lsls	r3, r1, #6
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004226:	4651      	mov	r1, sl
 8004228:	018a      	lsls	r2, r1, #6
 800422a:	4651      	mov	r1, sl
 800422c:	1a54      	subs	r4, r2, r1
 800422e:	4659      	mov	r1, fp
 8004230:	eb63 0501 	sbc.w	r5, r3, r1
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	00eb      	lsls	r3, r5, #3
 800423e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004242:	00e2      	lsls	r2, r4, #3
 8004244:	4614      	mov	r4, r2
 8004246:	461d      	mov	r5, r3
 8004248:	4643      	mov	r3, r8
 800424a:	18e3      	adds	r3, r4, r3
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	464b      	mov	r3, r9
 8004250:	eb45 0303 	adc.w	r3, r5, r3
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004262:	4629      	mov	r1, r5
 8004264:	028b      	lsls	r3, r1, #10
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800426c:	4621      	mov	r1, r4
 800426e:	028a      	lsls	r2, r1, #10
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004278:	2200      	movs	r2, #0
 800427a:	64bb      	str	r3, [r7, #72]	; 0x48
 800427c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800427e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004282:	f7fc fbe3 	bl	8000a4c <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4613      	mov	r3, r2
 800428c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004290:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	0f1b      	lsrs	r3, r3, #28
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800429e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042ae:	e003      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80042b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	37b8      	adds	r7, #184	; 0xb8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	00f42400 	.word	0x00f42400

080042d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e28d      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8083 	beq.w	80043f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042f0:	4b94      	ldr	r3, [pc, #592]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d019      	beq.n	8004330 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042fc:	4b91      	ldr	r3, [pc, #580]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004304:	2b08      	cmp	r3, #8
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004308:	4b8e      	ldr	r3, [pc, #568]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004314:	d00c      	beq.n	8004330 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004316:	4b8b      	ldr	r3, [pc, #556]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d112      	bne.n	8004348 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004322:	4b88      	ldr	r3, [pc, #544]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800432e:	d10b      	bne.n	8004348 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	4b84      	ldr	r3, [pc, #528]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d05b      	beq.n	80043f4 <HAL_RCC_OscConfig+0x124>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d157      	bne.n	80043f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e25a      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004350:	d106      	bne.n	8004360 <HAL_RCC_OscConfig+0x90>
 8004352:	4b7c      	ldr	r3, [pc, #496]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a7b      	ldr	r2, [pc, #492]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	e01d      	b.n	800439c <HAL_RCC_OscConfig+0xcc>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004368:	d10c      	bne.n	8004384 <HAL_RCC_OscConfig+0xb4>
 800436a:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a75      	ldr	r2, [pc, #468]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	4b73      	ldr	r3, [pc, #460]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a72      	ldr	r2, [pc, #456]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 800437c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e00b      	b.n	800439c <HAL_RCC_OscConfig+0xcc>
 8004384:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a6e      	ldr	r2, [pc, #440]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 800438a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a6b      	ldr	r2, [pc, #428]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800439a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d013      	beq.n	80043cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fe f936 	bl	8002614 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ac:	f7fe f932 	bl	8002614 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e21f      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	4b61      	ldr	r3, [pc, #388]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0xdc>
 80043ca:	e014      	b.n	80043f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fe f922 	bl	8002614 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fe f91e 	bl	8002614 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e20b      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e6:	4b57      	ldr	r3, [pc, #348]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x104>
 80043f2:	e000      	b.n	80043f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d06f      	beq.n	80044e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004402:	4b50      	ldr	r3, [pc, #320]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b00      	cmp	r3, #0
 800440c:	d017      	beq.n	800443e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800440e:	4b4d      	ldr	r3, [pc, #308]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004416:	2b08      	cmp	r3, #8
 8004418:	d105      	bne.n	8004426 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800441a:	4b4a      	ldr	r3, [pc, #296]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004426:	4b47      	ldr	r3, [pc, #284]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800442e:	2b0c      	cmp	r3, #12
 8004430:	d11c      	bne.n	800446c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004432:	4b44      	ldr	r3, [pc, #272]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d116      	bne.n	800446c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	4b41      	ldr	r3, [pc, #260]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_RCC_OscConfig+0x186>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d001      	beq.n	8004456 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e1d3      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004456:	4b3b      	ldr	r3, [pc, #236]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4937      	ldr	r1, [pc, #220]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004466:	4313      	orrs	r3, r2
 8004468:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446a:	e03a      	b.n	80044e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d020      	beq.n	80044b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004474:	4b34      	ldr	r3, [pc, #208]	; (8004548 <HAL_RCC_OscConfig+0x278>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fe f8cb 	bl	8002614 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004482:	f7fe f8c7 	bl	8002614 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e1b4      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004494:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a0:	4b28      	ldr	r3, [pc, #160]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4925      	ldr	r1, [pc, #148]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]
 80044b4:	e015      	b.n	80044e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <HAL_RCC_OscConfig+0x278>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fe f8aa 	bl	8002614 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c4:	f7fe f8a6 	bl	8002614 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e193      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d6:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d036      	beq.n	800455c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d016      	beq.n	8004524 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f6:	4b15      	ldr	r3, [pc, #84]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fc:	f7fe f88a 	bl	8002614 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004504:	f7fe f886 	bl	8002614 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e173      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_RCC_OscConfig+0x274>)
 8004518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0x234>
 8004522:	e01b      	b.n	800455c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fe f873 	bl	8002614 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004530:	e00e      	b.n	8004550 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004532:	f7fe f86f 	bl	8002614 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d907      	bls.n	8004550 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e15c      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
 8004544:	40023800 	.word	0x40023800
 8004548:	42470000 	.word	0x42470000
 800454c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004550:	4b8a      	ldr	r3, [pc, #552]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ea      	bne.n	8004532 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8097 	beq.w	8004698 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800456e:	4b83      	ldr	r3, [pc, #524]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10f      	bne.n	800459a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	4b7f      	ldr	r3, [pc, #508]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	4a7e      	ldr	r2, [pc, #504]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004588:	6413      	str	r3, [r2, #64]	; 0x40
 800458a:	4b7c      	ldr	r3, [pc, #496]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004596:	2301      	movs	r3, #1
 8004598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459a:	4b79      	ldr	r3, [pc, #484]	; (8004780 <HAL_RCC_OscConfig+0x4b0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d118      	bne.n	80045d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a6:	4b76      	ldr	r3, [pc, #472]	; (8004780 <HAL_RCC_OscConfig+0x4b0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a75      	ldr	r2, [pc, #468]	; (8004780 <HAL_RCC_OscConfig+0x4b0>)
 80045ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b2:	f7fe f82f 	bl	8002614 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ba:	f7fe f82b 	bl	8002614 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e118      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045cc:	4b6c      	ldr	r3, [pc, #432]	; (8004780 <HAL_RCC_OscConfig+0x4b0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d106      	bne.n	80045ee <HAL_RCC_OscConfig+0x31e>
 80045e0:	4b66      	ldr	r3, [pc, #408]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	4a65      	ldr	r2, [pc, #404]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6713      	str	r3, [r2, #112]	; 0x70
 80045ec:	e01c      	b.n	8004628 <HAL_RCC_OscConfig+0x358>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d10c      	bne.n	8004610 <HAL_RCC_OscConfig+0x340>
 80045f6:	4b61      	ldr	r3, [pc, #388]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a60      	ldr	r2, [pc, #384]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 80045fc:	f043 0304 	orr.w	r3, r3, #4
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
 8004602:	4b5e      	ldr	r3, [pc, #376]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	4a5d      	ldr	r2, [pc, #372]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6713      	str	r3, [r2, #112]	; 0x70
 800460e:	e00b      	b.n	8004628 <HAL_RCC_OscConfig+0x358>
 8004610:	4b5a      	ldr	r3, [pc, #360]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	4a59      	ldr	r2, [pc, #356]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	6713      	str	r3, [r2, #112]	; 0x70
 800461c:	4b57      	ldr	r3, [pc, #348]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	4a56      	ldr	r2, [pc, #344]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004622:	f023 0304 	bic.w	r3, r3, #4
 8004626:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d015      	beq.n	800465c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fd fff0 	bl	8002614 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004636:	e00a      	b.n	800464e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004638:	f7fd ffec 	bl	8002614 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e0d7      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464e:	4b4b      	ldr	r3, [pc, #300]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ee      	beq.n	8004638 <HAL_RCC_OscConfig+0x368>
 800465a:	e014      	b.n	8004686 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fd ffda 	bl	8002614 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004662:	e00a      	b.n	800467a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f7fd ffd6 	bl	8002614 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e0c1      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467a:	4b40      	ldr	r3, [pc, #256]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1ee      	bne.n	8004664 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468c:	4b3b      	ldr	r3, [pc, #236]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	4a3a      	ldr	r2, [pc, #232]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004696:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80ad 	beq.w	80047fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046a2:	4b36      	ldr	r3, [pc, #216]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d060      	beq.n	8004770 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d145      	bne.n	8004742 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b6:	4b33      	ldr	r3, [pc, #204]	; (8004784 <HAL_RCC_OscConfig+0x4b4>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd ffaa 	bl	8002614 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fd ffa6 	bl	8002614 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e093      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d6:	4b29      	ldr	r3, [pc, #164]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69da      	ldr	r2, [r3, #28]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	019b      	lsls	r3, r3, #6
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	3b01      	subs	r3, #1
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	061b      	lsls	r3, r3, #24
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	071b      	lsls	r3, r3, #28
 800470e:	491b      	ldr	r1, [pc, #108]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004714:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <HAL_RCC_OscConfig+0x4b4>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fd ff7b 	bl	8002614 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004722:	f7fd ff77 	bl	8002614 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e064      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x452>
 8004740:	e05c      	b.n	80047fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004742:	4b10      	ldr	r3, [pc, #64]	; (8004784 <HAL_RCC_OscConfig+0x4b4>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fd ff64 	bl	8002614 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004750:	f7fd ff60 	bl	8002614 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e04d      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_RCC_OscConfig+0x4ac>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x480>
 800476e:	e045      	b.n	80047fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d107      	bne.n	8004788 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e040      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
 800477c:	40023800 	.word	0x40023800
 8004780:	40007000 	.word	0x40007000
 8004784:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004788:	4b1f      	ldr	r3, [pc, #124]	; (8004808 <HAL_RCC_OscConfig+0x538>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d030      	beq.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d129      	bne.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d122      	bne.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047b8:	4013      	ands	r3, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d119      	bne.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	3b01      	subs	r3, #1
 80047d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d10f      	bne.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d107      	bne.n	80047f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800

0800480c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e041      	b.n	80048a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fd fd60 	bl	80022f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f000 fefa 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d001      	beq.n	80048c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e04e      	b.n	8004962 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a23      	ldr	r2, [pc, #140]	; (8004970 <HAL_TIM_Base_Start_IT+0xc4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d022      	beq.n	800492c <HAL_TIM_Base_Start_IT+0x80>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ee:	d01d      	beq.n	800492c <HAL_TIM_Base_Start_IT+0x80>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <HAL_TIM_Base_Start_IT+0xc8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d018      	beq.n	800492c <HAL_TIM_Base_Start_IT+0x80>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1e      	ldr	r2, [pc, #120]	; (8004978 <HAL_TIM_Base_Start_IT+0xcc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_TIM_Base_Start_IT+0x80>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1c      	ldr	r2, [pc, #112]	; (800497c <HAL_TIM_Base_Start_IT+0xd0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <HAL_TIM_Base_Start_IT+0x80>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1b      	ldr	r2, [pc, #108]	; (8004980 <HAL_TIM_Base_Start_IT+0xd4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_TIM_Base_Start_IT+0x80>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a19      	ldr	r2, [pc, #100]	; (8004984 <HAL_TIM_Base_Start_IT+0xd8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIM_Base_Start_IT+0x80>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a18      	ldr	r2, [pc, #96]	; (8004988 <HAL_TIM_Base_Start_IT+0xdc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d111      	bne.n	8004950 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b06      	cmp	r3, #6
 800493c:	d010      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494e:	e007      	b.n	8004960 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40010000 	.word	0x40010000
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800
 800497c:	40000c00 	.word	0x40000c00
 8004980:	40010400 	.word	0x40010400
 8004984:	40014000 	.word	0x40014000
 8004988:	40001800 	.word	0x40001800

0800498c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e041      	b.n	8004a22 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f839 	bl	8004a2a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f000 fe3a 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <HAL_TIM_OC_Start_IT+0x28>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e022      	b.n	8004aae <HAL_TIM_OC_Start_IT+0x6e>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d109      	bne.n	8004a82 <HAL_TIM_OC_Start_IT+0x42>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	bf14      	ite	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	2300      	moveq	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	e015      	b.n	8004aae <HAL_TIM_OC_Start_IT+0x6e>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d109      	bne.n	8004a9c <HAL_TIM_OC_Start_IT+0x5c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e008      	b.n	8004aae <HAL_TIM_OC_Start_IT+0x6e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	bf14      	ite	ne
 8004aa8:	2301      	movne	r3, #1
 8004aaa:	2300      	moveq	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0c7      	b.n	8004c46 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <HAL_TIM_OC_Start_IT+0x86>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac4:	e013      	b.n	8004aee <HAL_TIM_OC_Start_IT+0xae>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_OC_Start_IT+0x96>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad4:	e00b      	b.n	8004aee <HAL_TIM_OC_Start_IT+0xae>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_OC_Start_IT+0xa6>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae4:	e003      	b.n	8004aee <HAL_TIM_OC_Start_IT+0xae>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	d841      	bhi.n	8004b78 <HAL_TIM_OC_Start_IT+0x138>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <HAL_TIM_OC_Start_IT+0xbc>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b31 	.word	0x08004b31
 8004b00:	08004b79 	.word	0x08004b79
 8004b04:	08004b79 	.word	0x08004b79
 8004b08:	08004b79 	.word	0x08004b79
 8004b0c:	08004b43 	.word	0x08004b43
 8004b10:	08004b79 	.word	0x08004b79
 8004b14:	08004b79 	.word	0x08004b79
 8004b18:	08004b79 	.word	0x08004b79
 8004b1c:	08004b55 	.word	0x08004b55
 8004b20:	08004b79 	.word	0x08004b79
 8004b24:	08004b79 	.word	0x08004b79
 8004b28:	08004b79 	.word	0x08004b79
 8004b2c:	08004b67 	.word	0x08004b67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0202 	orr.w	r2, r2, #2
 8004b3e:	60da      	str	r2, [r3, #12]
      break;
 8004b40:	e01d      	b.n	8004b7e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0204 	orr.w	r2, r2, #4
 8004b50:	60da      	str	r2, [r3, #12]
      break;
 8004b52:	e014      	b.n	8004b7e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0208 	orr.w	r2, r2, #8
 8004b62:	60da      	str	r2, [r3, #12]
      break;
 8004b64:	e00b      	b.n	8004b7e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0210 	orr.w	r2, r2, #16
 8004b74:	60da      	str	r2, [r3, #12]
      break;
 8004b76:	e002      	b.n	8004b7e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d15f      	bne.n	8004c44 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	6839      	ldr	r1, [r7, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 f843 	bl	8005c18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2e      	ldr	r2, [pc, #184]	; (8004c50 <HAL_TIM_OC_Start_IT+0x210>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIM_OC_Start_IT+0x166>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2c      	ldr	r2, [pc, #176]	; (8004c54 <HAL_TIM_OC_Start_IT+0x214>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d101      	bne.n	8004baa <HAL_TIM_OC_Start_IT+0x16a>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <HAL_TIM_OC_Start_IT+0x16c>
 8004baa:	2300      	movs	r3, #0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <HAL_TIM_OC_Start_IT+0x210>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d022      	beq.n	8004c10 <HAL_TIM_OC_Start_IT+0x1d0>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d01d      	beq.n	8004c10 <HAL_TIM_OC_Start_IT+0x1d0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <HAL_TIM_OC_Start_IT+0x218>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d018      	beq.n	8004c10 <HAL_TIM_OC_Start_IT+0x1d0>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <HAL_TIM_OC_Start_IT+0x21c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <HAL_TIM_OC_Start_IT+0x1d0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <HAL_TIM_OC_Start_IT+0x220>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_TIM_OC_Start_IT+0x1d0>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <HAL_TIM_OC_Start_IT+0x214>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_TIM_OC_Start_IT+0x1d0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <HAL_TIM_OC_Start_IT+0x224>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIM_OC_Start_IT+0x1d0>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <HAL_TIM_OC_Start_IT+0x228>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d111      	bne.n	8004c34 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d010      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	e007      	b.n	8004c44 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40010400 	.word	0x40010400
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40001800 	.word	0x40001800

08004c6c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b0c      	cmp	r3, #12
 8004c7e:	d841      	bhi.n	8004d04 <HAL_TIM_OC_Stop_IT+0x98>
 8004c80:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <HAL_TIM_OC_Stop_IT+0x1c>)
 8004c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c86:	bf00      	nop
 8004c88:	08004cbd 	.word	0x08004cbd
 8004c8c:	08004d05 	.word	0x08004d05
 8004c90:	08004d05 	.word	0x08004d05
 8004c94:	08004d05 	.word	0x08004d05
 8004c98:	08004ccf 	.word	0x08004ccf
 8004c9c:	08004d05 	.word	0x08004d05
 8004ca0:	08004d05 	.word	0x08004d05
 8004ca4:	08004d05 	.word	0x08004d05
 8004ca8:	08004ce1 	.word	0x08004ce1
 8004cac:	08004d05 	.word	0x08004d05
 8004cb0:	08004d05 	.word	0x08004d05
 8004cb4:	08004d05 	.word	0x08004d05
 8004cb8:	08004cf3 	.word	0x08004cf3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0202 	bic.w	r2, r2, #2
 8004cca:	60da      	str	r2, [r3, #12]
      break;
 8004ccc:	e01d      	b.n	8004d0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0204 	bic.w	r2, r2, #4
 8004cdc:	60da      	str	r2, [r3, #12]
      break;
 8004cde:	e014      	b.n	8004d0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0208 	bic.w	r2, r2, #8
 8004cee:	60da      	str	r2, [r3, #12]
      break;
 8004cf0:	e00b      	b.n	8004d0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0210 	bic.w	r2, r2, #16
 8004d00:	60da      	str	r2, [r3, #12]
      break;
 8004d02:	e002      	b.n	8004d0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
      break;
 8004d08:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d161      	bne.n	8004dd4 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	6839      	ldr	r1, [r7, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 ff7d 	bl	8005c18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <HAL_TIM_OC_Stop_IT+0x174>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_TIM_OC_Stop_IT+0xc6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2d      	ldr	r2, [pc, #180]	; (8004de4 <HAL_TIM_OC_Stop_IT+0x178>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_OC_Stop_IT+0xca>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_TIM_OC_Stop_IT+0xcc>
 8004d36:	2300      	movs	r3, #0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d017      	beq.n	8004d6c <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6a1a      	ldr	r2, [r3, #32]
 8004d42:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10f      	bne.n	8004d6c <HAL_TIM_OC_Stop_IT+0x100>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6a1a      	ldr	r2, [r3, #32]
 8004d52:	f240 4344 	movw	r3, #1092	; 0x444
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d107      	bne.n	8004d6c <HAL_TIM_OC_Stop_IT+0x100>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6a1a      	ldr	r2, [r3, #32]
 8004d72:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10f      	bne.n	8004d9c <HAL_TIM_OC_Stop_IT+0x130>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a1a      	ldr	r2, [r3, #32]
 8004d82:	f240 4344 	movw	r3, #1092	; 0x444
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d107      	bne.n	8004d9c <HAL_TIM_OC_Stop_IT+0x130>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <HAL_TIM_OC_Stop_IT+0x140>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004daa:	e013      	b.n	8004dd4 <HAL_TIM_OC_Stop_IT+0x168>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d104      	bne.n	8004dbc <HAL_TIM_OC_Stop_IT+0x150>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dba:	e00b      	b.n	8004dd4 <HAL_TIM_OC_Stop_IT+0x168>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d104      	bne.n	8004dcc <HAL_TIM_OC_Stop_IT+0x160>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dca:	e003      	b.n	8004dd4 <HAL_TIM_OC_Stop_IT+0x168>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40010400 	.word	0x40010400

08004de8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e041      	b.n	8004e7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f839 	bl	8004e86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f000 fc0c 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d109      	bne.n	8004ec0 <HAL_TIM_PWM_Start+0x24>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	e022      	b.n	8004f06 <HAL_TIM_PWM_Start+0x6a>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d109      	bne.n	8004eda <HAL_TIM_PWM_Start+0x3e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e015      	b.n	8004f06 <HAL_TIM_PWM_Start+0x6a>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d109      	bne.n	8004ef4 <HAL_TIM_PWM_Start+0x58>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	bf14      	ite	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	2300      	moveq	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	e008      	b.n	8004f06 <HAL_TIM_PWM_Start+0x6a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e07c      	b.n	8005008 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Start+0x82>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f1c:	e013      	b.n	8004f46 <HAL_TIM_PWM_Start+0xaa>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Start+0x92>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f2c:	e00b      	b.n	8004f46 <HAL_TIM_PWM_Start+0xaa>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d104      	bne.n	8004f3e <HAL_TIM_PWM_Start+0xa2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f3c:	e003      	b.n	8004f46 <HAL_TIM_PWM_Start+0xaa>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fe62 	bl	8005c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2d      	ldr	r2, [pc, #180]	; (8005010 <HAL_TIM_PWM_Start+0x174>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <HAL_TIM_PWM_Start+0xcc>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <HAL_TIM_PWM_Start+0x178>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d101      	bne.n	8004f6c <HAL_TIM_PWM_Start+0xd0>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_TIM_PWM_Start+0xd2>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a22      	ldr	r2, [pc, #136]	; (8005010 <HAL_TIM_PWM_Start+0x174>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d022      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f94:	d01d      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <HAL_TIM_PWM_Start+0x17c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d018      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <HAL_TIM_PWM_Start+0x180>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <HAL_TIM_PWM_Start+0x184>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a16      	ldr	r2, [pc, #88]	; (8005014 <HAL_TIM_PWM_Start+0x178>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a18      	ldr	r2, [pc, #96]	; (8005024 <HAL_TIM_PWM_Start+0x188>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a16      	ldr	r2, [pc, #88]	; (8005028 <HAL_TIM_PWM_Start+0x18c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d111      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b06      	cmp	r3, #6
 8004fe2:	d010      	beq.n	8005006 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff4:	e007      	b.n	8005006 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40010000 	.word	0x40010000
 8005014:	40010400 	.word	0x40010400
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800
 8005020:	40000c00 	.word	0x40000c00
 8005024:	40014000 	.word	0x40014000
 8005028:	40001800 	.word	0x40001800

0800502c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d122      	bne.n	8005088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b02      	cmp	r3, #2
 800504e:	d11b      	bne.n	8005088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0202 	mvn.w	r2, #2
 8005058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fac9 	bl	8005606 <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fc fa82 	bl	8001580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 facc 	bl	800561a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b04      	cmp	r3, #4
 8005094:	d122      	bne.n	80050dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d11b      	bne.n	80050dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0204 	mvn.w	r2, #4
 80050ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa9f 	bl	8005606 <HAL_TIM_IC_CaptureCallback>
 80050c8:	e005      	b.n	80050d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fc fa58 	bl	8001580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 faa2 	bl	800561a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d122      	bne.n	8005130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d11b      	bne.n	8005130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0208 	mvn.w	r2, #8
 8005100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2204      	movs	r2, #4
 8005106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fa75 	bl	8005606 <HAL_TIM_IC_CaptureCallback>
 800511c:	e005      	b.n	800512a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fc fa2e 	bl	8001580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fa78 	bl	800561a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b10      	cmp	r3, #16
 800513c:	d122      	bne.n	8005184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b10      	cmp	r3, #16
 800514a:	d11b      	bne.n	8005184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0210 	mvn.w	r2, #16
 8005154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2208      	movs	r2, #8
 800515a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fa4b 	bl	8005606 <HAL_TIM_IC_CaptureCallback>
 8005170:	e005      	b.n	800517e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc fa04 	bl	8001580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fa4e 	bl	800561a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d10e      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b01      	cmp	r3, #1
 800519e:	d107      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0201 	mvn.w	r2, #1
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fc ff74 	bl	8002098 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d10e      	bne.n	80051dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c8:	2b80      	cmp	r3, #128	; 0x80
 80051ca:	d107      	bne.n	80051dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fe1c 	bl	8005e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d10e      	bne.n	8005208 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d107      	bne.n	8005208 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa13 	bl	800562e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b20      	cmp	r3, #32
 8005214:	d10e      	bne.n	8005234 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b20      	cmp	r3, #32
 8005222:	d107      	bne.n	8005234 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0220 	mvn.w	r2, #32
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fde6 	bl	8005e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005234:	bf00      	nop
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005256:	2302      	movs	r3, #2
 8005258:	e048      	b.n	80052ec <HAL_TIM_OC_ConfigChannel+0xb0>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b0c      	cmp	r3, #12
 8005266:	d839      	bhi.n	80052dc <HAL_TIM_OC_ConfigChannel+0xa0>
 8005268:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <HAL_TIM_OC_ConfigChannel+0x34>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	080052a5 	.word	0x080052a5
 8005274:	080052dd 	.word	0x080052dd
 8005278:	080052dd 	.word	0x080052dd
 800527c:	080052dd 	.word	0x080052dd
 8005280:	080052b3 	.word	0x080052b3
 8005284:	080052dd 	.word	0x080052dd
 8005288:	080052dd 	.word	0x080052dd
 800528c:	080052dd 	.word	0x080052dd
 8005290:	080052c1 	.word	0x080052c1
 8005294:	080052dd 	.word	0x080052dd
 8005298:	080052dd 	.word	0x080052dd
 800529c:	080052dd 	.word	0x080052dd
 80052a0:	080052cf 	.word	0x080052cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fa6a 	bl	8005784 <TIM_OC1_SetConfig>
      break;
 80052b0:	e017      	b.n	80052e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fad3 	bl	8005864 <TIM_OC2_SetConfig>
      break;
 80052be:	e010      	b.n	80052e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fb42 	bl	8005950 <TIM_OC3_SetConfig>
      break;
 80052cc:	e009      	b.n	80052e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fbaf 	bl	8005a38 <TIM_OC4_SetConfig>
      break;
 80052da:	e002      	b.n	80052e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	75fb      	strb	r3, [r7, #23]
      break;
 80052e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800530e:	2302      	movs	r3, #2
 8005310:	e0ae      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b0c      	cmp	r3, #12
 800531e:	f200 809f 	bhi.w	8005460 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	0800535d 	.word	0x0800535d
 800532c:	08005461 	.word	0x08005461
 8005330:	08005461 	.word	0x08005461
 8005334:	08005461 	.word	0x08005461
 8005338:	0800539d 	.word	0x0800539d
 800533c:	08005461 	.word	0x08005461
 8005340:	08005461 	.word	0x08005461
 8005344:	08005461 	.word	0x08005461
 8005348:	080053df 	.word	0x080053df
 800534c:	08005461 	.word	0x08005461
 8005350:	08005461 	.word	0x08005461
 8005354:	08005461 	.word	0x08005461
 8005358:	0800541f 	.word	0x0800541f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fa0e 	bl	8005784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0208 	orr.w	r2, r2, #8
 8005376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0204 	bic.w	r2, r2, #4
 8005386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6999      	ldr	r1, [r3, #24]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	619a      	str	r2, [r3, #24]
      break;
 800539a:	e064      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fa5e 	bl	8005864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6999      	ldr	r1, [r3, #24]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	021a      	lsls	r2, r3, #8
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	619a      	str	r2, [r3, #24]
      break;
 80053dc:	e043      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fab3 	bl	8005950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0208 	orr.w	r2, r2, #8
 80053f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0204 	bic.w	r2, r2, #4
 8005408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69d9      	ldr	r1, [r3, #28]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	61da      	str	r2, [r3, #28]
      break;
 800541c:	e023      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fb07 	bl	8005a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69d9      	ldr	r1, [r3, #28]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	021a      	lsls	r2, r3, #8
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	61da      	str	r2, [r3, #28]
      break;
 800545e:	e002      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
      break;
 8005464:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_TIM_ConfigClockSource+0x1c>
 8005490:	2302      	movs	r3, #2
 8005492:	e0b4      	b.n	80055fe <HAL_TIM_ConfigClockSource+0x186>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054cc:	d03e      	beq.n	800554c <HAL_TIM_ConfigClockSource+0xd4>
 80054ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d2:	f200 8087 	bhi.w	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054da:	f000 8086 	beq.w	80055ea <HAL_TIM_ConfigClockSource+0x172>
 80054de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e2:	d87f      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054e4:	2b70      	cmp	r3, #112	; 0x70
 80054e6:	d01a      	beq.n	800551e <HAL_TIM_ConfigClockSource+0xa6>
 80054e8:	2b70      	cmp	r3, #112	; 0x70
 80054ea:	d87b      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b60      	cmp	r3, #96	; 0x60
 80054ee:	d050      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x11a>
 80054f0:	2b60      	cmp	r3, #96	; 0x60
 80054f2:	d877      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b50      	cmp	r3, #80	; 0x50
 80054f6:	d03c      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0xfa>
 80054f8:	2b50      	cmp	r3, #80	; 0x50
 80054fa:	d873      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d058      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005500:	2b40      	cmp	r3, #64	; 0x40
 8005502:	d86f      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b30      	cmp	r3, #48	; 0x30
 8005506:	d064      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005508:	2b30      	cmp	r3, #48	; 0x30
 800550a:	d86b      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b20      	cmp	r3, #32
 800550e:	d060      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005510:	2b20      	cmp	r3, #32
 8005512:	d867      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d05c      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005518:	2b10      	cmp	r3, #16
 800551a:	d05a      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 800551c:	e062      	b.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6899      	ldr	r1, [r3, #8]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f000 fb53 	bl	8005bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	609a      	str	r2, [r3, #8]
      break;
 800554a:	e04f      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	6899      	ldr	r1, [r3, #8]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f000 fb3c 	bl	8005bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800556e:	609a      	str	r2, [r3, #8]
      break;
 8005570:	e03c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	461a      	mov	r2, r3
 8005580:	f000 fab0 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2150      	movs	r1, #80	; 0x50
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fb09 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 8005590:	e02c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6859      	ldr	r1, [r3, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	461a      	mov	r2, r3
 80055a0:	f000 facf 	bl	8005b42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2160      	movs	r1, #96	; 0x60
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 faf9 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 80055b0:	e01c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	461a      	mov	r2, r3
 80055c0:	f000 fa90 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2140      	movs	r1, #64	; 0x40
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fae9 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 80055d0:	e00c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f000 fae0 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 80055e2:	e003      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
      break;
 80055e8:	e000      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a40      	ldr	r2, [pc, #256]	; (8005758 <TIM_Base_SetConfig+0x114>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d013      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005662:	d00f      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a3d      	ldr	r2, [pc, #244]	; (800575c <TIM_Base_SetConfig+0x118>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00b      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a3c      	ldr	r2, [pc, #240]	; (8005760 <TIM_Base_SetConfig+0x11c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a3b      	ldr	r2, [pc, #236]	; (8005764 <TIM_Base_SetConfig+0x120>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a3a      	ldr	r2, [pc, #232]	; (8005768 <TIM_Base_SetConfig+0x124>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d108      	bne.n	8005696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2f      	ldr	r2, [pc, #188]	; (8005758 <TIM_Base_SetConfig+0x114>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d02b      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a4:	d027      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2c      	ldr	r2, [pc, #176]	; (800575c <TIM_Base_SetConfig+0x118>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d023      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2b      	ldr	r2, [pc, #172]	; (8005760 <TIM_Base_SetConfig+0x11c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01f      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2a      	ldr	r2, [pc, #168]	; (8005764 <TIM_Base_SetConfig+0x120>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d01b      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a29      	ldr	r2, [pc, #164]	; (8005768 <TIM_Base_SetConfig+0x124>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d017      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a28      	ldr	r2, [pc, #160]	; (800576c <TIM_Base_SetConfig+0x128>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a27      	ldr	r2, [pc, #156]	; (8005770 <TIM_Base_SetConfig+0x12c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00f      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a26      	ldr	r2, [pc, #152]	; (8005774 <TIM_Base_SetConfig+0x130>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a25      	ldr	r2, [pc, #148]	; (8005778 <TIM_Base_SetConfig+0x134>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a24      	ldr	r2, [pc, #144]	; (800577c <TIM_Base_SetConfig+0x138>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a23      	ldr	r2, [pc, #140]	; (8005780 <TIM_Base_SetConfig+0x13c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d108      	bne.n	8005708 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a0a      	ldr	r2, [pc, #40]	; (8005758 <TIM_Base_SetConfig+0x114>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_Base_SetConfig+0xf8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <TIM_Base_SetConfig+0x124>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d103      	bne.n	8005744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	615a      	str	r2, [r3, #20]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40010400 	.word	0x40010400
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800
 8005778:	40001800 	.word	0x40001800
 800577c:	40001c00 	.word	0x40001c00
 8005780:	40002000 	.word	0x40002000

08005784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0201 	bic.w	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0303 	bic.w	r3, r3, #3
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 0302 	bic.w	r3, r3, #2
 80057cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a20      	ldr	r2, [pc, #128]	; (800585c <TIM_OC1_SetConfig+0xd8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_OC1_SetConfig+0x64>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a1f      	ldr	r2, [pc, #124]	; (8005860 <TIM_OC1_SetConfig+0xdc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10c      	bne.n	8005802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0308 	bic.w	r3, r3, #8
 80057ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f023 0304 	bic.w	r3, r3, #4
 8005800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a15      	ldr	r2, [pc, #84]	; (800585c <TIM_OC1_SetConfig+0xd8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_OC1_SetConfig+0x8e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a14      	ldr	r2, [pc, #80]	; (8005860 <TIM_OC1_SetConfig+0xdc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d111      	bne.n	8005836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	40010000 	.word	0x40010000
 8005860:	40010400 	.word	0x40010400

08005864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f023 0210 	bic.w	r2, r3, #16
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0320 	bic.w	r3, r3, #32
 80058ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a22      	ldr	r2, [pc, #136]	; (8005948 <TIM_OC2_SetConfig+0xe4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_OC2_SetConfig+0x68>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a21      	ldr	r2, [pc, #132]	; (800594c <TIM_OC2_SetConfig+0xe8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d10d      	bne.n	80058e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a17      	ldr	r2, [pc, #92]	; (8005948 <TIM_OC2_SetConfig+0xe4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC2_SetConfig+0x94>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a16      	ldr	r2, [pc, #88]	; (800594c <TIM_OC2_SetConfig+0xe8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d113      	bne.n	8005920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40010000 	.word	0x40010000
 800594c:	40010400 	.word	0x40010400

08005950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0303 	bic.w	r3, r3, #3
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a21      	ldr	r2, [pc, #132]	; (8005a30 <TIM_OC3_SetConfig+0xe0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_OC3_SetConfig+0x66>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <TIM_OC3_SetConfig+0xe4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d10d      	bne.n	80059d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a16      	ldr	r2, [pc, #88]	; (8005a30 <TIM_OC3_SetConfig+0xe0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC3_SetConfig+0x92>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a15      	ldr	r2, [pc, #84]	; (8005a34 <TIM_OC3_SetConfig+0xe4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d113      	bne.n	8005a0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	621a      	str	r2, [r3, #32]
}
 8005a24:	bf00      	nop
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40010400 	.word	0x40010400

08005a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	031b      	lsls	r3, r3, #12
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a12      	ldr	r2, [pc, #72]	; (8005adc <TIM_OC4_SetConfig+0xa4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_OC4_SetConfig+0x68>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <TIM_OC4_SetConfig+0xa8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d109      	bne.n	8005ab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	019b      	lsls	r3, r3, #6
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40010400 	.word	0x40010400

08005ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f023 0201 	bic.w	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f023 030a 	bic.w	r3, r3, #10
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f023 0210 	bic.w	r2, r3, #16
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	031b      	lsls	r3, r3, #12
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f043 0307 	orr.w	r3, r3, #7
 8005bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	609a      	str	r2, [r3, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	021a      	lsls	r2, r3, #8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	609a      	str	r2, [r3, #8]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1a      	ldr	r2, [r3, #32]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	431a      	orrs	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e05a      	b.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a21      	ldr	r2, [pc, #132]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d01d      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	; (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a18      	ldr	r2, [pc, #96]	; (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a17      	ldr	r2, [pc, #92]	; (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10c      	bne.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40010400 	.word	0x40010400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40001800 	.word	0x40001800

08005d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e03d      	b.n	8005df4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e3a:	2b84      	cmp	r3, #132	; 0x84
 8005e3c:	d005      	beq.n	8005e4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4413      	add	r3, r2
 8005e46:	3303      	adds	r3, #3
 8005e48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e5c:	f000 fb48 	bl	80064f0 <vTaskStartScheduler>
  
  return osOK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e68:	b089      	sub	sp, #36	; 0x24
 8005e6a:	af04      	add	r7, sp, #16
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d020      	beq.n	8005eba <osThreadCreate+0x54>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01c      	beq.n	8005eba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685c      	ldr	r4, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691e      	ldr	r6, [r3, #16]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff ffc8 	bl	8005e28 <makeFreeRtosPriority>
 8005e98:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ea2:	9202      	str	r2, [sp, #8]
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	9100      	str	r1, [sp, #0]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	4632      	mov	r2, r6
 8005eac:	4629      	mov	r1, r5
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 f8d9 	bl	8006066 <xTaskCreateStatic>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e01c      	b.n	8005ef4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685c      	ldr	r4, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ec6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff ffaa 	bl	8005e28 <makeFreeRtosPriority>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	f107 030c 	add.w	r3, r7, #12
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	9200      	str	r2, [sp, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 f91b 	bl	8006120 <xTaskCreate>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d001      	beq.n	8005ef4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e000      	b.n	8005ef6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005efe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f103 0208 	add.w	r2, r3, #8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f04f 32ff 	mov.w	r2, #4294967295
 8005f16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f103 0208 	add.w	r2, r3, #8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f103 0208 	add.w	r2, r3, #8
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb6:	d103      	bne.n	8005fc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	e00c      	b.n	8005fda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3308      	adds	r3, #8
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e002      	b.n	8005fce <vListInsert+0x2e>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d2f6      	bcs.n	8005fc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	601a      	str	r2, [r3, #0]
}
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006012:	b480      	push	{r7}
 8006014:	b085      	sub	sp, #20
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6892      	ldr	r2, [r2, #8]
 8006028:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6852      	ldr	r2, [r2, #4]
 8006032:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	429a      	cmp	r2, r3
 800603c:	d103      	bne.n	8006046 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	1e5a      	subs	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006066:	b580      	push	{r7, lr}
 8006068:	b08e      	sub	sp, #56	; 0x38
 800606a:	af04      	add	r7, sp, #16
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
 8006072:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <xTaskCreateStatic+0x46>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	61fb      	str	r3, [r7, #28]
}
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060ac:	2354      	movs	r3, #84	; 0x54
 80060ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b54      	cmp	r3, #84	; 0x54
 80060b4:	d00a      	beq.n	80060cc <xTaskCreateStatic+0x66>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	61bb      	str	r3, [r7, #24]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01e      	beq.n	8006112 <xTaskCreateStatic+0xac>
 80060d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01b      	beq.n	8006112 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060ec:	2300      	movs	r3, #0
 80060ee:	9303      	str	r3, [sp, #12]
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	9302      	str	r3, [sp, #8]
 80060f4:	f107 0314 	add.w	r3, r7, #20
 80060f8:	9301      	str	r3, [sp, #4]
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f850 	bl	80061aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800610a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800610c:	f000 f8d4 	bl	80062b8 <prvAddNewTaskToReadyList>
 8006110:	e001      	b.n	8006116 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006116:	697b      	ldr	r3, [r7, #20]
	}
 8006118:	4618      	mov	r0, r3
 800611a:	3728      	adds	r7, #40	; 0x28
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08c      	sub	sp, #48	; 0x30
 8006124:	af04      	add	r7, sp, #16
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4618      	mov	r0, r3
 8006136:	f000 ff57 	bl	8006fe8 <pvPortMalloc>
 800613a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00e      	beq.n	8006160 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006142:	2054      	movs	r0, #84	; 0x54
 8006144:	f000 ff50 	bl	8006fe8 <pvPortMalloc>
 8006148:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	631a      	str	r2, [r3, #48]	; 0x30
 8006156:	e005      	b.n	8006164 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006158:	6978      	ldr	r0, [r7, #20]
 800615a:	f001 f811 	bl	8007180 <vPortFree>
 800615e:	e001      	b.n	8006164 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d017      	beq.n	800619a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006172:	88fa      	ldrh	r2, [r7, #6]
 8006174:	2300      	movs	r3, #0
 8006176:	9303      	str	r3, [sp, #12]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	9302      	str	r3, [sp, #8]
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f80e 	bl	80061aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800618e:	69f8      	ldr	r0, [r7, #28]
 8006190:	f000 f892 	bl	80062b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006194:	2301      	movs	r3, #1
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e002      	b.n	80061a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800619a:	f04f 33ff 	mov.w	r3, #4294967295
 800619e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061a0:	69bb      	ldr	r3, [r7, #24]
	}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3720      	adds	r7, #32
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b088      	sub	sp, #32
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061c2:	3b01      	subs	r3, #1
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	f023 0307 	bic.w	r3, r3, #7
 80061d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	617b      	str	r3, [r7, #20]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01f      	beq.n	8006238 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	e012      	b.n	8006224 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	7819      	ldrb	r1, [r3, #0]
 8006206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	3334      	adds	r3, #52	; 0x34
 800620e:	460a      	mov	r2, r1
 8006210:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	4413      	add	r3, r2
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d006      	beq.n	800622c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	3301      	adds	r3, #1
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	2b0f      	cmp	r3, #15
 8006228:	d9e9      	bls.n	80061fe <prvInitialiseNewTask+0x54>
 800622a:	e000      	b.n	800622e <prvInitialiseNewTask+0x84>
			{
				break;
 800622c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006236:	e003      	b.n	8006240 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	2b06      	cmp	r3, #6
 8006244:	d901      	bls.n	800624a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006246:	2306      	movs	r3, #6
 8006248:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800624e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006254:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	2200      	movs	r2, #0
 800625a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	3304      	adds	r3, #4
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fe6c 	bl	8005f3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	3318      	adds	r3, #24
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fe67 	bl	8005f3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006274:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	f1c3 0207 	rsb	r2, r3, #7
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006284:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	2200      	movs	r2, #0
 800628a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	68f9      	ldr	r1, [r7, #12]
 8006298:	69b8      	ldr	r0, [r7, #24]
 800629a:	f000 fc93 	bl	8006bc4 <pxPortInitialiseStack>
 800629e:	4602      	mov	r2, r0
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062b0:	bf00      	nop
 80062b2:	3720      	adds	r7, #32
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062c0:	f000 fdb0 	bl	8006e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062c4:	4b2a      	ldr	r3, [pc, #168]	; (8006370 <prvAddNewTaskToReadyList+0xb8>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	4a29      	ldr	r2, [pc, #164]	; (8006370 <prvAddNewTaskToReadyList+0xb8>)
 80062cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062ce:	4b29      	ldr	r3, [pc, #164]	; (8006374 <prvAddNewTaskToReadyList+0xbc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062d6:	4a27      	ldr	r2, [pc, #156]	; (8006374 <prvAddNewTaskToReadyList+0xbc>)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062dc:	4b24      	ldr	r3, [pc, #144]	; (8006370 <prvAddNewTaskToReadyList+0xb8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d110      	bne.n	8006306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062e4:	f000 fb4a 	bl	800697c <prvInitialiseTaskLists>
 80062e8:	e00d      	b.n	8006306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062ea:	4b23      	ldr	r3, [pc, #140]	; (8006378 <prvAddNewTaskToReadyList+0xc0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062f2:	4b20      	ldr	r3, [pc, #128]	; (8006374 <prvAddNewTaskToReadyList+0xbc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d802      	bhi.n	8006306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006300:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <prvAddNewTaskToReadyList+0xbc>)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006306:	4b1d      	ldr	r3, [pc, #116]	; (800637c <prvAddNewTaskToReadyList+0xc4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3301      	adds	r3, #1
 800630c:	4a1b      	ldr	r2, [pc, #108]	; (800637c <prvAddNewTaskToReadyList+0xc4>)
 800630e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	2201      	movs	r2, #1
 8006316:	409a      	lsls	r2, r3
 8006318:	4b19      	ldr	r3, [pc, #100]	; (8006380 <prvAddNewTaskToReadyList+0xc8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4313      	orrs	r3, r2
 800631e:	4a18      	ldr	r2, [pc, #96]	; (8006380 <prvAddNewTaskToReadyList+0xc8>)
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4a15      	ldr	r2, [pc, #84]	; (8006384 <prvAddNewTaskToReadyList+0xcc>)
 8006330:	441a      	add	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f7ff fe0d 	bl	8005f58 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800633e:	f000 fda1 	bl	8006e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006342:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <prvAddNewTaskToReadyList+0xc0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00e      	beq.n	8006368 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800634a:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <prvAddNewTaskToReadyList+0xbc>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	429a      	cmp	r2, r3
 8006356:	d207      	bcs.n	8006368 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006358:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <prvAddNewTaskToReadyList+0xd0>)
 800635a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006368:	bf00      	nop
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	200005f4 	.word	0x200005f4
 8006374:	200004f4 	.word	0x200004f4
 8006378:	20000600 	.word	0x20000600
 800637c:	20000610 	.word	0x20000610
 8006380:	200005fc 	.word	0x200005fc
 8006384:	200004f8 	.word	0x200004f8
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006396:	2300      	movs	r3, #0
 8006398:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	617b      	str	r3, [r7, #20]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <vTaskDelayUntil+0x46>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	613b      	str	r3, [r7, #16]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80063d2:	4b2a      	ldr	r3, [pc, #168]	; (800647c <vTaskDelayUntil+0xf0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <vTaskDelayUntil+0x64>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	60fb      	str	r3, [r7, #12]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80063f0:	f000 f8de 	bl	80065b0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80063f4:	4b22      	ldr	r3, [pc, #136]	; (8006480 <vTaskDelayUntil+0xf4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	4413      	add	r3, r2
 8006402:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6a3a      	ldr	r2, [r7, #32]
 800640a:	429a      	cmp	r2, r3
 800640c:	d20b      	bcs.n	8006426 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	429a      	cmp	r2, r3
 8006416:	d211      	bcs.n	800643c <vTaskDelayUntil+0xb0>
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	429a      	cmp	r2, r3
 800641e:	d90d      	bls.n	800643c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
 8006424:	e00a      	b.n	800643c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	429a      	cmp	r2, r3
 800642e:	d303      	bcc.n	8006438 <vTaskDelayUntil+0xac>
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	429a      	cmp	r2, r3
 8006436:	d901      	bls.n	800643c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006438:	2301      	movs	r3, #1
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	d006      	beq.n	8006456 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2100      	movs	r1, #0
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fb51 	bl	8006af8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006456:	f000 f8b9 	bl	80065cc <xTaskResumeAll>
 800645a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d107      	bne.n	8006472 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006462:	4b08      	ldr	r3, [pc, #32]	; (8006484 <vTaskDelayUntil+0xf8>)
 8006464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006472:	bf00      	nop
 8006474:	3728      	adds	r7, #40	; 0x28
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	2000061c 	.word	0x2000061c
 8006480:	200005f8 	.word	0x200005f8
 8006484:	e000ed04 	.word	0xe000ed04

08006488 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d017      	beq.n	80064ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800649a:	4b13      	ldr	r3, [pc, #76]	; (80064e8 <vTaskDelay+0x60>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <vTaskDelay+0x30>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	60bb      	str	r3, [r7, #8]
}
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064b8:	f000 f87a 	bl	80065b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064bc:	2100      	movs	r1, #0
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fb1a 	bl	8006af8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064c4:	f000 f882 	bl	80065cc <xTaskResumeAll>
 80064c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d107      	bne.n	80064e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064d0:	4b06      	ldr	r3, [pc, #24]	; (80064ec <vTaskDelay+0x64>)
 80064d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064e0:	bf00      	nop
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	2000061c 	.word	0x2000061c
 80064ec:	e000ed04 	.word	0xe000ed04

080064f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064fe:	463a      	mov	r2, r7
 8006500:	1d39      	adds	r1, r7, #4
 8006502:	f107 0308 	add.w	r3, r7, #8
 8006506:	4618      	mov	r0, r3
 8006508:	f7fa fdd0 	bl	80010ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	9202      	str	r2, [sp, #8]
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	2300      	movs	r3, #0
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	2300      	movs	r3, #0
 800651c:	460a      	mov	r2, r1
 800651e:	491e      	ldr	r1, [pc, #120]	; (8006598 <vTaskStartScheduler+0xa8>)
 8006520:	481e      	ldr	r0, [pc, #120]	; (800659c <vTaskStartScheduler+0xac>)
 8006522:	f7ff fda0 	bl	8006066 <xTaskCreateStatic>
 8006526:	4603      	mov	r3, r0
 8006528:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <vTaskStartScheduler+0xb0>)
 800652a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800652c:	4b1c      	ldr	r3, [pc, #112]	; (80065a0 <vTaskStartScheduler+0xb0>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006534:	2301      	movs	r3, #1
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e001      	b.n	800653e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800653a:	2300      	movs	r3, #0
 800653c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d116      	bne.n	8006572 <vTaskStartScheduler+0x82>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	613b      	str	r3, [r7, #16]
}
 8006556:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006558:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <vTaskStartScheduler+0xb4>)
 800655a:	f04f 32ff 	mov.w	r2, #4294967295
 800655e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006560:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <vTaskStartScheduler+0xb8>)
 8006562:	2201      	movs	r2, #1
 8006564:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006566:	4b11      	ldr	r3, [pc, #68]	; (80065ac <vTaskStartScheduler+0xbc>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800656c:	f000 fbb8 	bl	8006ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006570:	e00e      	b.n	8006590 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006578:	d10a      	bne.n	8006590 <vTaskStartScheduler+0xa0>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	60fb      	str	r3, [r7, #12]
}
 800658c:	bf00      	nop
 800658e:	e7fe      	b.n	800658e <vTaskStartScheduler+0x9e>
}
 8006590:	bf00      	nop
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	08007540 	.word	0x08007540
 800659c:	0800694d 	.word	0x0800694d
 80065a0:	20000618 	.word	0x20000618
 80065a4:	20000614 	.word	0x20000614
 80065a8:	20000600 	.word	0x20000600
 80065ac:	200005f8 	.word	0x200005f8

080065b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065b4:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <vTaskSuspendAll+0x18>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	4a03      	ldr	r2, [pc, #12]	; (80065c8 <vTaskSuspendAll+0x18>)
 80065bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065be:	bf00      	nop
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	2000061c 	.word	0x2000061c

080065cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065da:	4b41      	ldr	r3, [pc, #260]	; (80066e0 <xTaskResumeAll+0x114>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	603b      	str	r3, [r7, #0]
}
 80065f4:	bf00      	nop
 80065f6:	e7fe      	b.n	80065f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065f8:	f000 fc14 	bl	8006e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065fc:	4b38      	ldr	r3, [pc, #224]	; (80066e0 <xTaskResumeAll+0x114>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3b01      	subs	r3, #1
 8006602:	4a37      	ldr	r2, [pc, #220]	; (80066e0 <xTaskResumeAll+0x114>)
 8006604:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006606:	4b36      	ldr	r3, [pc, #216]	; (80066e0 <xTaskResumeAll+0x114>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d161      	bne.n	80066d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800660e:	4b35      	ldr	r3, [pc, #212]	; (80066e4 <xTaskResumeAll+0x118>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d05d      	beq.n	80066d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006616:	e02e      	b.n	8006676 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006618:	4b33      	ldr	r3, [pc, #204]	; (80066e8 <xTaskResumeAll+0x11c>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3318      	adds	r3, #24
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fcf4 	bl	8006012 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3304      	adds	r3, #4
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff fcef 	bl	8006012 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	2201      	movs	r2, #1
 800663a:	409a      	lsls	r2, r3
 800663c:	4b2b      	ldr	r3, [pc, #172]	; (80066ec <xTaskResumeAll+0x120>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4313      	orrs	r3, r2
 8006642:	4a2a      	ldr	r2, [pc, #168]	; (80066ec <xTaskResumeAll+0x120>)
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4a27      	ldr	r2, [pc, #156]	; (80066f0 <xTaskResumeAll+0x124>)
 8006654:	441a      	add	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3304      	adds	r3, #4
 800665a:	4619      	mov	r1, r3
 800665c:	4610      	mov	r0, r2
 800665e:	f7ff fc7b 	bl	8005f58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006666:	4b23      	ldr	r3, [pc, #140]	; (80066f4 <xTaskResumeAll+0x128>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	429a      	cmp	r2, r3
 800666e:	d302      	bcc.n	8006676 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006670:	4b21      	ldr	r3, [pc, #132]	; (80066f8 <xTaskResumeAll+0x12c>)
 8006672:	2201      	movs	r2, #1
 8006674:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006676:	4b1c      	ldr	r3, [pc, #112]	; (80066e8 <xTaskResumeAll+0x11c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1cc      	bne.n	8006618 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006684:	f000 fa18 	bl	8006ab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006688:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <xTaskResumeAll+0x130>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d010      	beq.n	80066b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006694:	f000 f846 	bl	8006724 <xTaskIncrementTick>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800669e:	4b16      	ldr	r3, [pc, #88]	; (80066f8 <xTaskResumeAll+0x12c>)
 80066a0:	2201      	movs	r2, #1
 80066a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f1      	bne.n	8006694 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80066b0:	4b12      	ldr	r3, [pc, #72]	; (80066fc <xTaskResumeAll+0x130>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066b6:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <xTaskResumeAll+0x12c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d009      	beq.n	80066d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066be:	2301      	movs	r3, #1
 80066c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066c2:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <xTaskResumeAll+0x134>)
 80066c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066d2:	f000 fbd7 	bl	8006e84 <vPortExitCritical>

	return xAlreadyYielded;
 80066d6:	68bb      	ldr	r3, [r7, #8]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	2000061c 	.word	0x2000061c
 80066e4:	200005f4 	.word	0x200005f4
 80066e8:	200005b4 	.word	0x200005b4
 80066ec:	200005fc 	.word	0x200005fc
 80066f0:	200004f8 	.word	0x200004f8
 80066f4:	200004f4 	.word	0x200004f4
 80066f8:	20000608 	.word	0x20000608
 80066fc:	20000604 	.word	0x20000604
 8006700:	e000ed04 	.word	0xe000ed04

08006704 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <xTaskGetTickCount+0x1c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006710:	687b      	ldr	r3, [r7, #4]
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	200005f8 	.word	0x200005f8

08006724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800672e:	4b4e      	ldr	r3, [pc, #312]	; (8006868 <xTaskIncrementTick+0x144>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f040 808e 	bne.w	8006854 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006738:	4b4c      	ldr	r3, [pc, #304]	; (800686c <xTaskIncrementTick+0x148>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3301      	adds	r3, #1
 800673e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006740:	4a4a      	ldr	r2, [pc, #296]	; (800686c <xTaskIncrementTick+0x148>)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d120      	bne.n	800678e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800674c:	4b48      	ldr	r3, [pc, #288]	; (8006870 <xTaskIncrementTick+0x14c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <xTaskIncrementTick+0x48>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	603b      	str	r3, [r7, #0]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <xTaskIncrementTick+0x46>
 800676c:	4b40      	ldr	r3, [pc, #256]	; (8006870 <xTaskIncrementTick+0x14c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	4b40      	ldr	r3, [pc, #256]	; (8006874 <xTaskIncrementTick+0x150>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a3e      	ldr	r2, [pc, #248]	; (8006870 <xTaskIncrementTick+0x14c>)
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	4a3e      	ldr	r2, [pc, #248]	; (8006874 <xTaskIncrementTick+0x150>)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	4b3d      	ldr	r3, [pc, #244]	; (8006878 <xTaskIncrementTick+0x154>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	4a3c      	ldr	r2, [pc, #240]	; (8006878 <xTaskIncrementTick+0x154>)
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	f000 f995 	bl	8006ab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800678e:	4b3b      	ldr	r3, [pc, #236]	; (800687c <xTaskIncrementTick+0x158>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	d348      	bcc.n	800682a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006798:	4b35      	ldr	r3, [pc, #212]	; (8006870 <xTaskIncrementTick+0x14c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a2:	4b36      	ldr	r3, [pc, #216]	; (800687c <xTaskIncrementTick+0x158>)
 80067a4:	f04f 32ff 	mov.w	r2, #4294967295
 80067a8:	601a      	str	r2, [r3, #0]
					break;
 80067aa:	e03e      	b.n	800682a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ac:	4b30      	ldr	r3, [pc, #192]	; (8006870 <xTaskIncrementTick+0x14c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d203      	bcs.n	80067cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067c4:	4a2d      	ldr	r2, [pc, #180]	; (800687c <xTaskIncrementTick+0x158>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067ca:	e02e      	b.n	800682a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fc1e 	bl	8006012 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	3318      	adds	r3, #24
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff fc15 	bl	8006012 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	2201      	movs	r2, #1
 80067ee:	409a      	lsls	r2, r3
 80067f0:	4b23      	ldr	r3, [pc, #140]	; (8006880 <xTaskIncrementTick+0x15c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	4a22      	ldr	r2, [pc, #136]	; (8006880 <xTaskIncrementTick+0x15c>)
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4a1f      	ldr	r2, [pc, #124]	; (8006884 <xTaskIncrementTick+0x160>)
 8006808:	441a      	add	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	3304      	adds	r3, #4
 800680e:	4619      	mov	r1, r3
 8006810:	4610      	mov	r0, r2
 8006812:	f7ff fba1 	bl	8005f58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681a:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <xTaskIncrementTick+0x164>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	429a      	cmp	r2, r3
 8006822:	d3b9      	bcc.n	8006798 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006824:	2301      	movs	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006828:	e7b6      	b.n	8006798 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800682a:	4b17      	ldr	r3, [pc, #92]	; (8006888 <xTaskIncrementTick+0x164>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	4914      	ldr	r1, [pc, #80]	; (8006884 <xTaskIncrementTick+0x160>)
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d901      	bls.n	8006846 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006842:	2301      	movs	r3, #1
 8006844:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006846:	4b11      	ldr	r3, [pc, #68]	; (800688c <xTaskIncrementTick+0x168>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800684e:	2301      	movs	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	e004      	b.n	800685e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006854:	4b0e      	ldr	r3, [pc, #56]	; (8006890 <xTaskIncrementTick+0x16c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3301      	adds	r3, #1
 800685a:	4a0d      	ldr	r2, [pc, #52]	; (8006890 <xTaskIncrementTick+0x16c>)
 800685c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800685e:	697b      	ldr	r3, [r7, #20]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	2000061c 	.word	0x2000061c
 800686c:	200005f8 	.word	0x200005f8
 8006870:	200005ac 	.word	0x200005ac
 8006874:	200005b0 	.word	0x200005b0
 8006878:	2000060c 	.word	0x2000060c
 800687c:	20000614 	.word	0x20000614
 8006880:	200005fc 	.word	0x200005fc
 8006884:	200004f8 	.word	0x200004f8
 8006888:	200004f4 	.word	0x200004f4
 800688c:	20000608 	.word	0x20000608
 8006890:	20000604 	.word	0x20000604

08006894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800689a:	4b27      	ldr	r3, [pc, #156]	; (8006938 <vTaskSwitchContext+0xa4>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068a2:	4b26      	ldr	r3, [pc, #152]	; (800693c <vTaskSwitchContext+0xa8>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068a8:	e03f      	b.n	800692a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80068aa:	4b24      	ldr	r3, [pc, #144]	; (800693c <vTaskSwitchContext+0xa8>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b0:	4b23      	ldr	r3, [pc, #140]	; (8006940 <vTaskSwitchContext+0xac>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	fab3 f383 	clz	r3, r3
 80068bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80068be:	7afb      	ldrb	r3, [r7, #11]
 80068c0:	f1c3 031f 	rsb	r3, r3, #31
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	491f      	ldr	r1, [pc, #124]	; (8006944 <vTaskSwitchContext+0xb0>)
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10a      	bne.n	80068f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	607b      	str	r3, [r7, #4]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vTaskSwitchContext+0x5a>
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4a12      	ldr	r2, [pc, #72]	; (8006944 <vTaskSwitchContext+0xb0>)
 80068fc:	4413      	add	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	3308      	adds	r3, #8
 8006912:	429a      	cmp	r2, r3
 8006914:	d104      	bne.n	8006920 <vTaskSwitchContext+0x8c>
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	605a      	str	r2, [r3, #4]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	4a08      	ldr	r2, [pc, #32]	; (8006948 <vTaskSwitchContext+0xb4>)
 8006928:	6013      	str	r3, [r2, #0]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	2000061c 	.word	0x2000061c
 800693c:	20000608 	.word	0x20000608
 8006940:	200005fc 	.word	0x200005fc
 8006944:	200004f8 	.word	0x200004f8
 8006948:	200004f4 	.word	0x200004f4

0800694c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006954:	f000 f852 	bl	80069fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006958:	4b06      	ldr	r3, [pc, #24]	; (8006974 <prvIdleTask+0x28>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d9f9      	bls.n	8006954 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <prvIdleTask+0x2c>)
 8006962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006970:	e7f0      	b.n	8006954 <prvIdleTask+0x8>
 8006972:	bf00      	nop
 8006974:	200004f8 	.word	0x200004f8
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006982:	2300      	movs	r3, #0
 8006984:	607b      	str	r3, [r7, #4]
 8006986:	e00c      	b.n	80069a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4a12      	ldr	r2, [pc, #72]	; (80069dc <prvInitialiseTaskLists+0x60>)
 8006994:	4413      	add	r3, r2
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fab1 	bl	8005efe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3301      	adds	r3, #1
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b06      	cmp	r3, #6
 80069a6:	d9ef      	bls.n	8006988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069a8:	480d      	ldr	r0, [pc, #52]	; (80069e0 <prvInitialiseTaskLists+0x64>)
 80069aa:	f7ff faa8 	bl	8005efe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069ae:	480d      	ldr	r0, [pc, #52]	; (80069e4 <prvInitialiseTaskLists+0x68>)
 80069b0:	f7ff faa5 	bl	8005efe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069b4:	480c      	ldr	r0, [pc, #48]	; (80069e8 <prvInitialiseTaskLists+0x6c>)
 80069b6:	f7ff faa2 	bl	8005efe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069ba:	480c      	ldr	r0, [pc, #48]	; (80069ec <prvInitialiseTaskLists+0x70>)
 80069bc:	f7ff fa9f 	bl	8005efe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069c0:	480b      	ldr	r0, [pc, #44]	; (80069f0 <prvInitialiseTaskLists+0x74>)
 80069c2:	f7ff fa9c 	bl	8005efe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069c6:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <prvInitialiseTaskLists+0x78>)
 80069c8:	4a05      	ldr	r2, [pc, #20]	; (80069e0 <prvInitialiseTaskLists+0x64>)
 80069ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069cc:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <prvInitialiseTaskLists+0x7c>)
 80069ce:	4a05      	ldr	r2, [pc, #20]	; (80069e4 <prvInitialiseTaskLists+0x68>)
 80069d0:	601a      	str	r2, [r3, #0]
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	200004f8 	.word	0x200004f8
 80069e0:	20000584 	.word	0x20000584
 80069e4:	20000598 	.word	0x20000598
 80069e8:	200005b4 	.word	0x200005b4
 80069ec:	200005c8 	.word	0x200005c8
 80069f0:	200005e0 	.word	0x200005e0
 80069f4:	200005ac 	.word	0x200005ac
 80069f8:	200005b0 	.word	0x200005b0

080069fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a02:	e019      	b.n	8006a38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a04:	f000 fa0e 	bl	8006e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a08:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <prvCheckTasksWaitingTermination+0x50>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fafc 	bl	8006012 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <prvCheckTasksWaitingTermination+0x54>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	4a0b      	ldr	r2, [pc, #44]	; (8006a50 <prvCheckTasksWaitingTermination+0x54>)
 8006a22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a24:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <prvCheckTasksWaitingTermination+0x58>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	4a0a      	ldr	r2, [pc, #40]	; (8006a54 <prvCheckTasksWaitingTermination+0x58>)
 8006a2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a2e:	f000 fa29 	bl	8006e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f810 	bl	8006a58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a38:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <prvCheckTasksWaitingTermination+0x58>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e1      	bne.n	8006a04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	200005c8 	.word	0x200005c8
 8006a50:	200005f4 	.word	0x200005f4
 8006a54:	200005dc 	.word	0x200005dc

08006a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d108      	bne.n	8006a7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fb86 	bl	8007180 <vPortFree>
				vPortFree( pxTCB );
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fb83 	bl	8007180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a7a:	e018      	b.n	8006aae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d103      	bne.n	8006a8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fb7a 	bl	8007180 <vPortFree>
	}
 8006a8c:	e00f      	b.n	8006aae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d00a      	beq.n	8006aae <prvDeleteTCB+0x56>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	60fb      	str	r3, [r7, #12]
}
 8006aaa:	bf00      	nop
 8006aac:	e7fe      	b.n	8006aac <prvDeleteTCB+0x54>
	}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <prvResetNextTaskUnblockTime+0x38>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <prvResetNextTaskUnblockTime+0x3c>)
 8006aca:	f04f 32ff 	mov.w	r2, #4294967295
 8006ace:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ad0:	e008      	b.n	8006ae4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad2:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <prvResetNextTaskUnblockTime+0x38>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a04      	ldr	r2, [pc, #16]	; (8006af4 <prvResetNextTaskUnblockTime+0x3c>)
 8006ae2:	6013      	str	r3, [r2, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	200005ac 	.word	0x200005ac
 8006af4:	20000614 	.word	0x20000614

08006af8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b02:	4b29      	ldr	r3, [pc, #164]	; (8006ba8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b08:	4b28      	ldr	r3, [pc, #160]	; (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff fa7f 	bl	8006012 <uxListRemove>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10b      	bne.n	8006b32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006b1a:	4b24      	ldr	r3, [pc, #144]	; (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	2201      	movs	r2, #1
 8006b22:	fa02 f303 	lsl.w	r3, r2, r3
 8006b26:	43da      	mvns	r2, r3
 8006b28:	4b21      	ldr	r3, [pc, #132]	; (8006bb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	4a20      	ldr	r2, [pc, #128]	; (8006bb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d10a      	bne.n	8006b50 <prvAddCurrentTaskToDelayedList+0x58>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b40:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	481a      	ldr	r0, [pc, #104]	; (8006bb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b4a:	f7ff fa05 	bl	8005f58 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b4e:	e026      	b.n	8006b9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4413      	add	r3, r2
 8006b56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b58:	4b14      	ldr	r3, [pc, #80]	; (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d209      	bcs.n	8006b7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b68:	4b13      	ldr	r3, [pc, #76]	; (8006bb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3304      	adds	r3, #4
 8006b72:	4619      	mov	r1, r3
 8006b74:	4610      	mov	r0, r2
 8006b76:	f7ff fa13 	bl	8005fa0 <vListInsert>
}
 8006b7a:	e010      	b.n	8006b9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b7c:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3304      	adds	r3, #4
 8006b86:	4619      	mov	r1, r3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	f7ff fa09 	bl	8005fa0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d202      	bcs.n	8006b9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006b98:	4a09      	ldr	r2, [pc, #36]	; (8006bc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6013      	str	r3, [r2, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	200005f8 	.word	0x200005f8
 8006bac:	200004f4 	.word	0x200004f4
 8006bb0:	200005fc 	.word	0x200005fc
 8006bb4:	200005e0 	.word	0x200005e0
 8006bb8:	200005b0 	.word	0x200005b0
 8006bbc:	200005ac 	.word	0x200005ac
 8006bc0:	20000614 	.word	0x20000614

08006bc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3b04      	subs	r3, #4
 8006bd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b04      	subs	r3, #4
 8006be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f023 0201 	bic.w	r2, r3, #1
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3b04      	subs	r3, #4
 8006bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bf4:	4a0c      	ldr	r2, [pc, #48]	; (8006c28 <pxPortInitialiseStack+0x64>)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3b14      	subs	r3, #20
 8006bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3b04      	subs	r3, #4
 8006c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f06f 0202 	mvn.w	r2, #2
 8006c12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3b20      	subs	r3, #32
 8006c18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	08006c2d 	.word	0x08006c2d

08006c2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c36:	4b12      	ldr	r3, [pc, #72]	; (8006c80 <prvTaskExitError+0x54>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d00a      	beq.n	8006c56 <prvTaskExitError+0x2a>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	60fb      	str	r3, [r7, #12]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <prvTaskExitError+0x28>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	60bb      	str	r3, [r7, #8]
}
 8006c68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c6a:	bf00      	nop
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0fc      	beq.n	8006c6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	20000010 	.word	0x20000010
	...

08006c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c90:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <pxCurrentTCBConst2>)
 8006c92:	6819      	ldr	r1, [r3, #0]
 8006c94:	6808      	ldr	r0, [r1, #0]
 8006c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9a:	f380 8809 	msr	PSP, r0
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f380 8811 	msr	BASEPRI, r0
 8006caa:	4770      	bx	lr
 8006cac:	f3af 8000 	nop.w

08006cb0 <pxCurrentTCBConst2>:
 8006cb0:	200004f4 	.word	0x200004f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006cb8:	4808      	ldr	r0, [pc, #32]	; (8006cdc <prvPortStartFirstTask+0x24>)
 8006cba:	6800      	ldr	r0, [r0, #0]
 8006cbc:	6800      	ldr	r0, [r0, #0]
 8006cbe:	f380 8808 	msr	MSP, r0
 8006cc2:	f04f 0000 	mov.w	r0, #0
 8006cc6:	f380 8814 	msr	CONTROL, r0
 8006cca:	b662      	cpsie	i
 8006ccc:	b661      	cpsie	f
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	df00      	svc	0
 8006cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cda:	bf00      	nop
 8006cdc:	e000ed08 	.word	0xe000ed08

08006ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ce6:	4b46      	ldr	r3, [pc, #280]	; (8006e00 <xPortStartScheduler+0x120>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a46      	ldr	r2, [pc, #280]	; (8006e04 <xPortStartScheduler+0x124>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d10a      	bne.n	8006d06 <xPortStartScheduler+0x26>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	613b      	str	r3, [r7, #16]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d06:	4b3e      	ldr	r3, [pc, #248]	; (8006e00 <xPortStartScheduler+0x120>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a3f      	ldr	r2, [pc, #252]	; (8006e08 <xPortStartScheduler+0x128>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d10a      	bne.n	8006d26 <xPortStartScheduler+0x46>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60fb      	str	r3, [r7, #12]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d26:	4b39      	ldr	r3, [pc, #228]	; (8006e0c <xPortStartScheduler+0x12c>)
 8006d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	22ff      	movs	r2, #255	; 0xff
 8006d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	4b31      	ldr	r3, [pc, #196]	; (8006e10 <xPortStartScheduler+0x130>)
 8006d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d4e:	4b31      	ldr	r3, [pc, #196]	; (8006e14 <xPortStartScheduler+0x134>)
 8006d50:	2207      	movs	r2, #7
 8006d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d54:	e009      	b.n	8006d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006d56:	4b2f      	ldr	r3, [pc, #188]	; (8006e14 <xPortStartScheduler+0x134>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	4a2d      	ldr	r2, [pc, #180]	; (8006e14 <xPortStartScheduler+0x134>)
 8006d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d6a:	78fb      	ldrb	r3, [r7, #3]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d72:	2b80      	cmp	r3, #128	; 0x80
 8006d74:	d0ef      	beq.n	8006d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d76:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <xPortStartScheduler+0x134>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f1c3 0307 	rsb	r3, r3, #7
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d00a      	beq.n	8006d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	60bb      	str	r3, [r7, #8]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d98:	4b1e      	ldr	r3, [pc, #120]	; (8006e14 <xPortStartScheduler+0x134>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <xPortStartScheduler+0x134>)
 8006da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006da2:	4b1c      	ldr	r3, [pc, #112]	; (8006e14 <xPortStartScheduler+0x134>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006daa:	4a1a      	ldr	r2, [pc, #104]	; (8006e14 <xPortStartScheduler+0x134>)
 8006dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006db6:	4b18      	ldr	r3, [pc, #96]	; (8006e18 <xPortStartScheduler+0x138>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a17      	ldr	r2, [pc, #92]	; (8006e18 <xPortStartScheduler+0x138>)
 8006dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006dc2:	4b15      	ldr	r3, [pc, #84]	; (8006e18 <xPortStartScheduler+0x138>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <xPortStartScheduler+0x138>)
 8006dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006dce:	f000 f8dd 	bl	8006f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006dd2:	4b12      	ldr	r3, [pc, #72]	; (8006e1c <xPortStartScheduler+0x13c>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006dd8:	f000 f8fc 	bl	8006fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ddc:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <xPortStartScheduler+0x140>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a0f      	ldr	r2, [pc, #60]	; (8006e20 <xPortStartScheduler+0x140>)
 8006de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006de8:	f7ff ff66 	bl	8006cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006dec:	f7ff fd52 	bl	8006894 <vTaskSwitchContext>
	prvTaskExitError();
 8006df0:	f7ff ff1c 	bl	8006c2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	e000ed00 	.word	0xe000ed00
 8006e04:	410fc271 	.word	0x410fc271
 8006e08:	410fc270 	.word	0x410fc270
 8006e0c:	e000e400 	.word	0xe000e400
 8006e10:	20000620 	.word	0x20000620
 8006e14:	20000624 	.word	0x20000624
 8006e18:	e000ed20 	.word	0xe000ed20
 8006e1c:	20000010 	.word	0x20000010
 8006e20:	e000ef34 	.word	0xe000ef34

08006e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	607b      	str	r3, [r7, #4]
}
 8006e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e3e:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <vPortEnterCritical+0x58>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3301      	adds	r3, #1
 8006e44:	4a0d      	ldr	r2, [pc, #52]	; (8006e7c <vPortEnterCritical+0x58>)
 8006e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e48:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <vPortEnterCritical+0x58>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d10f      	bne.n	8006e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e50:	4b0b      	ldr	r3, [pc, #44]	; (8006e80 <vPortEnterCritical+0x5c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	603b      	str	r3, [r7, #0]
}
 8006e6c:	bf00      	nop
 8006e6e:	e7fe      	b.n	8006e6e <vPortEnterCritical+0x4a>
	}
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	20000010 	.word	0x20000010
 8006e80:	e000ed04 	.word	0xe000ed04

08006e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e8a:	4b12      	ldr	r3, [pc, #72]	; (8006ed4 <vPortExitCritical+0x50>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <vPortExitCritical+0x24>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	607b      	str	r3, [r7, #4]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <vPortExitCritical+0x50>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	4a09      	ldr	r2, [pc, #36]	; (8006ed4 <vPortExitCritical+0x50>)
 8006eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006eb2:	4b08      	ldr	r3, [pc, #32]	; (8006ed4 <vPortExitCritical+0x50>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d105      	bne.n	8006ec6 <vPortExitCritical+0x42>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20000010 	.word	0x20000010
	...

08006ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ee0:	f3ef 8009 	mrs	r0, PSP
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <pxCurrentTCBConst>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	f01e 0f10 	tst.w	lr, #16
 8006ef0:	bf08      	it	eq
 8006ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efa:	6010      	str	r0, [r2, #0]
 8006efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f04:	f380 8811 	msr	BASEPRI, r0
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f7ff fcc0 	bl	8006894 <vTaskSwitchContext>
 8006f14:	f04f 0000 	mov.w	r0, #0
 8006f18:	f380 8811 	msr	BASEPRI, r0
 8006f1c:	bc09      	pop	{r0, r3}
 8006f1e:	6819      	ldr	r1, [r3, #0]
 8006f20:	6808      	ldr	r0, [r1, #0]
 8006f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f26:	f01e 0f10 	tst.w	lr, #16
 8006f2a:	bf08      	it	eq
 8006f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f30:	f380 8809 	msr	PSP, r0
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	f3af 8000 	nop.w

08006f40 <pxCurrentTCBConst>:
 8006f40:	200004f4 	.word	0x200004f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop

08006f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	607b      	str	r3, [r7, #4]
}
 8006f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f62:	f7ff fbdf 	bl	8006724 <xTaskIncrementTick>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <SysTick_Handler+0x40>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	2300      	movs	r3, #0
 8006f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	f383 8811 	msr	BASEPRI, r3
}
 8006f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f90:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <vPortSetupTimerInterrupt+0x34>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <vPortSetupTimerInterrupt+0x38>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <vPortSetupTimerInterrupt+0x3c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <vPortSetupTimerInterrupt+0x40>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	099b      	lsrs	r3, r3, #6
 8006fa8:	4a09      	ldr	r2, [pc, #36]	; (8006fd0 <vPortSetupTimerInterrupt+0x44>)
 8006faa:	3b01      	subs	r3, #1
 8006fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fae:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <vPortSetupTimerInterrupt+0x34>)
 8006fb0:	2207      	movs	r2, #7
 8006fb2:	601a      	str	r2, [r3, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	e000e010 	.word	0xe000e010
 8006fc4:	e000e018 	.word	0xe000e018
 8006fc8:	20000004 	.word	0x20000004
 8006fcc:	10624dd3 	.word	0x10624dd3
 8006fd0:	e000e014 	.word	0xe000e014

08006fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fe4 <vPortEnableVFP+0x10>
 8006fd8:	6801      	ldr	r1, [r0, #0]
 8006fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fde:	6001      	str	r1, [r0, #0]
 8006fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fe2:	bf00      	nop
 8006fe4:	e000ed88 	.word	0xe000ed88

08006fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	; 0x28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ff4:	f7ff fadc 	bl	80065b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ff8:	4b5b      	ldr	r3, [pc, #364]	; (8007168 <pvPortMalloc+0x180>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007000:	f000 f920 	bl	8007244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007004:	4b59      	ldr	r3, [pc, #356]	; (800716c <pvPortMalloc+0x184>)
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4013      	ands	r3, r2
 800700c:	2b00      	cmp	r3, #0
 800700e:	f040 8093 	bne.w	8007138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01d      	beq.n	8007054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007018:	2208      	movs	r2, #8
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4413      	add	r3, r2
 800701e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b00      	cmp	r3, #0
 8007028:	d014      	beq.n	8007054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f023 0307 	bic.w	r3, r3, #7
 8007030:	3308      	adds	r3, #8
 8007032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <pvPortMalloc+0x6c>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	617b      	str	r3, [r7, #20]
}
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d06e      	beq.n	8007138 <pvPortMalloc+0x150>
 800705a:	4b45      	ldr	r3, [pc, #276]	; (8007170 <pvPortMalloc+0x188>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d869      	bhi.n	8007138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007064:	4b43      	ldr	r3, [pc, #268]	; (8007174 <pvPortMalloc+0x18c>)
 8007066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007068:	4b42      	ldr	r3, [pc, #264]	; (8007174 <pvPortMalloc+0x18c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800706e:	e004      	b.n	800707a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d903      	bls.n	800708c <pvPortMalloc+0xa4>
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1f1      	bne.n	8007070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800708c:	4b36      	ldr	r3, [pc, #216]	; (8007168 <pvPortMalloc+0x180>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007092:	429a      	cmp	r2, r3
 8007094:	d050      	beq.n	8007138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2208      	movs	r2, #8
 800709c:	4413      	add	r3, r2
 800709e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	1ad2      	subs	r2, r2, r3
 80070b0:	2308      	movs	r3, #8
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d91f      	bls.n	80070f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <pvPortMalloc+0xf8>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	613b      	str	r3, [r7, #16]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	1ad2      	subs	r2, r2, r3
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070f2:	69b8      	ldr	r0, [r7, #24]
 80070f4:	f000 f908 	bl	8007308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070f8:	4b1d      	ldr	r3, [pc, #116]	; (8007170 <pvPortMalloc+0x188>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	4a1b      	ldr	r2, [pc, #108]	; (8007170 <pvPortMalloc+0x188>)
 8007104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007106:	4b1a      	ldr	r3, [pc, #104]	; (8007170 <pvPortMalloc+0x188>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <pvPortMalloc+0x190>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d203      	bcs.n	800711a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007112:	4b17      	ldr	r3, [pc, #92]	; (8007170 <pvPortMalloc+0x188>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a18      	ldr	r2, [pc, #96]	; (8007178 <pvPortMalloc+0x190>)
 8007118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	4b13      	ldr	r3, [pc, #76]	; (800716c <pvPortMalloc+0x184>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	431a      	orrs	r2, r3
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <pvPortMalloc+0x194>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	4a11      	ldr	r2, [pc, #68]	; (800717c <pvPortMalloc+0x194>)
 8007136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007138:	f7ff fa48 	bl	80065cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <pvPortMalloc+0x174>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	60fb      	str	r3, [r7, #12]
}
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <pvPortMalloc+0x172>
	return pvReturn;
 800715c:	69fb      	ldr	r3, [r7, #28]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3728      	adds	r7, #40	; 0x28
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20004230 	.word	0x20004230
 800716c:	20004244 	.word	0x20004244
 8007170:	20004234 	.word	0x20004234
 8007174:	20004228 	.word	0x20004228
 8007178:	20004238 	.word	0x20004238
 800717c:	2000423c 	.word	0x2000423c

08007180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d04d      	beq.n	800722e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007192:	2308      	movs	r3, #8
 8007194:	425b      	negs	r3, r3
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4413      	add	r3, r2
 800719a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	4b24      	ldr	r3, [pc, #144]	; (8007238 <vPortFree+0xb8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4013      	ands	r3, r2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <vPortFree+0x44>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	60fb      	str	r3, [r7, #12]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <vPortFree+0x62>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	60bb      	str	r3, [r7, #8]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	4b14      	ldr	r3, [pc, #80]	; (8007238 <vPortFree+0xb8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4013      	ands	r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01e      	beq.n	800722e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d11a      	bne.n	800722e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	4b0e      	ldr	r3, [pc, #56]	; (8007238 <vPortFree+0xb8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	43db      	mvns	r3, r3
 8007202:	401a      	ands	r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007208:	f7ff f9d2 	bl	80065b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	4b0a      	ldr	r3, [pc, #40]	; (800723c <vPortFree+0xbc>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4413      	add	r3, r2
 8007216:	4a09      	ldr	r2, [pc, #36]	; (800723c <vPortFree+0xbc>)
 8007218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800721a:	6938      	ldr	r0, [r7, #16]
 800721c:	f000 f874 	bl	8007308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007220:	4b07      	ldr	r3, [pc, #28]	; (8007240 <vPortFree+0xc0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3301      	adds	r3, #1
 8007226:	4a06      	ldr	r2, [pc, #24]	; (8007240 <vPortFree+0xc0>)
 8007228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800722a:	f7ff f9cf 	bl	80065cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800722e:	bf00      	nop
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20004244 	.word	0x20004244
 800723c:	20004234 	.word	0x20004234
 8007240:	20004240 	.word	0x20004240

08007244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800724a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800724e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007250:	4b27      	ldr	r3, [pc, #156]	; (80072f0 <prvHeapInit+0xac>)
 8007252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00c      	beq.n	8007278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3307      	adds	r3, #7
 8007262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 0307 	bic.w	r3, r3, #7
 800726a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	4a1f      	ldr	r2, [pc, #124]	; (80072f0 <prvHeapInit+0xac>)
 8007274:	4413      	add	r3, r2
 8007276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800727c:	4a1d      	ldr	r2, [pc, #116]	; (80072f4 <prvHeapInit+0xb0>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007282:	4b1c      	ldr	r3, [pc, #112]	; (80072f4 <prvHeapInit+0xb0>)
 8007284:	2200      	movs	r2, #0
 8007286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	4413      	add	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007290:	2208      	movs	r2, #8
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1a9b      	subs	r3, r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0307 	bic.w	r3, r3, #7
 800729e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <prvHeapInit+0xb4>)
 80072a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <prvHeapInit+0xb4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2200      	movs	r2, #0
 80072ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072ae:	4b12      	ldr	r3, [pc, #72]	; (80072f8 <prvHeapInit+0xb4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	1ad2      	subs	r2, r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072c4:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <prvHeapInit+0xb4>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <prvHeapInit+0xb8>)
 80072d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	4a09      	ldr	r2, [pc, #36]	; (8007300 <prvHeapInit+0xbc>)
 80072da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072dc:	4b09      	ldr	r3, [pc, #36]	; (8007304 <prvHeapInit+0xc0>)
 80072de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072e2:	601a      	str	r2, [r3, #0]
}
 80072e4:	bf00      	nop
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	20000628 	.word	0x20000628
 80072f4:	20004228 	.word	0x20004228
 80072f8:	20004230 	.word	0x20004230
 80072fc:	20004238 	.word	0x20004238
 8007300:	20004234 	.word	0x20004234
 8007304:	20004244 	.word	0x20004244

08007308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007310:	4b28      	ldr	r3, [pc, #160]	; (80073b4 <prvInsertBlockIntoFreeList+0xac>)
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	e002      	b.n	800731c <prvInsertBlockIntoFreeList+0x14>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d8f7      	bhi.n	8007316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	4413      	add	r3, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	429a      	cmp	r2, r3
 8007336:	d108      	bne.n	800734a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	441a      	add	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	441a      	add	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d118      	bne.n	8007390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d00d      	beq.n	8007386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	441a      	add	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e008      	b.n	8007398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007386:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e003      	b.n	8007398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	429a      	cmp	r2, r3
 800739e:	d002      	beq.n	80073a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073a6:	bf00      	nop
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20004228 	.word	0x20004228
 80073b8:	20004230 	.word	0x20004230

080073bc <memset>:
 80073bc:	4402      	add	r2, r0
 80073be:	4603      	mov	r3, r0
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d100      	bne.n	80073c6 <memset+0xa>
 80073c4:	4770      	bx	lr
 80073c6:	f803 1b01 	strb.w	r1, [r3], #1
 80073ca:	e7f9      	b.n	80073c0 <memset+0x4>

080073cc <__libc_init_array>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	4d0d      	ldr	r5, [pc, #52]	; (8007404 <__libc_init_array+0x38>)
 80073d0:	4c0d      	ldr	r4, [pc, #52]	; (8007408 <__libc_init_array+0x3c>)
 80073d2:	1b64      	subs	r4, r4, r5
 80073d4:	10a4      	asrs	r4, r4, #2
 80073d6:	2600      	movs	r6, #0
 80073d8:	42a6      	cmp	r6, r4
 80073da:	d109      	bne.n	80073f0 <__libc_init_array+0x24>
 80073dc:	4d0b      	ldr	r5, [pc, #44]	; (800740c <__libc_init_array+0x40>)
 80073de:	4c0c      	ldr	r4, [pc, #48]	; (8007410 <__libc_init_array+0x44>)
 80073e0:	f000 f818 	bl	8007414 <_init>
 80073e4:	1b64      	subs	r4, r4, r5
 80073e6:	10a4      	asrs	r4, r4, #2
 80073e8:	2600      	movs	r6, #0
 80073ea:	42a6      	cmp	r6, r4
 80073ec:	d105      	bne.n	80073fa <__libc_init_array+0x2e>
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f4:	4798      	blx	r3
 80073f6:	3601      	adds	r6, #1
 80073f8:	e7ee      	b.n	80073d8 <__libc_init_array+0xc>
 80073fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80073fe:	4798      	blx	r3
 8007400:	3601      	adds	r6, #1
 8007402:	e7f2      	b.n	80073ea <__libc_init_array+0x1e>
 8007404:	0800756c 	.word	0x0800756c
 8007408:	0800756c 	.word	0x0800756c
 800740c:	0800756c 	.word	0x0800756c
 8007410:	08007570 	.word	0x08007570

08007414 <_init>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	bf00      	nop
 8007418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741a:	bc08      	pop	{r3}
 800741c:	469e      	mov	lr, r3
 800741e:	4770      	bx	lr

08007420 <_fini>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr
