
RTOS LTU Formula Electric 2023 Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000663c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006920  08006920  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006928  08006928  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004228  20000010  08006940  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004238  08006940  00024238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012af6  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9f  00000000  00000000  00032b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00035b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd9  00000000  00000000  00036d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024413  00000000  00000000  00037af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001483a  00000000  00000000  0005bf04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5942  00000000  00000000  0007073e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bcc  00000000  00000000  00156080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0015ac4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080067f4 	.word	0x080067f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080067f4 	.word	0x080067f4

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <orionFilterConfig>:

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
}

void orionFilterConfig()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef orionFilter;

	orionFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	623b      	str	r3, [r7, #32]
	orionFilter.FilterBank = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
	orionFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
	orionFilter.FilterIdHigh = 0x6CA<<5;
 8000d5a:	f64d 1340 	movw	r3, #55616	; 0xd940
 8000d5e:	603b      	str	r3, [r7, #0]
	orionFilter.FilterIdLow = 0x000;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
	orionFilter.FilterMaskIdHigh = 0x6CA<<5;
 8000d64:	f64d 1340 	movw	r3, #55616	; 0xd940
 8000d68:	60bb      	str	r3, [r7, #8]
	orionFilter.FilterMaskIdLow = 0x000;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
	orionFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
	orionFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
	orionFilter.SlaveStartFilterBank = 20;
 8000d76:	2314      	movs	r3, #20
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &orionFilter) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <orionFilterConfig+0x50>)
 8000d80:	f001 fe94 	bl	8002aac <HAL_CAN_ConfigFilter>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <orionFilterConfig+0x46>
	{
		Error_Handler();
 8000d8a:	f000 fecb 	bl	8001b24 <Error_Handler>
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000358 	.word	0x20000358

08000d9c <motorAndControllerTempFilterConfig>:
		Error_Handler();
	}
}

void motorAndControllerTempFilterConfig()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef tempFilter;

	tempFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000da2:	2301      	movs	r3, #1
 8000da4:	623b      	str	r3, [r7, #32]
	tempFilter.FilterBank = 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
	tempFilter.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	613b      	str	r3, [r7, #16]
	tempFilter.FilterIdHigh = 0x1BA<<5;
 8000dae:	f44f 535d 	mov.w	r3, #14144	; 0x3740
 8000db2:	603b      	str	r3, [r7, #0]
	tempFilter.FilterIdLow = 0x000;
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
	tempFilter.FilterMaskIdHigh = 0x1BA<<5;
 8000db8:	f44f 535d 	mov.w	r3, #14144	; 0x3740
 8000dbc:	60bb      	str	r3, [r7, #8]
	tempFilter.FilterMaskIdLow = 0x000;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
	tempFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
	tempFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61fb      	str	r3, [r7, #28]
	tempFilter.SlaveStartFilterBank = 20;
 8000dca:	2314      	movs	r3, #20
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &tempFilter) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <motorAndControllerTempFilterConfig+0x50>)
 8000dd4:	f001 fe6a 	bl	8002aac <HAL_CAN_ConfigFilter>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <motorAndControllerTempFilterConfig+0x46>
	{
		Error_Handler();
 8000dde:	f000 fea1 	bl	8001b24 <Error_Handler>
	}
}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000358 	.word	0x20000358

08000df0 <motorRPMFilterConfig>:

void motorRPMFilterConfig()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef rpmFilter;

	rpmFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
	rpmFilter.FilterBank = 2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	617b      	str	r3, [r7, #20]
	rpmFilter.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	613b      	str	r3, [r7, #16]
	rpmFilter.FilterIdHigh = 0x3FA<<5;
 8000e02:	f647 7340 	movw	r3, #32576	; 0x7f40
 8000e06:	603b      	str	r3, [r7, #0]
	rpmFilter.FilterIdLow = 0x000;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
	rpmFilter.FilterMaskIdHigh = 0x3FA<<5;
 8000e0c:	f647 7340 	movw	r3, #32576	; 0x7f40
 8000e10:	60bb      	str	r3, [r7, #8]
	rpmFilter.FilterMaskIdLow = 0x000;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
	rpmFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
	rpmFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
	rpmFilter.SlaveStartFilterBank = 20;
 8000e1e:	2314      	movs	r3, #20
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &rpmFilter) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <motorRPMFilterConfig+0x50>)
 8000e28:	f001 fe40 	bl	8002aac <HAL_CAN_ConfigFilter>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <motorRPMFilterConfig+0x46>
	{
		Error_Handler();
 8000e32:	f000 fe77 	bl	8001b24 <Error_Handler>
	}
}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000358 	.word	0x20000358

08000e44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <vApplicationGetIdleTaskMemory+0x30>)
 8000e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2000002c 	.word	0x2000002c
 8000e74:	20000080 	.word	0x20000080

08000e78 <ADC_GetAverageValue>:
void StartTask06(void const * argument);

/* USER CODE BEGIN PFP */

uint32_t ADC_GetAverageValue(ADC_HandleTypeDef* hadc, int numOfReadings)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b098      	sub	sp, #96	; 0x60
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]

	int max = 0, min = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e86:	2300      	movs	r3, #0
 8000e88:	65bb      	str	r3, [r7, #88]	; 0x58
	int maxIndex = 0, minIndex = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	657b      	str	r3, [r7, #84]	; 0x54
 8000e8e:	2300      	movs	r3, #0
 8000e90:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t data[10] = { 0 };
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2228      	movs	r2, #40	; 0x28
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f005 fc7e 	bl	800679c <memset>
	uint32_t sum = 0, average = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < numOfReadings; i++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8000eac:	e016      	b.n	8000edc <ADC_GetAverageValue+0x64>
	{
		HAL_ADC_Start(hadc);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f001 f934 	bl	800211c <HAL_ADC_Start>

		HAL_ADC_PollForConversion(hadc, 1);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f001 fa35 	bl	8002326 <HAL_ADC_PollForConversion>

		data[i] = HAL_ADC_GetValue(hadc);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f001 fabd 	bl	800243c <HAL_ADC_GetValue>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	3360      	adds	r3, #96	; 0x60
 8000eca:	443b      	add	r3, r7
 8000ecc:	f843 2c54 	str.w	r2, [r3, #-84]

		HAL_ADC_Stop(hadc);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f001 f9f5 	bl	80022c0 <HAL_ADC_Stop>
	for (int i = 0; i < numOfReadings; i++)
 8000ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ed8:	3301      	adds	r3, #1
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8000edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbe4      	blt.n	8000eae <ADC_GetAverageValue+0x36>
	}

	max = data[0];
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	65fb      	str	r3, [r7, #92]	; 0x5c

	for (int i = 1; i < 10; i++)
 8000ee8:	2301      	movs	r3, #1
 8000eea:	647b      	str	r3, [r7, #68]	; 0x44
 8000eec:	e014      	b.n	8000f18 <ADC_GetAverageValue+0xa0>
	{
		if (data[i] > max)
 8000eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	3360      	adds	r3, #96	; 0x60
 8000ef4:	443b      	add	r3, r7
 8000ef6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d908      	bls.n	8000f12 <ADC_GetAverageValue+0x9a>
		{
			max = data[i];
 8000f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	3360      	adds	r3, #96	; 0x60
 8000f06:	443b      	add	r3, r7
 8000f08:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
			maxIndex = i;
 8000f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f10:	657b      	str	r3, [r7, #84]	; 0x54
	for (int i = 1; i < 10; i++)
 8000f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f14:	3301      	adds	r3, #1
 8000f16:	647b      	str	r3, [r7, #68]	; 0x44
 8000f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f1a:	2b09      	cmp	r3, #9
 8000f1c:	dde7      	ble.n	8000eee <ADC_GetAverageValue+0x76>
		}
	}

	min = data[0];
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	65bb      	str	r3, [r7, #88]	; 0x58

	for (int i = 1; i < 10; i++)
 8000f22:	2301      	movs	r3, #1
 8000f24:	643b      	str	r3, [r7, #64]	; 0x40
 8000f26:	e014      	b.n	8000f52 <ADC_GetAverageValue+0xda>
	{
		if (data[i] < min)
 8000f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	3360      	adds	r3, #96	; 0x60
 8000f2e:	443b      	add	r3, r7
 8000f30:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d208      	bcs.n	8000f4c <ADC_GetAverageValue+0xd4>
		{
			min = data[i];
 8000f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	3360      	adds	r3, #96	; 0x60
 8000f40:	443b      	add	r3, r7
 8000f42:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000f46:	65bb      	str	r3, [r7, #88]	; 0x58
			minIndex = i;
 8000f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
	for (int i = 1; i < 10; i++)
 8000f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f4e:	3301      	adds	r3, #1
 8000f50:	643b      	str	r3, [r7, #64]	; 0x40
 8000f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f54:	2b09      	cmp	r3, #9
 8000f56:	dde7      	ble.n	8000f28 <ADC_GetAverageValue+0xb0>
		}
	}

	for (int i = 0; i < 10; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f5c:	e013      	b.n	8000f86 <ADC_GetAverageValue+0x10e>
	{
		if (i == minIndex || i == maxIndex)
 8000f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d00c      	beq.n	8000f80 <ADC_GetAverageValue+0x108>
 8000f66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d008      	beq.n	8000f80 <ADC_GetAverageValue+0x108>
		{

		}
		else
		{
			sum += data[i];
 8000f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	3360      	adds	r3, #96	; 0x60
 8000f74:	443b      	add	r3, r7
 8000f76:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000f7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f7c:	4413      	add	r3, r2
 8000f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i = 0; i < 10; i++)
 8000f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f82:	3301      	adds	r3, #1
 8000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f88:	2b09      	cmp	r3, #9
 8000f8a:	dde8      	ble.n	8000f5e <ADC_GetAverageValue+0xe6>
		}
	}

	average = sum / 8;
 8000f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f8e:	08db      	lsrs	r3, r3, #3
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34

	data[maxIndex] = average;
 8000f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	3360      	adds	r3, #96	; 0x60
 8000f98:	443b      	add	r3, r7
 8000f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f9c:	f843 2c54 	str.w	r2, [r3, #-84]

	data[minIndex] = average;
 8000fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	3360      	adds	r3, #96	; 0x60
 8000fa6:	443b      	add	r3, r7
 8000fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000faa:	f843 2c54 	str.w	r2, [r3, #-84]

	sum = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	64fb      	str	r3, [r7, #76]	; 0x4c

	for (int i = 0; i < 10; i++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fb6:	e00b      	b.n	8000fd0 <ADC_GetAverageValue+0x158>
	{
		sum += data[i];
 8000fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	3360      	adds	r3, #96	; 0x60
 8000fbe:	443b      	add	r3, r7
 8000fc0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000fc6:	4413      	add	r3, r2
 8000fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i = 0; i < 10; i++)
 8000fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fcc:	3301      	adds	r3, #1
 8000fce:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd2:	2b09      	cmp	r3, #9
 8000fd4:	ddf0      	ble.n	8000fb8 <ADC_GetAverageValue+0x140>
	}

	average = sum / 10;
 8000fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <ADC_GetAverageValue+0x174>)
 8000fda:	fba2 2303 	umull	r2, r3, r2, r3
 8000fde:	08db      	lsrs	r3, r3, #3
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34

	return (average);
 8000fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3760      	adds	r7, #96	; 0x60
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	cccccccd 	.word	0xcccccccd

08000ff0 <constrain>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

long constrain(long x, long out_min, long out_max)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
	if (x < out_min)
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	429a      	cmp	r2, r3
 8001002:	da01      	bge.n	8001008 <constrain+0x18>
	{
		x = out_min;
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60fb      	str	r3, [r7, #12]
	}

	if (x > out_max)
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	dd01      	ble.n	8001014 <constrain+0x24>
	{
		x = out_max;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	60fb      	str	r3, [r7, #12]
	}

	return x;
 8001014:	68fb      	ldr	r3, [r7, #12]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <primaryPotErrorCheck>:

void primaryPotErrorCheck()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	primaryPotValue = constrain(ADC_GetAverageValue(&hadc1, 10), 0, 1023);
 8001028:	210a      	movs	r1, #10
 800102a:	4811      	ldr	r0, [pc, #68]	; (8001070 <primaryPotErrorCheck+0x4c>)
 800102c:	f7ff ff24 	bl	8000e78 <ADC_GetAverageValue>
 8001030:	4603      	mov	r3, r0
 8001032:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ffd9 	bl	8000ff0 <constrain>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <primaryPotErrorCheck+0x50>)
 8001044:	601a      	str	r2, [r3, #0]

	if (primaryPotValue <= 0 || primaryPotValue >= 550)
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <primaryPotErrorCheck+0x50>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <primaryPotErrorCheck+0x36>
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <primaryPotErrorCheck+0x50>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f240 2225 	movw	r2, #549	; 0x225
 8001056:	4293      	cmp	r3, r2
 8001058:	d903      	bls.n	8001062 <primaryPotErrorCheck+0x3e>
	{
		errorSet[0] = true;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <primaryPotErrorCheck+0x54>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e003      	b.n	800106a <primaryPotErrorCheck+0x46>
	}
	else
	{
		errorSet[0] = false;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <primaryPotErrorCheck+0x54>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
	}
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000280 	.word	0x20000280
 8001074:	2000042c 	.word	0x2000042c
 8001078:	20000428 	.word	0x20000428

0800107c <secondaryPotErrorCheck>:

void secondaryPotErrorCheck()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	secondaryPotValue = constrain(ADC_GetAverageValue(&hadc2, 10), 0, 1023);
 8001080:	210a      	movs	r1, #10
 8001082:	4811      	ldr	r0, [pc, #68]	; (80010c8 <secondaryPotErrorCheck+0x4c>)
 8001084:	f7ff fef8 	bl	8000e78 <ADC_GetAverageValue>
 8001088:	4603      	mov	r3, r0
 800108a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ffad 	bl	8000ff0 <constrain>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <secondaryPotErrorCheck+0x50>)
 800109c:	601a      	str	r2, [r3, #0]

	if (secondaryPotValue <= 0 || secondaryPotValue >= 550)
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <secondaryPotErrorCheck+0x50>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <secondaryPotErrorCheck+0x36>
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <secondaryPotErrorCheck+0x50>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f240 2225 	movw	r2, #549	; 0x225
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d903      	bls.n	80010ba <secondaryPotErrorCheck+0x3e>
	{
		errorSet[1] = true;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <secondaryPotErrorCheck+0x54>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	705a      	strb	r2, [r3, #1]
 80010b8:	e003      	b.n	80010c2 <secondaryPotErrorCheck+0x46>
	}
	else
	{
		errorSet[1] = false;
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <secondaryPotErrorCheck+0x54>)
 80010bc:	2200      	movs	r2, #0
 80010be:	705a      	strb	r2, [r3, #1]
	}
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200002c8 	.word	0x200002c8
 80010cc:	20000430 	.word	0x20000430
 80010d0:	20000428 	.word	0x20000428

080010d4 <HAL_TIM_OC_DelayElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// RTD Speaker interrupt handler
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2110      	movs	r1, #16
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 80010e2:	f002 f87d 	bl	80031e0 <HAL_GPIO_WritePin>

	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 80010e6:	2100      	movs	r1, #0
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 80010ea:	f002 ffb3 	bl	8004054 <HAL_TIM_OC_Stop_IT>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40020400 	.word	0x40020400
 80010fc:	20000380 	.word	0x20000380

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b0aa      	sub	sp, #168	; 0xa8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f000 ff83 	bl	8002010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f8bf 	bl	800128c <SystemClock_Config>
  //vTraceEnable(TRC_START);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f000 fb7d 	bl	800180c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001112:	f000 f927 	bl	8001364 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001116:	f000 f979 	bl	800140c <MX_ADC2_Init>
  MX_CAN1_Init();
 800111a:	f000 fa1f 	bl	800155c <MX_CAN1_Init>
  MX_TIM2_Init();
 800111e:	f000 fa55 	bl	80015cc <MX_TIM2_Init>
  MX_TIM8_Init();
 8001122:	f000 fac7 	bl	80016b4 <MX_TIM8_Init>
  MX_ADC3_Init();
 8001126:	f000 f9c5 	bl	80014b4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800112a:	4847      	ldr	r0, [pc, #284]	; (8001248 <main+0x148>)
 800112c:	f001 fd9e 	bl	8002c6c <HAL_CAN_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001130:	2108      	movs	r1, #8
 8001132:	4846      	ldr	r0, [pc, #280]	; (800124c <main+0x14c>)
 8001134:	f003 f8a6 	bl	8004284 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001138:	210c      	movs	r1, #12
 800113a:	4844      	ldr	r0, [pc, #272]	; (800124c <main+0x14c>)
 800113c:	f003 f8a2 	bl	8004284 <HAL_TIM_PWM_Start>

  TIM8->CCR3 = 50;
 8001140:	4b43      	ldr	r3, [pc, #268]	; (8001250 <main+0x150>)
 8001142:	2232      	movs	r2, #50	; 0x32
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c

  TIM8->CCR4 = 50;
 8001146:	4b42      	ldr	r3, [pc, #264]	; (8001250 <main+0x150>)
 8001148:	2232      	movs	r2, #50	; 0x32
 800114a:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001152:	4840      	ldr	r0, [pc, #256]	; (8001254 <main+0x154>)
 8001154:	f002 f844 	bl	80031e0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	2120      	movs	r1, #32
 800115c:	483e      	ldr	r0, [pc, #248]	; (8001258 <main+0x158>)
 800115e:	f002 f83f 	bl	80031e0 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TorqueControl */
  osThreadDef(TorqueControl, StartDefaultTask, osPriorityNormal, 0, 200);
 8001162:	4b3e      	ldr	r3, [pc, #248]	; (800125c <main+0x15c>)
 8001164:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001168:	461d      	mov	r5, r3
 800116a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TorqueControlHandle = osThreadCreate(osThread(TorqueControl), NULL);
 8001176:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f004 f866 	bl	800524e <osThreadCreate>
 8001182:	4603      	mov	r3, r0
 8001184:	4a36      	ldr	r2, [pc, #216]	; (8001260 <main+0x160>)
 8001186:	6013      	str	r3, [r2, #0]

  /* definition and creation of NodeGuarding */
  osThreadDef(NodeGuarding, StartTask02, osPriorityAboveNormal, 0, 200);
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <main+0x164>)
 800118a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800118e:	461d      	mov	r5, r3
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001194:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001198:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NodeGuardingHandle = osThreadCreate(osThread(NodeGuarding), NULL);
 800119c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 f853 	bl	800524e <osThreadCreate>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <main+0x168>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of OrionData */
  osThreadDef(OrionData, StartTask04, osPriorityNormal, 0, 200);
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <main+0x16c>)
 80011b0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80011b4:	461d      	mov	r5, r3
 80011b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrionDataHandle = osThreadCreate(osThread(OrionData), NULL);
 80011c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 f840 	bl	800524e <osThreadCreate>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a27      	ldr	r2, [pc, #156]	; (8001270 <main+0x170>)
 80011d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of PWM */
  osThreadDef(PWM, StartTask05, osPriorityNormal, 0, 200);
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <main+0x174>)
 80011d6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80011da:	461d      	mov	r5, r3
 80011dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PWMHandle = osThreadCreate(osThread(PWM), NULL);
 80011e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 f82d 	bl	800524e <osThreadCreate>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a20      	ldr	r2, [pc, #128]	; (8001278 <main+0x178>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of OrionDerateData */
  osThreadDef(OrionDerateData, StartTask06, osPriorityNormal, 0, 200);
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <main+0x17c>)
 80011fc:	f107 041c 	add.w	r4, r7, #28
 8001200:	461d      	mov	r5, r3
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800120a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrionDerateDataHandle = osThreadCreate(osThread(OrionDerateData), NULL);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f004 f81a 	bl	800524e <osThreadCreate>
 800121a:	4603      	mov	r3, r0
 800121c:	4a18      	ldr	r2, [pc, #96]	; (8001280 <main+0x180>)
 800121e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Ignition */
  osThreadDef(Ignition, StartTask06, osPriorityNormal, 0, 200);
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <main+0x184>)
 8001222:	463c      	mov	r4, r7
 8001224:	461d      	mov	r5, r3
 8001226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800122e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IgnitionHandle = osThreadCreate(osThread(Ignition), NULL);
 8001232:	463b      	mov	r3, r7
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f004 f809 	bl	800524e <osThreadCreate>
 800123c:	4603      	mov	r3, r0
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <main+0x188>)
 8001240:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001242:	f003 fffd 	bl	8005240 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001246:	e7fe      	b.n	8001246 <main+0x146>
 8001248:	20000358 	.word	0x20000358
 800124c:	200003c8 	.word	0x200003c8
 8001250:	40010400 	.word	0x40010400
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800
 800125c:	0800681c 	.word	0x0800681c
 8001260:	20000410 	.word	0x20000410
 8001264:	08006848 	.word	0x08006848
 8001268:	20000414 	.word	0x20000414
 800126c:	08006870 	.word	0x08006870
 8001270:	20000418 	.word	0x20000418
 8001274:	08006890 	.word	0x08006890
 8001278:	2000041c 	.word	0x2000041c
 800127c:	080068bc 	.word	0x080068bc
 8001280:	20000420 	.word	0x20000420
 8001284:	080068e4 	.word	0x080068e4
 8001288:	20000424 	.word	0x20000424

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	; 0x50
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	2234      	movs	r2, #52	; 0x34
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f005 fa7e 	bl	800679c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <SystemClock_Config+0xd0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a28      	ldr	r2, [pc, #160]	; (800135c <SystemClock_Config+0xd0>)
 80012ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <SystemClock_Config+0xd0>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012cc:	2300      	movs	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <SystemClock_Config+0xd4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012d8:	4a21      	ldr	r2, [pc, #132]	; (8001360 <SystemClock_Config+0xd4>)
 80012da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <SystemClock_Config+0xd4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f0:	2301      	movs	r3, #1
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f4:	2310      	movs	r3, #16
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f8:	2302      	movs	r3, #2
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012fc:	2300      	movs	r3, #0
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001300:	2308      	movs	r3, #8
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001304:	235a      	movs	r3, #90	; 0x5a
 8001306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001308:	2302      	movs	r3, #2
 800130a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001310:	2302      	movs	r3, #2
 8001312:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4618      	mov	r0, r3
 800131a:	f002 fae3 	bl	80038e4 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001324:	f000 fbfe 	bl	8001b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	230f      	movs	r3, #15
 800132a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132c:	2302      	movs	r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2102      	movs	r1, #2
 8001344:	4618      	mov	r0, r3
 8001346:	f001 ff65 	bl	8003214 <HAL_RCC_ClockConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001350:	f000 fbe8 	bl	8001b24 <Error_Handler>
  }
}
 8001354:	bf00      	nop
 8001356:	3750      	adds	r7, #80	; 0x50
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40007000 	.word	0x40007000

08001364 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <MX_ADC1_Init+0x9c>)
 8001378:	4a22      	ldr	r2, [pc, #136]	; (8001404 <MX_ADC1_Init+0xa0>)
 800137a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_ADC1_Init+0x9c>)
 800137e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001382:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <MX_ADC1_Init+0x9c>)
 8001386:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800138a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_ADC1_Init+0x9c>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_ADC1_Init+0x9c>)
 8001394:	2200      	movs	r2, #0
 8001396:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_ADC1_Init+0x9c>)
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013a8:	4a17      	ldr	r2, [pc, #92]	; (8001408 <MX_ADC1_Init+0xa4>)
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013c8:	f000 fe64 	bl	8002094 <HAL_ADC_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80013d2:	f000 fba7 	bl	8001b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013d6:	230b      	movs	r3, #11
 80013d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80013de:	2303      	movs	r3, #3
 80013e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e2:	463b      	mov	r3, r7
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_ADC1_Init+0x9c>)
 80013e8:	f001 f836 	bl	8002458 <HAL_ADC_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80013f2:	f000 fb97 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000280 	.word	0x20000280
 8001404:	40012000 	.word	0x40012000
 8001408:	0f000001 	.word	0x0f000001

0800140c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001412:	463b      	mov	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <MX_ADC2_Init+0x9c>)
 8001420:	4a22      	ldr	r2, [pc, #136]	; (80014ac <MX_ADC2_Init+0xa0>)
 8001422:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <MX_ADC2_Init+0x9c>)
 8001426:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800142a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MX_ADC2_Init+0x9c>)
 800142e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001432:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_ADC2_Init+0x9c>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_ADC2_Init+0x9c>)
 800143c:	2200      	movs	r2, #0
 800143e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_ADC2_Init+0x9c>)
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_ADC2_Init+0x9c>)
 800144a:	2200      	movs	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_ADC2_Init+0x9c>)
 8001450:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <MX_ADC2_Init+0xa4>)
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_ADC2_Init+0x9c>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_ADC2_Init+0x9c>)
 800145c:	2201      	movs	r2, #1
 800145e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_ADC2_Init+0x9c>)
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_ADC2_Init+0x9c>)
 800146a:	2201      	movs	r2, #1
 800146c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800146e:	480e      	ldr	r0, [pc, #56]	; (80014a8 <MX_ADC2_Init+0x9c>)
 8001470:	f000 fe10 	bl	8002094 <HAL_ADC_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 800147a:	f000 fb53 	bl	8001b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800147e:	230c      	movs	r3, #12
 8001480:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001486:	2303      	movs	r3, #3
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <MX_ADC2_Init+0x9c>)
 8001490:	f000 ffe2 	bl	8002458 <HAL_ADC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 800149a:	f000 fb43 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200002c8 	.word	0x200002c8
 80014ac:	40012100 	.word	0x40012100
 80014b0:	0f000001 	.word	0x0f000001

080014b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_ADC3_Init+0x9c>)
 80014c8:	4a22      	ldr	r2, [pc, #136]	; (8001554 <MX_ADC3_Init+0xa0>)
 80014ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80014cc:	4b20      	ldr	r3, [pc, #128]	; (8001550 <MX_ADC3_Init+0x9c>)
 80014ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <MX_ADC3_Init+0x9c>)
 80014d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014da:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_ADC3_Init+0x9c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_ADC3_Init+0x9c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_ADC3_Init+0x9c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_ADC3_Init+0x9c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_ADC3_Init+0x9c>)
 80014f8:	4a17      	ldr	r2, [pc, #92]	; (8001558 <MX_ADC3_Init+0xa4>)
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_ADC3_Init+0x9c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_ADC3_Init+0x9c>)
 8001504:	2201      	movs	r2, #1
 8001506:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_ADC3_Init+0x9c>)
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_ADC3_Init+0x9c>)
 8001512:	2201      	movs	r2, #1
 8001514:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001516:	480e      	ldr	r0, [pc, #56]	; (8001550 <MX_ADC3_Init+0x9c>)
 8001518:	f000 fdbc 	bl	8002094 <HAL_ADC_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 8001522:	f000 faff 	bl	8001b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001526:	230d      	movs	r3, #13
 8001528:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800152e:	2303      	movs	r3, #3
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_ADC3_Init+0x9c>)
 8001538:	f000 ff8e 	bl	8002458 <HAL_ADC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8001542:	f000 faef 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000310 	.word	0x20000310
 8001554:	40012200 	.word	0x40012200
 8001558:	0f000001 	.word	0x0f000001

0800155c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <MX_CAN1_Init+0x68>)
 8001562:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <MX_CAN1_Init+0x6c>)
 8001564:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <MX_CAN1_Init+0x68>)
 8001568:	2205      	movs	r2, #5
 800156a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_CAN1_Init+0x68>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_CAN1_Init+0x68>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_CAN1_Init+0x68>)
 800157a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800157e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_CAN1_Init+0x68>)
 8001582:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001586:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_CAN1_Init+0x68>)
 800158a:	2200      	movs	r2, #0
 800158c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <MX_CAN1_Init+0x68>)
 8001590:	2200      	movs	r2, #0
 8001592:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_CAN1_Init+0x68>)
 8001596:	2200      	movs	r2, #0
 8001598:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <MX_CAN1_Init+0x68>)
 800159c:	2200      	movs	r2, #0
 800159e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_CAN1_Init+0x68>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <MX_CAN1_Init+0x68>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_CAN1_Init+0x68>)
 80015ae:	f001 f981 	bl	80028b4 <HAL_CAN_Init>
  {
    //Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  motorAndControllerTempFilterConfig();
 80015b2:	f7ff fbf3 	bl	8000d9c <motorAndControllerTempFilterConfig>

  motorRPMFilterConfig();
 80015b6:	f7ff fc1b 	bl	8000df0 <motorRPMFilterConfig>

  orionFilterConfig();
 80015ba:	f7ff fbc5 	bl	8000d48 <orionFilterConfig>

  //orionFilterConfig_1();

  /* USER CODE END CAN1_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000358 	.word	0x20000358
 80015c8:	40006400 	.word	0x40006400

080015cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	f107 0320 	add.w	r3, r7, #32
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <MX_TIM2_Init+0xe4>)
 80015fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001602:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000-1;
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <MX_TIM2_Init+0xe4>)
 8001606:	f244 624f 	movw	r2, #17999	; 0x464f
 800160a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <MX_TIM2_Init+0xe4>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001612:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <MX_TIM2_Init+0xe4>)
 8001614:	f242 720f 	movw	r2, #9999	; 0x270f
 8001618:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <MX_TIM2_Init+0xe4>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <MX_TIM2_Init+0xe4>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001626:	4822      	ldr	r0, [pc, #136]	; (80016b0 <MX_TIM2_Init+0xe4>)
 8001628:	f002 fbfa 	bl	8003e20 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001632:	f000 fa77 	bl	8001b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800163c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001640:	4619      	mov	r1, r3
 8001642:	481b      	ldr	r0, [pc, #108]	; (80016b0 <MX_TIM2_Init+0xe4>)
 8001644:	f003 f90c 	bl	8004860 <HAL_TIM_ConfigClockSource>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800164e:	f000 fa69 	bl	8001b24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001652:	4817      	ldr	r0, [pc, #92]	; (80016b0 <MX_TIM2_Init+0xe4>)
 8001654:	f002 fca4 	bl	8003fa0 <HAL_TIM_OC_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800165e:	f000 fa61 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4619      	mov	r1, r3
 8001670:	480f      	ldr	r0, [pc, #60]	; (80016b0 <MX_TIM2_Init+0xe4>)
 8001672:	f003 fceb 	bl	800504c <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800167c:	f000 fa52 	bl	8001b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8001684:	f242 7310 	movw	r3, #10000	; 0x2710
 8001688:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2200      	movs	r2, #0
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_TIM2_Init+0xe4>)
 800169a:	f002 ffc3 	bl	8004624 <HAL_TIM_OC_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80016a4:	f000 fa3e 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	3738      	adds	r7, #56	; 0x38
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000380 	.word	0x20000380

080016b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b096      	sub	sp, #88	; 0x58
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2220      	movs	r2, #32
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 f855 	bl	800679c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016f2:	4b44      	ldr	r3, [pc, #272]	; (8001804 <MX_TIM8_Init+0x150>)
 80016f4:	4a44      	ldr	r2, [pc, #272]	; (8001808 <MX_TIM8_Init+0x154>)
 80016f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 36-1;
 80016f8:	4b42      	ldr	r3, [pc, #264]	; (8001804 <MX_TIM8_Init+0x150>)
 80016fa:	2223      	movs	r2, #35	; 0x23
 80016fc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <MX_TIM8_Init+0x150>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8001704:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <MX_TIM8_Init+0x150>)
 8001706:	2263      	movs	r2, #99	; 0x63
 8001708:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <MX_TIM8_Init+0x150>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <MX_TIM8_Init+0x150>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <MX_TIM8_Init+0x150>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800171c:	4839      	ldr	r0, [pc, #228]	; (8001804 <MX_TIM8_Init+0x150>)
 800171e:	f002 fb7f 	bl	8003e20 <HAL_TIM_Base_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001728:	f000 f9fc 	bl	8001b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001730:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001732:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001736:	4619      	mov	r1, r3
 8001738:	4832      	ldr	r0, [pc, #200]	; (8001804 <MX_TIM8_Init+0x150>)
 800173a:	f003 f891 	bl	8004860 <HAL_TIM_ConfigClockSource>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001744:	f000 f9ee 	bl	8001b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001748:	482e      	ldr	r0, [pc, #184]	; (8001804 <MX_TIM8_Init+0x150>)
 800174a:	f002 fd41 	bl	80041d0 <HAL_TIM_PWM_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001754:	f000 f9e6 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001758:	2300      	movs	r3, #0
 800175a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001760:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001764:	4619      	mov	r1, r3
 8001766:	4827      	ldr	r0, [pc, #156]	; (8001804 <MX_TIM8_Init+0x150>)
 8001768:	f003 fc70 	bl	800504c <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001772:	f000 f9d7 	bl	8001b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001776:	2360      	movs	r3, #96	; 0x60
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001782:	2300      	movs	r3, #0
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	2208      	movs	r2, #8
 8001798:	4619      	mov	r1, r3
 800179a:	481a      	ldr	r0, [pc, #104]	; (8001804 <MX_TIM8_Init+0x150>)
 800179c:	f002 ff9e 	bl	80046dc <HAL_TIM_PWM_ConfigChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80017a6:	f000 f9bd 	bl	8001b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ae:	220c      	movs	r2, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	4814      	ldr	r0, [pc, #80]	; (8001804 <MX_TIM8_Init+0x150>)
 80017b4:	f002 ff92 	bl	80046dc <HAL_TIM_PWM_ConfigChannel>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80017be:	f000 f9b1 	bl	8001b24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	4807      	ldr	r0, [pc, #28]	; (8001804 <MX_TIM8_Init+0x150>)
 80017e6:	f003 fcad 	bl	8005144 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80017f0:	f000 f998 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <MX_TIM8_Init+0x150>)
 80017f6:	f000 faef 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 80017fa:	bf00      	nop
 80017fc:	3758      	adds	r7, #88	; 0x58
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200003c8 	.word	0x200003c8
 8001808:	40010400 	.word	0x40010400

0800180c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <MX_GPIO_Init+0x120>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a40      	ldr	r2, [pc, #256]	; (800192c <MX_GPIO_Init+0x120>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b3e      	ldr	r3, [pc, #248]	; (800192c <MX_GPIO_Init+0x120>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <MX_GPIO_Init+0x120>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a39      	ldr	r2, [pc, #228]	; (800192c <MX_GPIO_Init+0x120>)
 8001848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <MX_GPIO_Init+0x120>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b33      	ldr	r3, [pc, #204]	; (800192c <MX_GPIO_Init+0x120>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a32      	ldr	r2, [pc, #200]	; (800192c <MX_GPIO_Init+0x120>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <MX_GPIO_Init+0x120>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <MX_GPIO_Init+0x120>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a2b      	ldr	r2, [pc, #172]	; (800192c <MX_GPIO_Init+0x120>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b29      	ldr	r3, [pc, #164]	; (800192c <MX_GPIO_Init+0x120>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8001898:	4825      	ldr	r0, [pc, #148]	; (8001930 <MX_GPIO_Init+0x124>)
 800189a:	f001 fca1 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a4:	4823      	ldr	r0, [pc, #140]	; (8001934 <MX_GPIO_Init+0x128>)
 80018a6:	f001 fc9b 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2110      	movs	r1, #16
 80018ae:	4821      	ldr	r0, [pc, #132]	; (8001934 <MX_GPIO_Init+0x128>)
 80018b0:	f001 fc96 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11;
 80018b4:	f44f 6342 	mov.w	r3, #3104	; 0xc20
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018be:	2302      	movs	r3, #2
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c2:	2302      	movs	r3, #2
 80018c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <MX_GPIO_Init+0x124>)
 80018ce:	f001 faf3 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4813      	ldr	r0, [pc, #76]	; (8001934 <MX_GPIO_Init+0x128>)
 80018e6:	f001 fae7 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	480c      	ldr	r0, [pc, #48]	; (8001934 <MX_GPIO_Init+0x128>)
 8001904:	f001 fad8 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001908:	2310      	movs	r3, #16
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001910:	2302      	movs	r3, #2
 8001912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_GPIO_Init+0x128>)
 8001920:	f001 faca 	bl	8002eb8 <HAL_GPIO_Init>

}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	; 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40020800 	.word	0x40020800
 8001934:	40020400 	.word	0x40020400

08001938 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;
 8001940:	230a      	movs	r3, #10
 8001942:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8001944:	f004 f8d2 	bl	8005aec <xTaskGetTickCount>
 8001948:	4603      	mov	r3, r0
 800194a:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {

	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	68f9      	ldr	r1, [r7, #12]
 8001952:	4618      	mov	r0, r3
 8001954:	f003 ff0e 	bl	8005774 <vTaskDelayUntil>

	  //syncMessage();

	  vTaskDelay(pdMS_TO_TICKS(2));
 8001958:	2002      	movs	r0, #2
 800195a:	f003 ff89 	bl	8005870 <vTaskDelay>

	  //HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeaderFIFO1, data);

	  if (rxHeaderFIFO1.StdId == 0x3FA)
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <StartDefaultTask+0x70>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f240 32fa 	movw	r2, #1018	; 0x3fa
 8001966:	4293      	cmp	r3, r2
 8001968:	d109      	bne.n	800197e <StartDefaultTask+0x46>
	  {
		  rpm = ((int)(data[1]<<8) | (int)data[0]) - 32768;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <StartDefaultTask+0x74>)
 800196c:	785b      	ldrb	r3, [r3, #1]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <StartDefaultTask+0x74>)
 8001972:	7812      	ldrb	r2, [r2, #0]
 8001974:	4313      	orrs	r3, r2
 8001976:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800197a:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <StartDefaultTask+0x78>)
 800197c:	6013      	str	r3, [r2, #0]
	  }

	  //HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeaderFIFO1, data);

	  if (rxHeaderFIFO1.StdId == 0x1BA)
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <StartDefaultTask+0x70>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f5b3 7fdd 	cmp.w	r3, #442	; 0x1ba
 8001986:	d109      	bne.n	800199c <StartDefaultTask+0x64>
	  {
		  motorControllerTemp = (int)data[0] - 40;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <StartDefaultTask+0x74>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	3b28      	subs	r3, #40	; 0x28
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <StartDefaultTask+0x7c>)
 8001990:	6013      	str	r3, [r2, #0]

		  motorTemp = (int)data[1] - 40;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <StartDefaultTask+0x74>)
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	3b28      	subs	r3, #40	; 0x28
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <StartDefaultTask+0x80>)
 800199a:	6013      	str	r3, [r2, #0]
	  }

	  primaryPotErrorCheck();
 800199c:	f7ff fb42 	bl	8001024 <primaryPotErrorCheck>

	  secondaryPotErrorCheck();
 80019a0:	f7ff fb6c 	bl	800107c <secondaryPotErrorCheck>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80019a4:	e7d2      	b.n	800194c <StartDefaultTask+0x14>
 80019a6:	bf00      	nop
 80019a8:	20000458 	.word	0x20000458
 80019ac:	20000474 	.word	0x20000474
 80019b0:	20000484 	.word	0x20000484
 80019b4:	2000048c 	.word	0x2000048c
 80019b8:	20000488 	.word	0x20000488

080019bc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 150;
 80019c4:	2396      	movs	r3, #150	; 0x96
 80019c6:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 80019c8:	f004 f890 	bl	8005aec <xTaskGetTickCount>
 80019cc:	4603      	mov	r3, r0
 80019ce:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	68f9      	ldr	r1, [r7, #12]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fecc 	bl	8005774 <vTaskDelayUntil>
 80019dc:	e7f8      	b.n	80019d0 <StartTask02+0x14>
	...

080019e0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 95;
 80019e8:	235f      	movs	r3, #95	; 0x5f
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	68f9      	ldr	r1, [r7, #12]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 febe 	bl	8005774 <vTaskDelayUntil>

	  //HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeaderFIFO0, dataFIFO0);

	  if (rxHeaderFIFO0.StdId == 0x6CA)
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <StartTask04+0x84>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f240 62ca 	movw	r2, #1738	; 0x6ca
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d1f3      	bne.n	80019ec <StartTask04+0xc>
	  {
		  packCurrent = ((dataFIFO0[0]<<8) | dataFIFO0[1]) / 100;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <StartTask04+0x88>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <StartTask04+0x88>)
 8001a0c:	7852      	ldrb	r2, [r2, #1]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <StartTask04+0x8c>)
 8001a12:	fb82 1203 	smull	r1, r2, r2, r3
 8001a16:	1152      	asrs	r2, r2, #5
 8001a18:	17db      	asrs	r3, r3, #31
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <StartTask04+0x90>)
 8001a20:	801a      	strh	r2, [r3, #0]

		  packStateOfCharge = ((dataFIFO0[2]<<8) | dataFIFO0[3]) / 100.0 * 2.0;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <StartTask04+0x88>)
 8001a24:	789b      	ldrb	r3, [r3, #2]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <StartTask04+0x88>)
 8001a2a:	78d2      	ldrb	r2, [r2, #3]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd40 	bl	80004b4 <__aeabi_i2d>
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <StartTask04+0x94>)
 8001a3a:	f7fe fecf 	bl	80007dc <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	f7fe fbe7 	bl	800021c <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7fe ffa9 	bl	80009ac <__aeabi_d2f>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <StartTask04+0x98>)
 8001a5e:	6013      	str	r3, [r2, #0]
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001a60:	e7c4      	b.n	80019ec <StartTask04+0xc>
 8001a62:	bf00      	nop
 8001a64:	20000434 	.word	0x20000434
 8001a68:	20000450 	.word	0x20000450
 8001a6c:	51eb851f 	.word	0x51eb851f
 8001a70:	20000480 	.word	0x20000480
 8001a74:	40590000 	.word	0x40590000
 8001a78:	2000047c 	.word	0x2000047c

08001a7c <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {

	  if (motorTemp > 30 || motorControllerTemp > 30)
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <StartTask05+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b1e      	cmp	r3, #30
 8001a8a:	dc03      	bgt.n	8001a94 <StartTask05+0x18>
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <StartTask05+0x68>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b1e      	cmp	r3, #30
 8001a92:	dd15      	ble.n	8001ac0 <StartTask05+0x44>
	  {
		  if (motorTemp > motorControllerTemp)
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <StartTask05+0x64>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <StartTask05+0x68>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	dd07      	ble.n	8001ab0 <StartTask05+0x34>
		  {
			  constrain(motorTemp, 25, 80);
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <StartTask05+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2250      	movs	r2, #80	; 0x50
 8001aa6:	2119      	movs	r1, #25
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff faa1 	bl	8000ff0 <constrain>
		  if (motorTemp > motorControllerTemp)
 8001aae:	e015      	b.n	8001adc <StartTask05+0x60>

			  //TIM8->CCR4 = fanPWM; // Fan
		  }
		  else
		  {
			  constrain(motorControllerTemp, 25, 55);
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <StartTask05+0x68>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2237      	movs	r2, #55	; 0x37
 8001ab6:	2119      	movs	r1, #25
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa99 	bl	8000ff0 <constrain>
		  if (motorTemp > motorControllerTemp)
 8001abe:	e00d      	b.n	8001adc <StartTask05+0x60>
			  //TIM8->CCR4 = fanPWM; // Fan
		  }
	  }
	  else
	  {
		  pumpPWM = 50;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <StartTask05+0x6c>)
 8001ac2:	2232      	movs	r2, #50	; 0x32
 8001ac4:	601a      	str	r2, [r3, #0]

		  fanPWM = 50;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <StartTask05+0x70>)
 8001ac8:	2232      	movs	r2, #50	; 0x32
 8001aca:	601a      	str	r2, [r3, #0]

		  TIM8->CCR3 = pumpPWM;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <StartTask05+0x6c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <StartTask05+0x74>)
 8001ad2:	63da      	str	r2, [r3, #60]	; 0x3c

		  TIM8->CCR4 = fanPWM;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <StartTask05+0x70>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <StartTask05+0x74>)
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
	  if (motorTemp > 30 || motorControllerTemp > 30)
 8001adc:	e7d2      	b.n	8001a84 <StartTask05+0x8>
 8001ade:	bf00      	nop
 8001ae0:	20000488 	.word	0x20000488
 8001ae4:	2000048c 	.word	0x2000048c
 8001ae8:	20000490 	.word	0x20000490
 8001aec:	20000494 	.word	0x20000494
 8001af0:	40010400 	.word	0x40010400

08001af4 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
 8001afc:	e7fe      	b.n	8001afc <StartTask06+0x8>
	...

08001b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b12:	f000 fa9f 	bl	8002054 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40000400 	.word	0x40000400

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <Error_Handler+0x8>
	...

08001b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_MspInit+0x54>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_MspInit+0x54>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_MspInit+0x54>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_MspInit+0x54>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_MspInit+0x54>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_MspInit+0x54>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	210f      	movs	r1, #15
 8001b72:	f06f 0001 	mvn.w	r0, #1
 8001b76:	f001 f975 	bl	8002e64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800

08001b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08e      	sub	sp, #56	; 0x38
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a45      	ldr	r2, [pc, #276]	; (8001cbc <HAL_ADC_MspInit+0x134>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d128      	bne.n	8001bfc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a43      	ldr	r2, [pc, #268]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a3c      	ldr	r2, [pc, #240]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001be2:	2302      	movs	r3, #2
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be6:	2303      	movs	r3, #3
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4833      	ldr	r0, [pc, #204]	; (8001cc4 <HAL_ADC_MspInit+0x13c>)
 8001bf6:	f001 f95f 	bl	8002eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001bfa:	e05a      	b.n	8001cb2 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a31      	ldr	r2, [pc, #196]	; (8001cc8 <HAL_ADC_MspInit+0x140>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d128      	bne.n	8001c58 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a2c      	ldr	r2, [pc, #176]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c42:	2303      	movs	r3, #3
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	481c      	ldr	r0, [pc, #112]	; (8001cc4 <HAL_ADC_MspInit+0x13c>)
 8001c52:	f001 f931 	bl	8002eb8 <HAL_GPIO_Init>
}
 8001c56:	e02c      	b.n	8001cb2 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <HAL_ADC_MspInit+0x144>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d127      	bne.n	8001cb2 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_ADC_MspInit+0x138>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_ADC_MspInit+0x13c>)
 8001cae:	f001 f903 	bl	8002eb8 <HAL_GPIO_Init>
}
 8001cb2:	bf00      	nop
 8001cb4:	3738      	adds	r7, #56	; 0x38
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40012100 	.word	0x40012100
 8001ccc:	40012200 	.word	0x40012200

08001cd0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <HAL_CAN_MspInit+0x84>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d12c      	bne.n	8001d4c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_CAN_MspInit+0x88>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_CAN_MspInit+0x88>)
 8001cfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_CAN_MspInit+0x88>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_CAN_MspInit+0x88>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_CAN_MspInit+0x88>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_CAN_MspInit+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d3c:	2309      	movs	r3, #9
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <HAL_CAN_MspInit+0x8c>)
 8001d48:	f001 f8b6 	bl	8002eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	; 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40006400 	.word	0x40006400
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000

08001d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d70:	d116      	bne.n	8001da0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2105      	movs	r1, #5
 8001d92:	201c      	movs	r0, #28
 8001d94:	f001 f866 	bl	8002e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d98:	201c      	movs	r0, #28
 8001d9a:	f001 f87f 	bl	8002e9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d9e:	e012      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM8)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <HAL_TIM_Base_MspInit+0x74>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10d      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_TIM_Base_MspInit+0x70>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <HAL_TIM_MspPostInit+0x68>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d11e      	bne.n	8001e38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_TIM_MspPostInit+0x6c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_TIM_MspPostInit+0x6c>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_TIM_MspPostInit+0x6c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	4619      	mov	r1, r3
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <HAL_TIM_MspPostInit+0x70>)
 8001e34:	f001 f840 	bl	8002eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001e38:	bf00      	nop
 8001e3a:	3720      	adds	r7, #32
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40010400 	.word	0x40010400
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020800 	.word	0x40020800

08001e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08e      	sub	sp, #56	; 0x38
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_InitTick+0xe4>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	4a32      	ldr	r2, [pc, #200]	; (8001f30 <HAL_InitTick+0xe4>)
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6c:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_InitTick+0xe4>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e78:	f107 0210 	add.w	r2, r7, #16
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 facc 	bl	8003420 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d103      	bne.n	8001e9a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e92:	f001 fab1 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8001e96:	6378      	str	r0, [r7, #52]	; 0x34
 8001e98:	e004      	b.n	8001ea4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e9a:	f001 faad 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <HAL_InitTick+0xe8>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	0c9b      	lsrs	r3, r3, #18
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_InitTick+0xec>)
 8001eb4:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <HAL_InitTick+0xf0>)
 8001eb6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_InitTick+0xec>)
 8001eba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ebe:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001ec0:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_InitTick+0xec>)
 8001ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_InitTick+0xec>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_InitTick+0xec>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_InitTick+0xec>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001ed8:	4817      	ldr	r0, [pc, #92]	; (8001f38 <HAL_InitTick+0xec>)
 8001eda:	f001 ffa1 	bl	8003e20 <HAL_TIM_Base_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d11b      	bne.n	8001f24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001eec:	4812      	ldr	r0, [pc, #72]	; (8001f38 <HAL_InitTick+0xec>)
 8001eee:	f001 ffe7 	bl	8003ec0 <HAL_TIM_Base_Start_IT>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d111      	bne.n	8001f24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f00:	201d      	movs	r0, #29
 8001f02:	f000 ffcb 	bl	8002e9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d808      	bhi.n	8001f1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	201d      	movs	r0, #29
 8001f12:	f000 ffa7 	bl	8002e64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_InitTick+0xf4>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	e002      	b.n	8001f24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3738      	adds	r7, #56	; 0x38
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	431bde83 	.word	0x431bde83
 8001f38:	20000498 	.word	0x20000498
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	20000004 	.word	0x20000004

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <NMI_Handler+0x4>

08001f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <HardFault_Handler+0x4>

08001f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <MemManage_Handler+0x4>

08001f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <BusFault_Handler+0x4>

08001f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <UsageFault_Handler+0x4>

08001f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <TIM2_IRQHandler+0x10>)
 8001f76:	f002 fa4d 	bl	8004414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000380 	.word	0x20000380

08001f84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <TIM3_IRQHandler+0x10>)
 8001f8a:	f002 fa43 	bl	8004414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000498 	.word	0x20000498

08001f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <SystemInit+0x20>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <SystemInit+0x20>)
 8001fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fc2:	490e      	ldr	r1, [pc, #56]	; (8001ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fc4:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fd8:	4c0b      	ldr	r4, [pc, #44]	; (8002008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fe6:	f7ff ffd7 	bl	8001f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fea:	f004 fbdf 	bl	80067ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fee:	f7ff f887 	bl	8001100 <main>
  bx  lr    
 8001ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ffc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002000:	08006930 	.word	0x08006930
  ldr r2, =_sbss
 8002004:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002008:	20004238 	.word	0x20004238

0800200c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC_IRQHandler>
	...

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_Init+0x40>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <HAL_Init+0x40>)
 800201a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_Init+0x40>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_Init+0x40>)
 8002026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_Init+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a07      	ldr	r2, [pc, #28]	; (8002050 <HAL_Init+0x40>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002038:	2003      	movs	r0, #3
 800203a:	f000 ff08 	bl	8002e4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203e:	200f      	movs	r0, #15
 8002040:	f7ff ff04 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002044:	f7ff fd74 	bl	8001b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023c00 	.word	0x40023c00

08002054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_IncTick+0x20>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_IncTick+0x24>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4413      	add	r3, r2
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <HAL_IncTick+0x24>)
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000008 	.word	0x20000008
 8002078:	200004e0 	.word	0x200004e0

0800207c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <HAL_GetTick+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	200004e0 	.word	0x200004e0

08002094 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e033      	b.n	8002112 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fd68 	bl	8001b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020da:	f023 0302 	bic.w	r3, r3, #2
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fae8 	bl	80026bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
 8002102:	e001      	b.n	8002108 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Start+0x1a>
 8002132:	2302      	movs	r3, #2
 8002134:	e0b2      	b.n	800229c <HAL_ADC_Start+0x180>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d018      	beq.n	800217e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800215c:	4b52      	ldr	r3, [pc, #328]	; (80022a8 <HAL_ADC_Start+0x18c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_ADC_Start+0x190>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0c9a      	lsrs	r2, r3, #18
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002170:	e002      	b.n	8002178 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3b01      	subs	r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f9      	bne.n	8002172 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d17a      	bne.n	8002282 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ca:	d106      	bne.n	80021da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f023 0206 	bic.w	r2, r3, #6
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44
 80021d8:	e002      	b.n	80021e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e8:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <HAL_ADC_Start+0x194>)
 80021ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d12a      	bne.n	8002258 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a2b      	ldr	r2, [pc, #172]	; (80022b4 <HAL_ADC_Start+0x198>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d015      	beq.n	8002238 <HAL_ADC_Start+0x11c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a29      	ldr	r2, [pc, #164]	; (80022b8 <HAL_ADC_Start+0x19c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d105      	bne.n	8002222 <HAL_ADC_Start+0x106>
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_ADC_Start+0x194>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a25      	ldr	r2, [pc, #148]	; (80022bc <HAL_ADC_Start+0x1a0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d136      	bne.n	800229a <HAL_ADC_Start+0x17e>
 800222c:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_ADC_Start+0x194>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d130      	bne.n	800229a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d129      	bne.n	800229a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	e020      	b.n	800229a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a15      	ldr	r2, [pc, #84]	; (80022b4 <HAL_ADC_Start+0x198>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d11b      	bne.n	800229a <HAL_ADC_Start+0x17e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d114      	bne.n	800229a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	e00b      	b.n	800229a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f043 0210 	orr.w	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	20000000 	.word	0x20000000
 80022ac:	431bde83 	.word	0x431bde83
 80022b0:	40012300 	.word	0x40012300
 80022b4:	40012000 	.word	0x40012000
 80022b8:	40012100 	.word	0x40012100
 80022bc:	40012200 	.word	0x40012200

080022c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Stop+0x16>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e021      	b.n	800231a <HAL_ADC_Stop+0x5a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002342:	d113      	bne.n	800236c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800234e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002352:	d10b      	bne.n	800236c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e063      	b.n	8002434 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800236c:	f7ff fe86 	bl	800207c <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002372:	e021      	b.n	80023b8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237a:	d01d      	beq.n	80023b8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_ADC_PollForConversion+0x6c>
 8002382:	f7ff fe7b 	bl	800207c <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d212      	bcs.n	80023b8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d00b      	beq.n	80023b8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e03d      	b.n	8002434 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d1d6      	bne.n	8002374 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0212 	mvn.w	r2, #18
 80023ce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d123      	bne.n	8002432 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d11f      	bne.n	8002432 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800240a:	2b00      	cmp	r3, #0
 800240c:	d111      	bne.n	8002432 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1c>
 8002470:	2302      	movs	r3, #2
 8002472:	e113      	b.n	800269c <HAL_ADC_ConfigChannel+0x244>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b09      	cmp	r3, #9
 8002482:	d925      	bls.n	80024d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68d9      	ldr	r1, [r3, #12]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	3b1e      	subs	r3, #30
 800249a:	2207      	movs	r2, #7
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43da      	mvns	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	400a      	ands	r2, r1
 80024a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68d9      	ldr	r1, [r3, #12]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	4603      	mov	r3, r0
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4403      	add	r3, r0
 80024c2:	3b1e      	subs	r3, #30
 80024c4:	409a      	lsls	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	e022      	b.n	8002516 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6919      	ldr	r1, [r3, #16]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	2207      	movs	r2, #7
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	400a      	ands	r2, r1
 80024f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6919      	ldr	r1, [r3, #16]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	4603      	mov	r3, r0
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4403      	add	r3, r0
 800250c:	409a      	lsls	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b06      	cmp	r3, #6
 800251c:	d824      	bhi.n	8002568 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b05      	subs	r3, #5
 8002530:	221f      	movs	r2, #31
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	400a      	ands	r2, r1
 800253e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	4618      	mov	r0, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b05      	subs	r3, #5
 800255a:	fa00 f203 	lsl.w	r2, r0, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
 8002566:	e04c      	b.n	8002602 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	d824      	bhi.n	80025ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b23      	subs	r3, #35	; 0x23
 8002582:	221f      	movs	r2, #31
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43da      	mvns	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	400a      	ands	r2, r1
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b23      	subs	r3, #35	; 0x23
 80025ac:	fa00 f203 	lsl.w	r2, r0, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
 80025b8:	e023      	b.n	8002602 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	3b41      	subs	r3, #65	; 0x41
 80025cc:	221f      	movs	r2, #31
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	400a      	ands	r2, r1
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b41      	subs	r3, #65	; 0x41
 80025f6:	fa00 f203 	lsl.w	r2, r0, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002602:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <HAL_ADC_ConfigChannel+0x250>)
 8002604:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a28      	ldr	r2, [pc, #160]	; (80026ac <HAL_ADC_ConfigChannel+0x254>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10f      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1d8>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b12      	cmp	r3, #18
 8002616:	d10b      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_ADC_ConfigChannel+0x254>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d12b      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x23a>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <HAL_ADC_ConfigChannel+0x258>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <HAL_ADC_ConfigChannel+0x1f4>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b11      	cmp	r3, #17
 800264a:	d122      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <HAL_ADC_ConfigChannel+0x258>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d111      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_ADC_ConfigChannel+0x25c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_ADC_ConfigChannel+0x260>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9a      	lsrs	r2, r3, #18
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002684:	e002      	b.n	800268c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3b01      	subs	r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f9      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40012300 	.word	0x40012300
 80026ac:	40012000 	.word	0x40012000
 80026b0:	10000012 	.word	0x10000012
 80026b4:	20000000 	.word	0x20000000
 80026b8:	431bde83 	.word	0x431bde83

080026bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c4:	4b79      	ldr	r3, [pc, #484]	; (80028ac <ADC_Init+0x1f0>)
 80026c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	021a      	lsls	r2, r3, #8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6899      	ldr	r1, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	4a58      	ldr	r2, [pc, #352]	; (80028b0 <ADC_Init+0x1f4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d022      	beq.n	800279a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002762:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6899      	ldr	r1, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6899      	ldr	r1, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e00f      	b.n	80027ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0202 	bic.w	r2, r2, #2
 80027c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7e1b      	ldrb	r3, [r3, #24]
 80027d4:	005a      	lsls	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01b      	beq.n	8002820 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002806:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	3b01      	subs	r3, #1
 8002814:	035a      	lsls	r2, r3, #13
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	e007      	b.n	8002830 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	3b01      	subs	r3, #1
 800284c:	051a      	lsls	r2, r3, #20
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6899      	ldr	r1, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002872:	025a      	lsls	r2, r3, #9
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	029a      	lsls	r2, r3, #10
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40012300 	.word	0x40012300
 80028b0:	0f000001 	.word	0x0f000001

080028b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0ed      	b.n	8002aa2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff f9fc 	bl	8001cd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e8:	f7ff fbc8 	bl	800207c <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028ee:	e012      	b.n	8002916 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028f0:	f7ff fbc4 	bl	800207c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b0a      	cmp	r3, #10
 80028fc:	d90b      	bls.n	8002916 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2205      	movs	r2, #5
 800290e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0c5      	b.n	8002aa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0e5      	beq.n	80028f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0202 	bic.w	r2, r2, #2
 8002932:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002934:	f7ff fba2 	bl	800207c <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800293a:	e012      	b.n	8002962 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800293c:	f7ff fb9e 	bl	800207c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b0a      	cmp	r3, #10
 8002948:	d90b      	bls.n	8002962 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2205      	movs	r2, #5
 800295a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e09f      	b.n	8002aa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e5      	bne.n	800293c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7e1b      	ldrb	r3, [r3, #24]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d108      	bne.n	800298a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e007      	b.n	800299a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7e5b      	ldrb	r3, [r3, #25]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d108      	bne.n	80029b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e007      	b.n	80029c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7e9b      	ldrb	r3, [r3, #26]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d108      	bne.n	80029de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0220 	orr.w	r2, r2, #32
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e007      	b.n	80029ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0220 	bic.w	r2, r2, #32
 80029ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	7edb      	ldrb	r3, [r3, #27]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d108      	bne.n	8002a08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0210 	bic.w	r2, r2, #16
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e007      	b.n	8002a18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0210 	orr.w	r2, r2, #16
 8002a16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7f1b      	ldrb	r3, [r3, #28]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d108      	bne.n	8002a32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0208 	orr.w	r2, r2, #8
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e007      	b.n	8002a42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0208 	bic.w	r2, r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7f5b      	ldrb	r3, [r3, #29]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d108      	bne.n	8002a5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0204 	orr.w	r2, r2, #4
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e007      	b.n	8002a6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0204 	bic.w	r2, r2, #4
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	ea42 0103 	orr.w	r1, r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	1e5a      	subs	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d003      	beq.n	8002ad2 <HAL_CAN_ConfigFilter+0x26>
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	f040 80be 	bne.w	8002c4e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002ad2:	4b65      	ldr	r3, [pc, #404]	; (8002c68 <HAL_CAN_ConfigFilter+0x1bc>)
 8002ad4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002aec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	431a      	orrs	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	2201      	movs	r2, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	401a      	ands	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d123      	bne.n	8002b7c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3248      	adds	r2, #72	; 0x48
 8002b5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b72:	6979      	ldr	r1, [r7, #20]
 8002b74:	3348      	adds	r3, #72	; 0x48
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d122      	bne.n	8002bca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ba4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	3248      	adds	r2, #72	; 0x48
 8002baa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bc0:	6979      	ldr	r1, [r7, #20]
 8002bc2:	3348      	adds	r3, #72	; 0x48
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	401a      	ands	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002be4:	e007      	b.n	8002bf6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	401a      	ands	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c10:	e007      	b.n	8002c22 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d107      	bne.n	8002c3a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c40:	f023 0201 	bic.w	r2, r3, #1
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e006      	b.n	8002c5c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40006400 	.word	0x40006400

08002c6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d12e      	bne.n	8002cde <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c98:	f7ff f9f0 	bl	800207c <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c9e:	e012      	b.n	8002cc6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ca0:	f7ff f9ec 	bl	800207c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b0a      	cmp	r3, #10
 8002cac:	d90b      	bls.n	8002cc6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2205      	movs	r2, #5
 8002cbe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e012      	b.n	8002cec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e5      	bne.n	8002ca0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e006      	b.n	8002cec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
  }
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d10:	4013      	ands	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d26:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	60d3      	str	r3, [r2, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <__NVIC_GetPriorityGrouping+0x18>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	f003 0307 	and.w	r3, r3, #7
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db0b      	blt.n	8002d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	f003 021f 	and.w	r2, r3, #31
 8002d70:	4907      	ldr	r1, [pc, #28]	; (8002d90 <__NVIC_EnableIRQ+0x38>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2001      	movs	r0, #1
 8002d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000e100 	.word	0xe000e100

08002d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db0a      	blt.n	8002dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	490c      	ldr	r1, [pc, #48]	; (8002de0 <__NVIC_SetPriority+0x4c>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	440b      	add	r3, r1
 8002db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dbc:	e00a      	b.n	8002dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4908      	ldr	r1, [pc, #32]	; (8002de4 <__NVIC_SetPriority+0x50>)
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	3b04      	subs	r3, #4
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	761a      	strb	r2, [r3, #24]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f1c3 0307 	rsb	r3, r3, #7
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	bf28      	it	cs
 8002e06:	2304      	movcs	r3, #4
 8002e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d902      	bls.n	8002e18 <NVIC_EncodePriority+0x30>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3b03      	subs	r3, #3
 8002e16:	e000      	b.n	8002e1a <NVIC_EncodePriority+0x32>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e30:	f04f 31ff 	mov.w	r1, #4294967295
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	43d9      	mvns	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	4313      	orrs	r3, r2
         );
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff ff4c 	bl	8002cf4 <__NVIC_SetPriorityGrouping>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e76:	f7ff ff61 	bl	8002d3c <__NVIC_GetPriorityGrouping>
 8002e7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	6978      	ldr	r0, [r7, #20]
 8002e82:	f7ff ffb1 	bl	8002de8 <NVIC_EncodePriority>
 8002e86:	4602      	mov	r2, r0
 8002e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ff80 	bl	8002d94 <__NVIC_SetPriority>
}
 8002e94:	bf00      	nop
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff54 	bl	8002d58 <__NVIC_EnableIRQ>
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	e165      	b.n	80031a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	f040 8154 	bne.w	800319a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d005      	beq.n	8002f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d130      	bne.n	8002f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f40:	2201      	movs	r2, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 0201 	and.w	r2, r3, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d017      	beq.n	8002fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d123      	bne.n	8002ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	08da      	lsrs	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3208      	adds	r2, #8
 8002fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	220f      	movs	r2, #15
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	08da      	lsrs	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3208      	adds	r2, #8
 8002ff6:	69b9      	ldr	r1, [r7, #24]
 8002ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0203 	and.w	r2, r3, #3
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80ae 	beq.w	800319a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b5d      	ldr	r3, [pc, #372]	; (80031b8 <HAL_GPIO_Init+0x300>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	4a5c      	ldr	r2, [pc, #368]	; (80031b8 <HAL_GPIO_Init+0x300>)
 8003048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800304c:	6453      	str	r3, [r2, #68]	; 0x44
 800304e:	4b5a      	ldr	r3, [pc, #360]	; (80031b8 <HAL_GPIO_Init+0x300>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800305a:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_GPIO_Init+0x304>)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	089b      	lsrs	r3, r3, #2
 8003060:	3302      	adds	r3, #2
 8003062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	220f      	movs	r2, #15
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a4f      	ldr	r2, [pc, #316]	; (80031c0 <HAL_GPIO_Init+0x308>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d025      	beq.n	80030d2 <HAL_GPIO_Init+0x21a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a4e      	ldr	r2, [pc, #312]	; (80031c4 <HAL_GPIO_Init+0x30c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d01f      	beq.n	80030ce <HAL_GPIO_Init+0x216>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4d      	ldr	r2, [pc, #308]	; (80031c8 <HAL_GPIO_Init+0x310>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d019      	beq.n	80030ca <HAL_GPIO_Init+0x212>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4c      	ldr	r2, [pc, #304]	; (80031cc <HAL_GPIO_Init+0x314>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <HAL_GPIO_Init+0x20e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <HAL_GPIO_Init+0x318>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00d      	beq.n	80030c2 <HAL_GPIO_Init+0x20a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4a      	ldr	r2, [pc, #296]	; (80031d4 <HAL_GPIO_Init+0x31c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d007      	beq.n	80030be <HAL_GPIO_Init+0x206>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a49      	ldr	r2, [pc, #292]	; (80031d8 <HAL_GPIO_Init+0x320>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d101      	bne.n	80030ba <HAL_GPIO_Init+0x202>
 80030b6:	2306      	movs	r3, #6
 80030b8:	e00c      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030ba:	2307      	movs	r3, #7
 80030bc:	e00a      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030be:	2305      	movs	r3, #5
 80030c0:	e008      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030c2:	2304      	movs	r3, #4
 80030c4:	e006      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e004      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e002      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030d2:	2300      	movs	r3, #0
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	f002 0203 	and.w	r2, r2, #3
 80030da:	0092      	lsls	r2, r2, #2
 80030dc:	4093      	lsls	r3, r2
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030e4:	4935      	ldr	r1, [pc, #212]	; (80031bc <HAL_GPIO_Init+0x304>)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	3302      	adds	r3, #2
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030f2:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <HAL_GPIO_Init+0x324>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003116:	4a31      	ldr	r2, [pc, #196]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800311c:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <HAL_GPIO_Init+0x324>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003140:	4a26      	ldr	r2, [pc, #152]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800316a:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <HAL_GPIO_Init+0x324>)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003194:	4a11      	ldr	r2, [pc, #68]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3301      	adds	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b0f      	cmp	r3, #15
 80031a4:	f67f ae96 	bls.w	8002ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3724      	adds	r7, #36	; 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40013800 	.word	0x40013800
 80031c0:	40020000 	.word	0x40020000
 80031c4:	40020400 	.word	0x40020400
 80031c8:	40020800 	.word	0x40020800
 80031cc:	40020c00 	.word	0x40020c00
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40021400 	.word	0x40021400
 80031d8:	40021800 	.word	0x40021800
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
 80031ec:	4613      	mov	r3, r2
 80031ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f0:	787b      	ldrb	r3, [r7, #1]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031fc:	e003      	b.n	8003206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	041a      	lsls	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	619a      	str	r2, [r3, #24]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0cc      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003228:	4b68      	ldr	r3, [pc, #416]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d90c      	bls.n	8003250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b65      	ldr	r3, [pc, #404]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b63      	ldr	r3, [pc, #396]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0b8      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003268:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4a58      	ldr	r2, [pc, #352]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003272:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003280:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800328a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328c:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	494d      	ldr	r1, [pc, #308]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d044      	beq.n	8003334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d119      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e07f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d2:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e06f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e2:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e067      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f2:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f023 0203 	bic.w	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4934      	ldr	r1, [pc, #208]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	4313      	orrs	r3, r2
 8003302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003304:	f7fe feba 	bl	800207c <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330a:	e00a      	b.n	8003322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330c:	f7fe feb6 	bl	800207c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e04f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 020c 	and.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	429a      	cmp	r2, r3
 8003332:	d1eb      	bne.n	800330c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d20c      	bcs.n	800335c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b22      	ldr	r3, [pc, #136]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e032      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4916      	ldr	r1, [pc, #88]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	490e      	ldr	r1, [pc, #56]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800339a:	f000 f873 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 800339e:	4602      	mov	r2, r0
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	490a      	ldr	r1, [pc, #40]	; (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	5ccb      	ldrb	r3, [r1, r3]
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fd46 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023c00 	.word	0x40023c00
 80033d0:	40023800 	.word	0x40023800
 80033d4:	08006908 	.word	0x08006908
 80033d8:	20000000 	.word	0x20000000
 80033dc:	20000004 	.word	0x20000004

080033e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000000 	.word	0x20000000

080033f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033fc:	f7ff fff0 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	0a9b      	lsrs	r3, r3, #10
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4903      	ldr	r1, [pc, #12]	; (800341c <HAL_RCC_GetPCLK1Freq+0x24>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	08006918 	.word	0x08006918

08003420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	220f      	movs	r2, #15
 800342e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	08db      	lsrs	r3, r3, #3
 800345a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <HAL_RCC_GetClockConfig+0x60>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 020f 	and.w	r2, r3, #15
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	40023c00 	.word	0x40023c00

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003488:	b0ae      	sub	sp, #184	; 0xb8
 800348a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034aa:	4bcb      	ldr	r3, [pc, #812]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	f200 8206 	bhi.w	80038c4 <HAL_RCC_GetSysClockFreq+0x440>
 80034b8:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	080038c5 	.word	0x080038c5
 80034c8:	080038c5 	.word	0x080038c5
 80034cc:	080038c5 	.word	0x080038c5
 80034d0:	080034fd 	.word	0x080034fd
 80034d4:	080038c5 	.word	0x080038c5
 80034d8:	080038c5 	.word	0x080038c5
 80034dc:	080038c5 	.word	0x080038c5
 80034e0:	08003505 	.word	0x08003505
 80034e4:	080038c5 	.word	0x080038c5
 80034e8:	080038c5 	.word	0x080038c5
 80034ec:	080038c5 	.word	0x080038c5
 80034f0:	080036f5 	.word	0x080036f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4bb9      	ldr	r3, [pc, #740]	; (80037dc <HAL_RCC_GetSysClockFreq+0x358>)
 80034f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80034fa:	e1e7      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fc:	4bb8      	ldr	r3, [pc, #736]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003502:	e1e3      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003504:	4bb4      	ldr	r3, [pc, #720]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800350c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003510:	4bb1      	ldr	r3, [pc, #708]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d071      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351c:	4bae      	ldr	r3, [pc, #696]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	099b      	lsrs	r3, r3, #6
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003528:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800352c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003534:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003538:	2300      	movs	r3, #0
 800353a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800353e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003542:	4622      	mov	r2, r4
 8003544:	462b      	mov	r3, r5
 8003546:	f04f 0000 	mov.w	r0, #0
 800354a:	f04f 0100 	mov.w	r1, #0
 800354e:	0159      	lsls	r1, r3, #5
 8003550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003554:	0150      	lsls	r0, r2, #5
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4621      	mov	r1, r4
 800355c:	1a51      	subs	r1, r2, r1
 800355e:	6439      	str	r1, [r7, #64]	; 0x40
 8003560:	4629      	mov	r1, r5
 8003562:	eb63 0301 	sbc.w	r3, r3, r1
 8003566:	647b      	str	r3, [r7, #68]	; 0x44
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003574:	4649      	mov	r1, r9
 8003576:	018b      	lsls	r3, r1, #6
 8003578:	4641      	mov	r1, r8
 800357a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800357e:	4641      	mov	r1, r8
 8003580:	018a      	lsls	r2, r1, #6
 8003582:	4641      	mov	r1, r8
 8003584:	1a51      	subs	r1, r2, r1
 8003586:	63b9      	str	r1, [r7, #56]	; 0x38
 8003588:	4649      	mov	r1, r9
 800358a:	eb63 0301 	sbc.w	r3, r3, r1
 800358e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800359c:	4649      	mov	r1, r9
 800359e:	00cb      	lsls	r3, r1, #3
 80035a0:	4641      	mov	r1, r8
 80035a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a6:	4641      	mov	r1, r8
 80035a8:	00ca      	lsls	r2, r1, #3
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	4622      	mov	r2, r4
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
 80035b6:	462b      	mov	r3, r5
 80035b8:	460a      	mov	r2, r1
 80035ba:	eb42 0303 	adc.w	r3, r2, r3
 80035be:	637b      	str	r3, [r7, #52]	; 0x34
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035cc:	4629      	mov	r1, r5
 80035ce:	024b      	lsls	r3, r1, #9
 80035d0:	4621      	mov	r1, r4
 80035d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035d6:	4621      	mov	r1, r4
 80035d8:	024a      	lsls	r2, r1, #9
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80035f0:	f7fd fa2c 	bl	8000a4c <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035fe:	e067      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003600:	4b75      	ldr	r3, [pc, #468]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	099b      	lsrs	r3, r3, #6
 8003606:	2200      	movs	r2, #0
 8003608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800360c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003610:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003618:	67bb      	str	r3, [r7, #120]	; 0x78
 800361a:	2300      	movs	r3, #0
 800361c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800361e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003622:	4622      	mov	r2, r4
 8003624:	462b      	mov	r3, r5
 8003626:	f04f 0000 	mov.w	r0, #0
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	0159      	lsls	r1, r3, #5
 8003630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003634:	0150      	lsls	r0, r2, #5
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4621      	mov	r1, r4
 800363c:	1a51      	subs	r1, r2, r1
 800363e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003640:	4629      	mov	r1, r5
 8003642:	eb63 0301 	sbc.w	r3, r3, r1
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003654:	4649      	mov	r1, r9
 8003656:	018b      	lsls	r3, r1, #6
 8003658:	4641      	mov	r1, r8
 800365a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800365e:	4641      	mov	r1, r8
 8003660:	018a      	lsls	r2, r1, #6
 8003662:	4641      	mov	r1, r8
 8003664:	ebb2 0a01 	subs.w	sl, r2, r1
 8003668:	4649      	mov	r1, r9
 800366a:	eb63 0b01 	sbc.w	fp, r3, r1
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800367a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800367e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003682:	4692      	mov	sl, r2
 8003684:	469b      	mov	fp, r3
 8003686:	4623      	mov	r3, r4
 8003688:	eb1a 0303 	adds.w	r3, sl, r3
 800368c:	623b      	str	r3, [r7, #32]
 800368e:	462b      	mov	r3, r5
 8003690:	eb4b 0303 	adc.w	r3, fp, r3
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036a2:	4629      	mov	r1, r5
 80036a4:	028b      	lsls	r3, r1, #10
 80036a6:	4621      	mov	r1, r4
 80036a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036ac:	4621      	mov	r1, r4
 80036ae:	028a      	lsls	r2, r1, #10
 80036b0:	4610      	mov	r0, r2
 80036b2:	4619      	mov	r1, r3
 80036b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036b8:	2200      	movs	r2, #0
 80036ba:	673b      	str	r3, [r7, #112]	; 0x70
 80036bc:	677a      	str	r2, [r7, #116]	; 0x74
 80036be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80036c2:	f7fd f9c3 	bl	8000a4c <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4613      	mov	r3, r2
 80036cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036d0:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	3301      	adds	r3, #1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80036e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036f2:	e0eb      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f4:	4b38      	ldr	r3, [pc, #224]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003700:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d06b      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370c:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	2200      	movs	r2, #0
 8003714:	66bb      	str	r3, [r7, #104]	; 0x68
 8003716:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371e:	663b      	str	r3, [r7, #96]	; 0x60
 8003720:	2300      	movs	r3, #0
 8003722:	667b      	str	r3, [r7, #100]	; 0x64
 8003724:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003728:	4622      	mov	r2, r4
 800372a:	462b      	mov	r3, r5
 800372c:	f04f 0000 	mov.w	r0, #0
 8003730:	f04f 0100 	mov.w	r1, #0
 8003734:	0159      	lsls	r1, r3, #5
 8003736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373a:	0150      	lsls	r0, r2, #5
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4621      	mov	r1, r4
 8003742:	1a51      	subs	r1, r2, r1
 8003744:	61b9      	str	r1, [r7, #24]
 8003746:	4629      	mov	r1, r5
 8003748:	eb63 0301 	sbc.w	r3, r3, r1
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800375a:	4659      	mov	r1, fp
 800375c:	018b      	lsls	r3, r1, #6
 800375e:	4651      	mov	r1, sl
 8003760:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003764:	4651      	mov	r1, sl
 8003766:	018a      	lsls	r2, r1, #6
 8003768:	4651      	mov	r1, sl
 800376a:	ebb2 0801 	subs.w	r8, r2, r1
 800376e:	4659      	mov	r1, fp
 8003770:	eb63 0901 	sbc.w	r9, r3, r1
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003780:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003784:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003788:	4690      	mov	r8, r2
 800378a:	4699      	mov	r9, r3
 800378c:	4623      	mov	r3, r4
 800378e:	eb18 0303 	adds.w	r3, r8, r3
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	462b      	mov	r3, r5
 8003796:	eb49 0303 	adc.w	r3, r9, r3
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80037a8:	4629      	mov	r1, r5
 80037aa:	024b      	lsls	r3, r1, #9
 80037ac:	4621      	mov	r1, r4
 80037ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037b2:	4621      	mov	r1, r4
 80037b4:	024a      	lsls	r2, r1, #9
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037be:	2200      	movs	r2, #0
 80037c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80037c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80037c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037c8:	f7fd f940 	bl	8000a4c <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4613      	mov	r3, r2
 80037d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037d6:	e065      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x420>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	00f42400 	.word	0x00f42400
 80037e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e4:	4b3d      	ldr	r3, [pc, #244]	; (80038dc <HAL_RCC_GetSysClockFreq+0x458>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	2200      	movs	r2, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	4611      	mov	r1, r2
 80037f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037f4:	653b      	str	r3, [r7, #80]	; 0x50
 80037f6:	2300      	movs	r3, #0
 80037f8:	657b      	str	r3, [r7, #84]	; 0x54
 80037fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80037fe:	4642      	mov	r2, r8
 8003800:	464b      	mov	r3, r9
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	0159      	lsls	r1, r3, #5
 800380c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003810:	0150      	lsls	r0, r2, #5
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4641      	mov	r1, r8
 8003818:	1a51      	subs	r1, r2, r1
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	4649      	mov	r1, r9
 800381e:	eb63 0301 	sbc.w	r3, r3, r1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003830:	4659      	mov	r1, fp
 8003832:	018b      	lsls	r3, r1, #6
 8003834:	4651      	mov	r1, sl
 8003836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383a:	4651      	mov	r1, sl
 800383c:	018a      	lsls	r2, r1, #6
 800383e:	4651      	mov	r1, sl
 8003840:	1a54      	subs	r4, r2, r1
 8003842:	4659      	mov	r1, fp
 8003844:	eb63 0501 	sbc.w	r5, r3, r1
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	00eb      	lsls	r3, r5, #3
 8003852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003856:	00e2      	lsls	r2, r4, #3
 8003858:	4614      	mov	r4, r2
 800385a:	461d      	mov	r5, r3
 800385c:	4643      	mov	r3, r8
 800385e:	18e3      	adds	r3, r4, r3
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	464b      	mov	r3, r9
 8003864:	eb45 0303 	adc.w	r3, r5, r3
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003876:	4629      	mov	r1, r5
 8003878:	028b      	lsls	r3, r1, #10
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003880:	4621      	mov	r1, r4
 8003882:	028a      	lsls	r2, r1, #10
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800388c:	2200      	movs	r2, #0
 800388e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003890:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003892:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003896:	f7fd f8d9 	bl	8000a4c <__aeabi_uldivmod>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4613      	mov	r3, r2
 80038a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038a4:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <HAL_RCC_GetSysClockFreq+0x458>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0f1b      	lsrs	r3, r3, #28
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80038b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038c2:	e003      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	37b8      	adds	r7, #184	; 0xb8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	00f42400 	.word	0x00f42400

080038e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e28d      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8083 	beq.w	8003a0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003904:	4b94      	ldr	r3, [pc, #592]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b04      	cmp	r3, #4
 800390e:	d019      	beq.n	8003944 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003910:	4b91      	ldr	r3, [pc, #580]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003918:	2b08      	cmp	r3, #8
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800391c:	4b8e      	ldr	r3, [pc, #568]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003928:	d00c      	beq.n	8003944 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d112      	bne.n	800395c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003942:	d10b      	bne.n	800395c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	4b84      	ldr	r3, [pc, #528]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05b      	beq.n	8003a08 <HAL_RCC_OscConfig+0x124>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d157      	bne.n	8003a08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e25a      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x90>
 8003966:	4b7c      	ldr	r3, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7b      	ldr	r2, [pc, #492]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e01d      	b.n	80039b0 <HAL_RCC_OscConfig+0xcc>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0xb4>
 800397e:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a75      	ldr	r2, [pc, #468]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b73      	ldr	r3, [pc, #460]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a72      	ldr	r2, [pc, #456]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0xcc>
 8003998:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a6e      	ldr	r2, [pc, #440]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b6c      	ldr	r3, [pc, #432]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6b      	ldr	r2, [pc, #428]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe fb60 	bl	800207c <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fe fb5c 	bl	800207c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e21f      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0xdc>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe fb4c 	bl	800207c <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fe fb48 	bl	800207c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e20b      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	4b57      	ldr	r3, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x104>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d06f      	beq.n	8003af6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a16:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d017      	beq.n	8003a52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a22:	4b4d      	ldr	r3, [pc, #308]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d105      	bne.n	8003a3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a2e:	4b4a      	ldr	r3, [pc, #296]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3a:	4b47      	ldr	r3, [pc, #284]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d11c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a46:	4b44      	ldr	r3, [pc, #272]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_OscConfig+0x186>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e1d3      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4937      	ldr	r1, [pc, #220]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	e03a      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a88:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <HAL_RCC_OscConfig+0x278>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fe faf5 	bl	800207c <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fe faf1 	bl	800207c <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e1b4      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4925      	ldr	r1, [pc, #148]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]
 8003ac8:	e015      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <HAL_RCC_OscConfig+0x278>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fad4 	bl	800207c <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7fe fad0 	bl	800207c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e193      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d036      	beq.n	8003b70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <HAL_RCC_OscConfig+0x27c>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fe fab4 	bl	800207c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b18:	f7fe fab0 	bl	800207c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e173      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x234>
 8003b36:	e01b      	b.n	8003b70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b38:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_RCC_OscConfig+0x27c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fe fa9d 	bl	800207c <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	e00e      	b.n	8003b64 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b46:	f7fe fa99 	bl	800207c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d907      	bls.n	8003b64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e15c      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	42470000 	.word	0x42470000
 8003b60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b64:	4b8a      	ldr	r3, [pc, #552]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ea      	bne.n	8003b46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8097 	beq.w	8003cac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b82:	4b83      	ldr	r3, [pc, #524]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	4b7f      	ldr	r3, [pc, #508]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	4a7e      	ldr	r2, [pc, #504]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9e:	4b7c      	ldr	r3, [pc, #496]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003baa:	2301      	movs	r3, #1
 8003bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bae:	4b79      	ldr	r3, [pc, #484]	; (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d118      	bne.n	8003bec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a75      	ldr	r2, [pc, #468]	; (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc6:	f7fe fa59 	bl	800207c <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bce:	f7fe fa55 	bl	800207c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e118      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	4b6c      	ldr	r3, [pc, #432]	; (8003d94 <HAL_RCC_OscConfig+0x4b0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCC_OscConfig+0x31e>
 8003bf4:	4b66      	ldr	r3, [pc, #408]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	4a65      	ldr	r2, [pc, #404]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003c00:	e01c      	b.n	8003c3c <HAL_RCC_OscConfig+0x358>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b05      	cmp	r3, #5
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x340>
 8003c0a:	4b61      	ldr	r3, [pc, #388]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a60      	ldr	r2, [pc, #384]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
 8003c16:	4b5e      	ldr	r3, [pc, #376]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a5d      	ldr	r2, [pc, #372]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0x358>
 8003c24:	4b5a      	ldr	r3, [pc, #360]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	4a59      	ldr	r2, [pc, #356]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c30:	4b57      	ldr	r3, [pc, #348]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a56      	ldr	r2, [pc, #344]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c36:	f023 0304 	bic.w	r3, r3, #4
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d015      	beq.n	8003c70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fe fa1a 	bl	800207c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fa16 	bl	800207c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0d7      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c62:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ee      	beq.n	8003c4c <HAL_RCC_OscConfig+0x368>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fe fa04 	bl	800207c <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c78:	f7fe fa00 	bl	800207c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0c1      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8e:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1ee      	bne.n	8003c78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d105      	bne.n	8003cac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	4a3a      	ldr	r2, [pc, #232]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80ad 	beq.w	8003e10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cb6:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d060      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d145      	bne.n	8003d56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b33      	ldr	r3, [pc, #204]	; (8003d98 <HAL_RCC_OscConfig+0x4b4>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fe f9d4 	bl	800207c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe f9d0 	bl	800207c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e093      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	019b      	lsls	r3, r3, #6
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	071b      	lsls	r3, r3, #28
 8003d22:	491b      	ldr	r1, [pc, #108]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_RCC_OscConfig+0x4b4>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fe f9a5 	bl	800207c <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fe f9a1 	bl	800207c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e064      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x452>
 8003d54:	e05c      	b.n	8003e10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <HAL_RCC_OscConfig+0x4b4>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe f98e 	bl	800207c <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fe f98a 	bl	800207c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e04d      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_RCC_OscConfig+0x4ac>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x480>
 8003d82:	e045      	b.n	8003e10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d107      	bne.n	8003d9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e040      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40007000 	.word	0x40007000
 8003d98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <HAL_RCC_OscConfig+0x538>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d030      	beq.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d129      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d122      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d119      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	3b01      	subs	r3, #1
 8003de6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d10f      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800

08003e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e041      	b.n	8003eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd ff8a 	bl	8001d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f000 fde4 	bl	8004a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d001      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e04e      	b.n	8003f76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d022      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f02:	d01d      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d018      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <HAL_TIM_Base_Start_IT+0xcc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d013      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00e      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1b      	ldr	r2, [pc, #108]	; (8003f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d009      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a19      	ldr	r2, [pc, #100]	; (8003f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d111      	bne.n	8003f64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d010      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0201 	orr.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f62:	e007      	b.n	8003f74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40010400 	.word	0x40010400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40001800 	.word	0x40001800

08003fa0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e041      	b.n	8004036 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f839 	bl	800403e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f000 fd24 	bl	8004a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b0c      	cmp	r3, #12
 8004066:	d841      	bhi.n	80040ec <HAL_TIM_OC_Stop_IT+0x98>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <HAL_TIM_OC_Stop_IT+0x1c>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	080040a5 	.word	0x080040a5
 8004074:	080040ed 	.word	0x080040ed
 8004078:	080040ed 	.word	0x080040ed
 800407c:	080040ed 	.word	0x080040ed
 8004080:	080040b7 	.word	0x080040b7
 8004084:	080040ed 	.word	0x080040ed
 8004088:	080040ed 	.word	0x080040ed
 800408c:	080040ed 	.word	0x080040ed
 8004090:	080040c9 	.word	0x080040c9
 8004094:	080040ed 	.word	0x080040ed
 8004098:	080040ed 	.word	0x080040ed
 800409c:	080040ed 	.word	0x080040ed
 80040a0:	080040db 	.word	0x080040db
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0202 	bic.w	r2, r2, #2
 80040b2:	60da      	str	r2, [r3, #12]
      break;
 80040b4:	e01d      	b.n	80040f2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0204 	bic.w	r2, r2, #4
 80040c4:	60da      	str	r2, [r3, #12]
      break;
 80040c6:	e014      	b.n	80040f2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0208 	bic.w	r2, r2, #8
 80040d6:	60da      	str	r2, [r3, #12]
      break;
 80040d8:	e00b      	b.n	80040f2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0210 	bic.w	r2, r2, #16
 80040e8:	60da      	str	r2, [r3, #12]
      break;
 80040ea:	e002      	b.n	80040f2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
      break;
 80040f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d161      	bne.n	80041bc <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2200      	movs	r2, #0
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f000 ff7d 	bl	8005000 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2f      	ldr	r2, [pc, #188]	; (80041c8 <HAL_TIM_OC_Stop_IT+0x174>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_TIM_OC_Stop_IT+0xc6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a2d      	ldr	r2, [pc, #180]	; (80041cc <HAL_TIM_OC_Stop_IT+0x178>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d101      	bne.n	800411e <HAL_TIM_OC_Stop_IT+0xca>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_TIM_OC_Stop_IT+0xcc>
 800411e:	2300      	movs	r3, #0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d017      	beq.n	8004154 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6a1a      	ldr	r2, [r3, #32]
 800412a:	f241 1311 	movw	r3, #4369	; 0x1111
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10f      	bne.n	8004154 <HAL_TIM_OC_Stop_IT+0x100>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6a1a      	ldr	r2, [r3, #32]
 800413a:	f240 4344 	movw	r3, #1092	; 0x444
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d107      	bne.n	8004154 <HAL_TIM_OC_Stop_IT+0x100>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6a1a      	ldr	r2, [r3, #32]
 800415a:	f241 1311 	movw	r3, #4369	; 0x1111
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10f      	bne.n	8004184 <HAL_TIM_OC_Stop_IT+0x130>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6a1a      	ldr	r2, [r3, #32]
 800416a:	f240 4344 	movw	r3, #1092	; 0x444
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d107      	bne.n	8004184 <HAL_TIM_OC_Stop_IT+0x130>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d104      	bne.n	8004194 <HAL_TIM_OC_Stop_IT+0x140>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004192:	e013      	b.n	80041bc <HAL_TIM_OC_Stop_IT+0x168>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b04      	cmp	r3, #4
 8004198:	d104      	bne.n	80041a4 <HAL_TIM_OC_Stop_IT+0x150>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a2:	e00b      	b.n	80041bc <HAL_TIM_OC_Stop_IT+0x168>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d104      	bne.n	80041b4 <HAL_TIM_OC_Stop_IT+0x160>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b2:	e003      	b.n	80041bc <HAL_TIM_OC_Stop_IT+0x168>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40010400 	.word	0x40010400

080041d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e041      	b.n	8004266 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f839 	bl	800426e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f000 fc0c 	bl	8004a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_TIM_PWM_Start+0x24>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e022      	b.n	80042ee <HAL_TIM_PWM_Start+0x6a>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d109      	bne.n	80042c2 <HAL_TIM_PWM_Start+0x3e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	e015      	b.n	80042ee <HAL_TIM_PWM_Start+0x6a>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d109      	bne.n	80042dc <HAL_TIM_PWM_Start+0x58>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e008      	b.n	80042ee <HAL_TIM_PWM_Start+0x6a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e07c      	b.n	80043f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <HAL_TIM_PWM_Start+0x82>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004304:	e013      	b.n	800432e <HAL_TIM_PWM_Start+0xaa>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b04      	cmp	r3, #4
 800430a:	d104      	bne.n	8004316 <HAL_TIM_PWM_Start+0x92>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004314:	e00b      	b.n	800432e <HAL_TIM_PWM_Start+0xaa>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d104      	bne.n	8004326 <HAL_TIM_PWM_Start+0xa2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004324:	e003      	b.n	800432e <HAL_TIM_PWM_Start+0xaa>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2201      	movs	r2, #1
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fe62 	bl	8005000 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <HAL_TIM_PWM_Start+0x174>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_TIM_PWM_Start+0xcc>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2c      	ldr	r2, [pc, #176]	; (80043fc <HAL_TIM_PWM_Start+0x178>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_TIM_PWM_Start+0xd0>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_TIM_PWM_Start+0xd2>
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <HAL_TIM_PWM_Start+0x174>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d022      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437c:	d01d      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <HAL_TIM_PWM_Start+0x17c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1d      	ldr	r2, [pc, #116]	; (8004404 <HAL_TIM_PWM_Start+0x180>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <HAL_TIM_PWM_Start+0x184>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a16      	ldr	r2, [pc, #88]	; (80043fc <HAL_TIM_PWM_Start+0x178>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a18      	ldr	r2, [pc, #96]	; (800440c <HAL_TIM_PWM_Start+0x188>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a16      	ldr	r2, [pc, #88]	; (8004410 <HAL_TIM_PWM_Start+0x18c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d111      	bne.n	80043de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b06      	cmp	r3, #6
 80043ca:	d010      	beq.n	80043ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043dc:	e007      	b.n	80043ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40010400 	.word	0x40010400
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000
 8004410:	40001800 	.word	0x40001800

08004414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d122      	bne.n	8004470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d11b      	bne.n	8004470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0202 	mvn.w	r2, #2
 8004440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fac9 	bl	80049ee <HAL_TIM_IC_CaptureCallback>
 800445c:	e005      	b.n	800446a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc fe38 	bl	80010d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 facc 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b04      	cmp	r3, #4
 800447c:	d122      	bne.n	80044c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b04      	cmp	r3, #4
 800448a:	d11b      	bne.n	80044c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0204 	mvn.w	r2, #4
 8004494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa9f 	bl	80049ee <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fc fe0e 	bl	80010d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 faa2 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d122      	bne.n	8004518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d11b      	bne.n	8004518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0208 	mvn.w	r2, #8
 80044e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2204      	movs	r2, #4
 80044ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa75 	bl	80049ee <HAL_TIM_IC_CaptureCallback>
 8004504:	e005      	b.n	8004512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fc fde4 	bl	80010d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fa78 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b10      	cmp	r3, #16
 8004524:	d122      	bne.n	800456c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b10      	cmp	r3, #16
 8004532:	d11b      	bne.n	800456c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0210 	mvn.w	r2, #16
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2208      	movs	r2, #8
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa4b 	bl	80049ee <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc fdba 	bl	80010d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fa4e 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d10e      	bne.n	8004598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d107      	bne.n	8004598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0201 	mvn.w	r2, #1
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fd fab4 	bl	8001b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d10e      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	2b80      	cmp	r3, #128	; 0x80
 80045b2:	d107      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fe1c 	bl	80051fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b40      	cmp	r3, #64	; 0x40
 80045d0:	d10e      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d107      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fa13 	bl	8004a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b20      	cmp	r3, #32
 800460a:	d107      	bne.n	800461c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0220 	mvn.w	r2, #32
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fde6 	bl	80051e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_TIM_OC_ConfigChannel+0x1e>
 800463e:	2302      	movs	r3, #2
 8004640:	e048      	b.n	80046d4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b0c      	cmp	r3, #12
 800464e:	d839      	bhi.n	80046c4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	0800468d 	.word	0x0800468d
 800465c:	080046c5 	.word	0x080046c5
 8004660:	080046c5 	.word	0x080046c5
 8004664:	080046c5 	.word	0x080046c5
 8004668:	0800469b 	.word	0x0800469b
 800466c:	080046c5 	.word	0x080046c5
 8004670:	080046c5 	.word	0x080046c5
 8004674:	080046c5 	.word	0x080046c5
 8004678:	080046a9 	.word	0x080046a9
 800467c:	080046c5 	.word	0x080046c5
 8004680:	080046c5 	.word	0x080046c5
 8004684:	080046c5 	.word	0x080046c5
 8004688:	080046b7 	.word	0x080046b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fa6a 	bl	8004b6c <TIM_OC1_SetConfig>
      break;
 8004698:	e017      	b.n	80046ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fad3 	bl	8004c4c <TIM_OC2_SetConfig>
      break;
 80046a6:	e010      	b.n	80046ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fb42 	bl	8004d38 <TIM_OC3_SetConfig>
      break;
 80046b4:	e009      	b.n	80046ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fbaf 	bl	8004e20 <TIM_OC4_SetConfig>
      break;
 80046c2:	e002      	b.n	80046ca <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	75fb      	strb	r3, [r7, #23]
      break;
 80046c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e0ae      	b.n	8004858 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b0c      	cmp	r3, #12
 8004706:	f200 809f 	bhi.w	8004848 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800470a:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004745 	.word	0x08004745
 8004714:	08004849 	.word	0x08004849
 8004718:	08004849 	.word	0x08004849
 800471c:	08004849 	.word	0x08004849
 8004720:	08004785 	.word	0x08004785
 8004724:	08004849 	.word	0x08004849
 8004728:	08004849 	.word	0x08004849
 800472c:	08004849 	.word	0x08004849
 8004730:	080047c7 	.word	0x080047c7
 8004734:	08004849 	.word	0x08004849
 8004738:	08004849 	.word	0x08004849
 800473c:	08004849 	.word	0x08004849
 8004740:	08004807 	.word	0x08004807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fa0e 	bl	8004b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0208 	orr.w	r2, r2, #8
 800475e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0204 	bic.w	r2, r2, #4
 800476e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6999      	ldr	r1, [r3, #24]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	619a      	str	r2, [r3, #24]
      break;
 8004782:	e064      	b.n	800484e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fa5e 	bl	8004c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6999      	ldr	r1, [r3, #24]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	021a      	lsls	r2, r3, #8
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	619a      	str	r2, [r3, #24]
      break;
 80047c4:	e043      	b.n	800484e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fab3 	bl	8004d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0208 	orr.w	r2, r2, #8
 80047e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0204 	bic.w	r2, r2, #4
 80047f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69d9      	ldr	r1, [r3, #28]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	61da      	str	r2, [r3, #28]
      break;
 8004804:	e023      	b.n	800484e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fb07 	bl	8004e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69d9      	ldr	r1, [r3, #28]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	021a      	lsls	r2, r3, #8
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	61da      	str	r2, [r3, #28]
      break;
 8004846:	e002      	b.n	800484e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	75fb      	strb	r3, [r7, #23]
      break;
 800484c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004856:	7dfb      	ldrb	r3, [r7, #23]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_TIM_ConfigClockSource+0x1c>
 8004878:	2302      	movs	r3, #2
 800487a:	e0b4      	b.n	80049e6 <HAL_TIM_ConfigClockSource+0x186>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800489a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b4:	d03e      	beq.n	8004934 <HAL_TIM_ConfigClockSource+0xd4>
 80048b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ba:	f200 8087 	bhi.w	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	f000 8086 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x172>
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ca:	d87f      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048cc:	2b70      	cmp	r3, #112	; 0x70
 80048ce:	d01a      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0xa6>
 80048d0:	2b70      	cmp	r3, #112	; 0x70
 80048d2:	d87b      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048d4:	2b60      	cmp	r3, #96	; 0x60
 80048d6:	d050      	beq.n	800497a <HAL_TIM_ConfigClockSource+0x11a>
 80048d8:	2b60      	cmp	r3, #96	; 0x60
 80048da:	d877      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b50      	cmp	r3, #80	; 0x50
 80048de:	d03c      	beq.n	800495a <HAL_TIM_ConfigClockSource+0xfa>
 80048e0:	2b50      	cmp	r3, #80	; 0x50
 80048e2:	d873      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d058      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x13a>
 80048e8:	2b40      	cmp	r3, #64	; 0x40
 80048ea:	d86f      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b30      	cmp	r3, #48	; 0x30
 80048ee:	d064      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15a>
 80048f0:	2b30      	cmp	r3, #48	; 0x30
 80048f2:	d86b      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d060      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15a>
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d867      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d05c      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15a>
 8004900:	2b10      	cmp	r3, #16
 8004902:	d05a      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15a>
 8004904:	e062      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6899      	ldr	r1, [r3, #8]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f000 fb53 	bl	8004fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	609a      	str	r2, [r3, #8]
      break;
 8004932:	e04f      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6899      	ldr	r1, [r3, #8]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f000 fb3c 	bl	8004fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004956:	609a      	str	r2, [r3, #8]
      break;
 8004958:	e03c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	461a      	mov	r2, r3
 8004968:	f000 fab0 	bl	8004ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2150      	movs	r1, #80	; 0x50
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fb09 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 8004978:	e02c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	461a      	mov	r2, r3
 8004988:	f000 facf 	bl	8004f2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2160      	movs	r1, #96	; 0x60
 8004992:	4618      	mov	r0, r3
 8004994:	f000 faf9 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 8004998:	e01c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6859      	ldr	r1, [r3, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f000 fa90 	bl	8004ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2140      	movs	r1, #64	; 0x40
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fae9 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 80049b8:	e00c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f000 fae0 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 80049ca:	e003      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      break;
 80049d0:	e000      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a40      	ldr	r2, [pc, #256]	; (8004b40 <TIM_Base_SetConfig+0x114>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d00f      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a3d      	ldr	r2, [pc, #244]	; (8004b44 <TIM_Base_SetConfig+0x118>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a3c      	ldr	r2, [pc, #240]	; (8004b48 <TIM_Base_SetConfig+0x11c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a3b      	ldr	r2, [pc, #236]	; (8004b4c <TIM_Base_SetConfig+0x120>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a3a      	ldr	r2, [pc, #232]	; (8004b50 <TIM_Base_SetConfig+0x124>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d108      	bne.n	8004a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <TIM_Base_SetConfig+0x114>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d02b      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8c:	d027      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2c      	ldr	r2, [pc, #176]	; (8004b44 <TIM_Base_SetConfig+0x118>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d023      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2b      	ldr	r2, [pc, #172]	; (8004b48 <TIM_Base_SetConfig+0x11c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01f      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a2a      	ldr	r2, [pc, #168]	; (8004b4c <TIM_Base_SetConfig+0x120>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d01b      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a29      	ldr	r2, [pc, #164]	; (8004b50 <TIM_Base_SetConfig+0x124>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d017      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a28      	ldr	r2, [pc, #160]	; (8004b54 <TIM_Base_SetConfig+0x128>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <TIM_Base_SetConfig+0x12c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00f      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <TIM_Base_SetConfig+0x130>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00b      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a25      	ldr	r2, [pc, #148]	; (8004b60 <TIM_Base_SetConfig+0x134>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d007      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <TIM_Base_SetConfig+0x138>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d003      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a23      	ldr	r2, [pc, #140]	; (8004b68 <TIM_Base_SetConfig+0x13c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d108      	bne.n	8004af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <TIM_Base_SetConfig+0x114>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_Base_SetConfig+0xf8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a0c      	ldr	r2, [pc, #48]	; (8004b50 <TIM_Base_SetConfig+0x124>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d103      	bne.n	8004b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	615a      	str	r2, [r3, #20]
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	40010400 	.word	0x40010400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40014400 	.word	0x40014400
 8004b5c:	40014800 	.word	0x40014800
 8004b60:	40001800 	.word	0x40001800
 8004b64:	40001c00 	.word	0x40001c00
 8004b68:	40002000 	.word	0x40002000

08004b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0201 	bic.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 0302 	bic.w	r3, r3, #2
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a20      	ldr	r2, [pc, #128]	; (8004c44 <TIM_OC1_SetConfig+0xd8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_OC1_SetConfig+0x64>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <TIM_OC1_SetConfig+0xdc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d10c      	bne.n	8004bea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0308 	bic.w	r3, r3, #8
 8004bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <TIM_OC1_SetConfig+0xd8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_OC1_SetConfig+0x8e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <TIM_OC1_SetConfig+0xdc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d111      	bne.n	8004c1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	621a      	str	r2, [r3, #32]
}
 8004c38:	bf00      	nop
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	40010000 	.word	0x40010000
 8004c48:	40010400 	.word	0x40010400

08004c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0210 	bic.w	r2, r3, #16
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	021b      	lsls	r3, r3, #8
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0320 	bic.w	r3, r3, #32
 8004c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <TIM_OC2_SetConfig+0xe4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <TIM_OC2_SetConfig+0x68>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <TIM_OC2_SetConfig+0xe8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10d      	bne.n	8004cd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <TIM_OC2_SetConfig+0xe4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_OC2_SetConfig+0x94>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <TIM_OC2_SetConfig+0xe8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d113      	bne.n	8004d08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40010000 	.word	0x40010000
 8004d34:	40010400 	.word	0x40010400

08004d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a21      	ldr	r2, [pc, #132]	; (8004e18 <TIM_OC3_SetConfig+0xe0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_OC3_SetConfig+0x66>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <TIM_OC3_SetConfig+0xe4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d10d      	bne.n	8004dba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <TIM_OC3_SetConfig+0xe0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC3_SetConfig+0x92>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <TIM_OC3_SetConfig+0xe4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d113      	bne.n	8004df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400

08004e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	031b      	lsls	r3, r3, #12
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a12      	ldr	r2, [pc, #72]	; (8004ec4 <TIM_OC4_SetConfig+0xa4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_OC4_SetConfig+0x68>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <TIM_OC4_SetConfig+0xa8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d109      	bne.n	8004e9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	019b      	lsls	r3, r3, #6
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40010400 	.word	0x40010400

08004ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f023 030a 	bic.w	r3, r3, #10
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b087      	sub	sp, #28
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0210 	bic.w	r2, r3, #16
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	031b      	lsls	r3, r3, #12
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f043 0307 	orr.w	r3, r3, #7
 8004fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	021a      	lsls	r2, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	609a      	str	r2, [r3, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2201      	movs	r2, #1
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1a      	ldr	r2, [r3, #32]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	43db      	mvns	r3, r3
 8005022:	401a      	ands	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	fa01 f303 	lsl.w	r3, r1, r3
 8005038:	431a      	orrs	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
	...

0800504c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005060:	2302      	movs	r3, #2
 8005062:	e05a      	b.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a21      	ldr	r2, [pc, #132]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b0:	d01d      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1d      	ldr	r2, [pc, #116]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d018      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1a      	ldr	r2, [pc, #104]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a18      	ldr	r2, [pc, #96]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a17      	ldr	r2, [pc, #92]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a15      	ldr	r2, [pc, #84]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d10c      	bne.n	8005108 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40010000 	.word	0x40010000
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40010400 	.word	0x40010400
 800513c:	40014000 	.word	0x40014000
 8005140:	40001800 	.word	0x40001800

08005144 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800515c:	2302      	movs	r3, #2
 800515e:	e03d      	b.n	80051dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800521e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005222:	2b84      	cmp	r3, #132	; 0x84
 8005224:	d005      	beq.n	8005232 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005226:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	3303      	adds	r3, #3
 8005230:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005232:	68fb      	ldr	r3, [r7, #12]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005244:	f000 fb48 	bl	80058d8 <vTaskStartScheduler>
  
  return osOK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	bd80      	pop	{r7, pc}

0800524e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800524e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005250:	b089      	sub	sp, #36	; 0x24
 8005252:	af04      	add	r7, sp, #16
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d020      	beq.n	80052a2 <osThreadCreate+0x54>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01c      	beq.n	80052a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685c      	ldr	r4, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691e      	ldr	r6, [r3, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff ffc8 	bl	8005210 <makeFreeRtosPriority>
 8005280:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800528a:	9202      	str	r2, [sp, #8]
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	9100      	str	r1, [sp, #0]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	4632      	mov	r2, r6
 8005294:	4629      	mov	r1, r5
 8005296:	4620      	mov	r0, r4
 8005298:	f000 f8d9 	bl	800544e <xTaskCreateStatic>
 800529c:	4603      	mov	r3, r0
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e01c      	b.n	80052dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685c      	ldr	r4, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052ae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff ffaa 	bl	8005210 <makeFreeRtosPriority>
 80052bc:	4602      	mov	r2, r0
 80052be:	f107 030c 	add.w	r3, r7, #12
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	9200      	str	r2, [sp, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	4632      	mov	r2, r6
 80052ca:	4629      	mov	r1, r5
 80052cc:	4620      	mov	r0, r4
 80052ce:	f000 f91b 	bl	8005508 <xTaskCreate>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d001      	beq.n	80052dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f103 0208 	add.w	r2, r3, #8
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f04f 32ff 	mov.w	r2, #4294967295
 80052fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f103 0208 	add.w	r2, r3, #8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f103 0208 	add.w	r2, r3, #8
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	601a      	str	r2, [r3, #0]
}
 800537c:	bf00      	nop
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d103      	bne.n	80053a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	e00c      	b.n	80053c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3308      	adds	r3, #8
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	e002      	b.n	80053b6 <vListInsert+0x2e>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d2f6      	bcs.n	80053b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	601a      	str	r2, [r3, #0]
}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6892      	ldr	r2, [r2, #8]
 8005410:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6852      	ldr	r2, [r2, #4]
 800541a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	429a      	cmp	r2, r3
 8005424:	d103      	bne.n	800542e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	1e5a      	subs	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800544e:	b580      	push	{r7, lr}
 8005450:	b08e      	sub	sp, #56	; 0x38
 8005452:	af04      	add	r7, sp, #16
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800545c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10a      	bne.n	8005494 <xTaskCreateStatic+0x46>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	61fb      	str	r3, [r7, #28]
}
 8005490:	bf00      	nop
 8005492:	e7fe      	b.n	8005492 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005494:	2354      	movs	r3, #84	; 0x54
 8005496:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b54      	cmp	r3, #84	; 0x54
 800549c:	d00a      	beq.n	80054b4 <xTaskCreateStatic+0x66>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	61bb      	str	r3, [r7, #24]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01e      	beq.n	80054fa <xTaskCreateStatic+0xac>
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01b      	beq.n	80054fa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054d4:	2300      	movs	r3, #0
 80054d6:	9303      	str	r3, [sp, #12]
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	9302      	str	r3, [sp, #8]
 80054dc:	f107 0314 	add.w	r3, r7, #20
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f850 	bl	8005592 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054f4:	f000 f8d4 	bl	80056a0 <prvAddNewTaskToReadyList>
 80054f8:	e001      	b.n	80054fe <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054fe:	697b      	ldr	r3, [r7, #20]
	}
 8005500:	4618      	mov	r0, r3
 8005502:	3728      	adds	r7, #40	; 0x28
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08c      	sub	sp, #48	; 0x30
 800550c:	af04      	add	r7, sp, #16
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4618      	mov	r0, r3
 800551e:	f000 ff53 	bl	80063c8 <pvPortMalloc>
 8005522:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00e      	beq.n	8005548 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800552a:	2054      	movs	r0, #84	; 0x54
 800552c:	f000 ff4c 	bl	80063c8 <pvPortMalloc>
 8005530:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
 800553e:	e005      	b.n	800554c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005540:	6978      	ldr	r0, [r7, #20]
 8005542:	f001 f80d 	bl	8006560 <vPortFree>
 8005546:	e001      	b.n	800554c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d017      	beq.n	8005582 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	2300      	movs	r3, #0
 800555e:	9303      	str	r3, [sp, #12]
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	9302      	str	r3, [sp, #8]
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f80e 	bl	8005592 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005576:	69f8      	ldr	r0, [r7, #28]
 8005578:	f000 f892 	bl	80056a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800557c:	2301      	movs	r3, #1
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	e002      	b.n	8005588 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
 8005586:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005588:	69bb      	ldr	r3, [r7, #24]
	}
 800558a:	4618      	mov	r0, r3
 800558c:	3720      	adds	r7, #32
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b088      	sub	sp, #32
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
 800559e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055aa:	3b01      	subs	r3, #1
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f023 0307 	bic.w	r3, r3, #7
 80055b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <prvInitialiseNewTask+0x48>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	617b      	str	r3, [r7, #20]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01f      	beq.n	8005620 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e012      	b.n	800560c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	7819      	ldrb	r1, [r3, #0]
 80055ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	3334      	adds	r3, #52	; 0x34
 80055f6:	460a      	mov	r2, r1
 80055f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	4413      	add	r3, r2
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	3301      	adds	r3, #1
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	2b0f      	cmp	r3, #15
 8005610:	d9e9      	bls.n	80055e6 <prvInitialiseNewTask+0x54>
 8005612:	e000      	b.n	8005616 <prvInitialiseNewTask+0x84>
			{
				break;
 8005614:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800561e:	e003      	b.n	8005628 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	2b06      	cmp	r3, #6
 800562c:	d901      	bls.n	8005632 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800562e:	2306      	movs	r3, #6
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005636:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	2200      	movs	r2, #0
 8005642:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	3304      	adds	r3, #4
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff fe6c 	bl	8005326 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	3318      	adds	r3, #24
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fe67 	bl	8005326 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	f1c3 0207 	rsb	r2, r3, #7
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800566c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	2200      	movs	r2, #0
 8005672:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	69b8      	ldr	r0, [r7, #24]
 8005682:	f000 fc93 	bl	8005fac <pxPortInitialiseStack>
 8005686:	4602      	mov	r2, r0
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005696:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005698:	bf00      	nop
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056a8:	f000 fdac 	bl	8006204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056ac:	4b2a      	ldr	r3, [pc, #168]	; (8005758 <prvAddNewTaskToReadyList+0xb8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	4a29      	ldr	r2, [pc, #164]	; (8005758 <prvAddNewTaskToReadyList+0xb8>)
 80056b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056b6:	4b29      	ldr	r3, [pc, #164]	; (800575c <prvAddNewTaskToReadyList+0xbc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d109      	bne.n	80056d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056be:	4a27      	ldr	r2, [pc, #156]	; (800575c <prvAddNewTaskToReadyList+0xbc>)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056c4:	4b24      	ldr	r3, [pc, #144]	; (8005758 <prvAddNewTaskToReadyList+0xb8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d110      	bne.n	80056ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056cc:	f000 fb4a 	bl	8005d64 <prvInitialiseTaskLists>
 80056d0:	e00d      	b.n	80056ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056d2:	4b23      	ldr	r3, [pc, #140]	; (8005760 <prvAddNewTaskToReadyList+0xc0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056da:	4b20      	ldr	r3, [pc, #128]	; (800575c <prvAddNewTaskToReadyList+0xbc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d802      	bhi.n	80056ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056e8:	4a1c      	ldr	r2, [pc, #112]	; (800575c <prvAddNewTaskToReadyList+0xbc>)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056ee:	4b1d      	ldr	r3, [pc, #116]	; (8005764 <prvAddNewTaskToReadyList+0xc4>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3301      	adds	r3, #1
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <prvAddNewTaskToReadyList+0xc4>)
 80056f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	2201      	movs	r2, #1
 80056fe:	409a      	lsls	r2, r3
 8005700:	4b19      	ldr	r3, [pc, #100]	; (8005768 <prvAddNewTaskToReadyList+0xc8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4313      	orrs	r3, r2
 8005706:	4a18      	ldr	r2, [pc, #96]	; (8005768 <prvAddNewTaskToReadyList+0xc8>)
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4a15      	ldr	r2, [pc, #84]	; (800576c <prvAddNewTaskToReadyList+0xcc>)
 8005718:	441a      	add	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3304      	adds	r3, #4
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f7ff fe0d 	bl	8005340 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005726:	f000 fd9d 	bl	8006264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800572a:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <prvAddNewTaskToReadyList+0xc0>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00e      	beq.n	8005750 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005732:	4b0a      	ldr	r3, [pc, #40]	; (800575c <prvAddNewTaskToReadyList+0xbc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	429a      	cmp	r2, r3
 800573e:	d207      	bcs.n	8005750 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <prvAddNewTaskToReadyList+0xd0>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	200005e4 	.word	0x200005e4
 800575c:	200004e4 	.word	0x200004e4
 8005760:	200005f0 	.word	0x200005f0
 8005764:	20000600 	.word	0x20000600
 8005768:	200005ec 	.word	0x200005ec
 800576c:	200004e8 	.word	0x200004e8
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800577e:	2300      	movs	r3, #0
 8005780:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <vTaskDelayUntil+0x2a>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	617b      	str	r3, [r7, #20]
}
 800579a:	bf00      	nop
 800579c:	e7fe      	b.n	800579c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <vTaskDelayUntil+0x46>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	613b      	str	r3, [r7, #16]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80057ba:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <vTaskDelayUntil+0xf0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <vTaskDelayUntil+0x64>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60fb      	str	r3, [r7, #12]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80057d8:	f000 f8de 	bl	8005998 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80057dc:	4b22      	ldr	r3, [pc, #136]	; (8005868 <vTaskDelayUntil+0xf4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	4413      	add	r3, r2
 80057ea:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a3a      	ldr	r2, [r7, #32]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d20b      	bcs.n	800580e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d211      	bcs.n	8005824 <vTaskDelayUntil+0xb0>
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	429a      	cmp	r2, r3
 8005806:	d90d      	bls.n	8005824 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005808:	2301      	movs	r3, #1
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
 800580c:	e00a      	b.n	8005824 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	429a      	cmp	r2, r3
 8005816:	d303      	bcc.n	8005820 <vTaskDelayUntil+0xac>
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	429a      	cmp	r2, r3
 800581e:	d901      	bls.n	8005824 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	d006      	beq.n	800583e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2100      	movs	r1, #0
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fb51 	bl	8005ee0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800583e:	f000 f8b9 	bl	80059b4 <xTaskResumeAll>
 8005842:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d107      	bne.n	800585a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800584a:	4b08      	ldr	r3, [pc, #32]	; (800586c <vTaskDelayUntil+0xf8>)
 800584c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800585a:	bf00      	nop
 800585c:	3728      	adds	r7, #40	; 0x28
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	2000060c 	.word	0x2000060c
 8005868:	200005e8 	.word	0x200005e8
 800586c:	e000ed04 	.word	0xe000ed04

08005870 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d017      	beq.n	80058b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005882:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <vTaskDelay+0x60>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <vTaskDelay+0x30>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	60bb      	str	r3, [r7, #8]
}
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80058a0:	f000 f87a 	bl	8005998 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058a4:	2100      	movs	r1, #0
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fb1a 	bl	8005ee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058ac:	f000 f882 	bl	80059b4 <xTaskResumeAll>
 80058b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d107      	bne.n	80058c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <vTaskDelay+0x64>)
 80058ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	2000060c 	.word	0x2000060c
 80058d4:	e000ed04 	.word	0xe000ed04

080058d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08a      	sub	sp, #40	; 0x28
 80058dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058e6:	463a      	mov	r2, r7
 80058e8:	1d39      	adds	r1, r7, #4
 80058ea:	f107 0308 	add.w	r3, r7, #8
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fb faa8 	bl	8000e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	9202      	str	r2, [sp, #8]
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	2300      	movs	r3, #0
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	2300      	movs	r3, #0
 8005904:	460a      	mov	r2, r1
 8005906:	491e      	ldr	r1, [pc, #120]	; (8005980 <vTaskStartScheduler+0xa8>)
 8005908:	481e      	ldr	r0, [pc, #120]	; (8005984 <vTaskStartScheduler+0xac>)
 800590a:	f7ff fda0 	bl	800544e <xTaskCreateStatic>
 800590e:	4603      	mov	r3, r0
 8005910:	4a1d      	ldr	r2, [pc, #116]	; (8005988 <vTaskStartScheduler+0xb0>)
 8005912:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005914:	4b1c      	ldr	r3, [pc, #112]	; (8005988 <vTaskStartScheduler+0xb0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800591c:	2301      	movs	r3, #1
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e001      	b.n	8005926 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d116      	bne.n	800595a <vTaskStartScheduler+0x82>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	613b      	str	r3, [r7, #16]
}
 800593e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005940:	4b12      	ldr	r3, [pc, #72]	; (800598c <vTaskStartScheduler+0xb4>)
 8005942:	f04f 32ff 	mov.w	r2, #4294967295
 8005946:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005948:	4b11      	ldr	r3, [pc, #68]	; (8005990 <vTaskStartScheduler+0xb8>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800594e:	4b11      	ldr	r3, [pc, #68]	; (8005994 <vTaskStartScheduler+0xbc>)
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005954:	f000 fbb4 	bl	80060c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005958:	e00e      	b.n	8005978 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d10a      	bne.n	8005978 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	60fb      	str	r3, [r7, #12]
}
 8005974:	bf00      	nop
 8005976:	e7fe      	b.n	8005976 <vTaskStartScheduler+0x9e>
}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	08006900 	.word	0x08006900
 8005984:	08005d35 	.word	0x08005d35
 8005988:	20000608 	.word	0x20000608
 800598c:	20000604 	.word	0x20000604
 8005990:	200005f0 	.word	0x200005f0
 8005994:	200005e8 	.word	0x200005e8

08005998 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <vTaskSuspendAll+0x18>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	4a03      	ldr	r2, [pc, #12]	; (80059b0 <vTaskSuspendAll+0x18>)
 80059a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80059a6:	bf00      	nop
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	2000060c 	.word	0x2000060c

080059b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059c2:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <xTaskResumeAll+0x114>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	603b      	str	r3, [r7, #0]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059e0:	f000 fc10 	bl	8006204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059e4:	4b38      	ldr	r3, [pc, #224]	; (8005ac8 <xTaskResumeAll+0x114>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	4a37      	ldr	r2, [pc, #220]	; (8005ac8 <xTaskResumeAll+0x114>)
 80059ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ee:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <xTaskResumeAll+0x114>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d161      	bne.n	8005aba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059f6:	4b35      	ldr	r3, [pc, #212]	; (8005acc <xTaskResumeAll+0x118>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d05d      	beq.n	8005aba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059fe:	e02e      	b.n	8005a5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a00:	4b33      	ldr	r3, [pc, #204]	; (8005ad0 <xTaskResumeAll+0x11c>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3318      	adds	r3, #24
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff fcf4 	bl	80053fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff fcef 	bl	80053fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	2201      	movs	r2, #1
 8005a22:	409a      	lsls	r2, r3
 8005a24:	4b2b      	ldr	r3, [pc, #172]	; (8005ad4 <xTaskResumeAll+0x120>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <xTaskResumeAll+0x120>)
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4a27      	ldr	r2, [pc, #156]	; (8005ad8 <xTaskResumeAll+0x124>)
 8005a3c:	441a      	add	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f7ff fc7b 	bl	8005340 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	4b23      	ldr	r3, [pc, #140]	; (8005adc <xTaskResumeAll+0x128>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d302      	bcc.n	8005a5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a58:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <xTaskResumeAll+0x12c>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <xTaskResumeAll+0x11c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1cc      	bne.n	8005a00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a6c:	f000 fa18 	bl	8005ea0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a70:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <xTaskResumeAll+0x130>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a7c:	f000 f846 	bl	8005b0c <xTaskIncrementTick>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a86:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <xTaskResumeAll+0x12c>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1f1      	bne.n	8005a7c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005a98:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <xTaskResumeAll+0x130>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a9e:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <xTaskResumeAll+0x12c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <xTaskResumeAll+0x134>)
 8005aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005aba:	f000 fbd3 	bl	8006264 <vPortExitCritical>

	return xAlreadyYielded;
 8005abe:	68bb      	ldr	r3, [r7, #8]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	2000060c 	.word	0x2000060c
 8005acc:	200005e4 	.word	0x200005e4
 8005ad0:	200005a4 	.word	0x200005a4
 8005ad4:	200005ec 	.word	0x200005ec
 8005ad8:	200004e8 	.word	0x200004e8
 8005adc:	200004e4 	.word	0x200004e4
 8005ae0:	200005f8 	.word	0x200005f8
 8005ae4:	200005f4 	.word	0x200005f4
 8005ae8:	e000ed04 	.word	0xe000ed04

08005aec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <xTaskGetTickCount+0x1c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005af8:	687b      	ldr	r3, [r7, #4]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	200005e8 	.word	0x200005e8

08005b0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b16:	4b4e      	ldr	r3, [pc, #312]	; (8005c50 <xTaskIncrementTick+0x144>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f040 808e 	bne.w	8005c3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b20:	4b4c      	ldr	r3, [pc, #304]	; (8005c54 <xTaskIncrementTick+0x148>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3301      	adds	r3, #1
 8005b26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b28:	4a4a      	ldr	r2, [pc, #296]	; (8005c54 <xTaskIncrementTick+0x148>)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d120      	bne.n	8005b76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b34:	4b48      	ldr	r3, [pc, #288]	; (8005c58 <xTaskIncrementTick+0x14c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	603b      	str	r3, [r7, #0]
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <xTaskIncrementTick+0x46>
 8005b54:	4b40      	ldr	r3, [pc, #256]	; (8005c58 <xTaskIncrementTick+0x14c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	4b40      	ldr	r3, [pc, #256]	; (8005c5c <xTaskIncrementTick+0x150>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a3e      	ldr	r2, [pc, #248]	; (8005c58 <xTaskIncrementTick+0x14c>)
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	4a3e      	ldr	r2, [pc, #248]	; (8005c5c <xTaskIncrementTick+0x150>)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	4b3d      	ldr	r3, [pc, #244]	; (8005c60 <xTaskIncrementTick+0x154>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4a3c      	ldr	r2, [pc, #240]	; (8005c60 <xTaskIncrementTick+0x154>)
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	f000 f995 	bl	8005ea0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b76:	4b3b      	ldr	r3, [pc, #236]	; (8005c64 <xTaskIncrementTick+0x158>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d348      	bcc.n	8005c12 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b80:	4b35      	ldr	r3, [pc, #212]	; (8005c58 <xTaskIncrementTick+0x14c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d104      	bne.n	8005b94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b8a:	4b36      	ldr	r3, [pc, #216]	; (8005c64 <xTaskIncrementTick+0x158>)
 8005b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b90:	601a      	str	r2, [r3, #0]
					break;
 8005b92:	e03e      	b.n	8005c12 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b94:	4b30      	ldr	r3, [pc, #192]	; (8005c58 <xTaskIncrementTick+0x14c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d203      	bcs.n	8005bb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bac:	4a2d      	ldr	r2, [pc, #180]	; (8005c64 <xTaskIncrementTick+0x158>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bb2:	e02e      	b.n	8005c12 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff fc1e 	bl	80053fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	3318      	adds	r3, #24
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff fc15 	bl	80053fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	409a      	lsls	r2, r3
 8005bd8:	4b23      	ldr	r3, [pc, #140]	; (8005c68 <xTaskIncrementTick+0x15c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	4a22      	ldr	r2, [pc, #136]	; (8005c68 <xTaskIncrementTick+0x15c>)
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4a1f      	ldr	r2, [pc, #124]	; (8005c6c <xTaskIncrementTick+0x160>)
 8005bf0:	441a      	add	r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f7ff fba1 	bl	8005340 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c02:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <xTaskIncrementTick+0x164>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d3b9      	bcc.n	8005b80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c10:	e7b6      	b.n	8005b80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c12:	4b17      	ldr	r3, [pc, #92]	; (8005c70 <xTaskIncrementTick+0x164>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c18:	4914      	ldr	r1, [pc, #80]	; (8005c6c <xTaskIncrementTick+0x160>)
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d901      	bls.n	8005c2e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c2e:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <xTaskIncrementTick+0x168>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005c36:	2301      	movs	r3, #1
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e004      	b.n	8005c46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c3c:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <xTaskIncrementTick+0x16c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3301      	adds	r3, #1
 8005c42:	4a0d      	ldr	r2, [pc, #52]	; (8005c78 <xTaskIncrementTick+0x16c>)
 8005c44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c46:	697b      	ldr	r3, [r7, #20]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	2000060c 	.word	0x2000060c
 8005c54:	200005e8 	.word	0x200005e8
 8005c58:	2000059c 	.word	0x2000059c
 8005c5c:	200005a0 	.word	0x200005a0
 8005c60:	200005fc 	.word	0x200005fc
 8005c64:	20000604 	.word	0x20000604
 8005c68:	200005ec 	.word	0x200005ec
 8005c6c:	200004e8 	.word	0x200004e8
 8005c70:	200004e4 	.word	0x200004e4
 8005c74:	200005f8 	.word	0x200005f8
 8005c78:	200005f4 	.word	0x200005f4

08005c7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c82:	4b27      	ldr	r3, [pc, #156]	; (8005d20 <vTaskSwitchContext+0xa4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c8a:	4b26      	ldr	r3, [pc, #152]	; (8005d24 <vTaskSwitchContext+0xa8>)
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c90:	e03f      	b.n	8005d12 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005c92:	4b24      	ldr	r3, [pc, #144]	; (8005d24 <vTaskSwitchContext+0xa8>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c98:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <vTaskSwitchContext+0xac>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	fab3 f383 	clz	r3, r3
 8005ca4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ca6:	7afb      	ldrb	r3, [r7, #11]
 8005ca8:	f1c3 031f 	rsb	r3, r3, #31
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	491f      	ldr	r1, [pc, #124]	; (8005d2c <vTaskSwitchContext+0xb0>)
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	607b      	str	r3, [r7, #4]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <vTaskSwitchContext+0x5a>
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4a12      	ldr	r2, [pc, #72]	; (8005d2c <vTaskSwitchContext+0xb0>)
 8005ce4:	4413      	add	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	605a      	str	r2, [r3, #4]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d104      	bne.n	8005d08 <vTaskSwitchContext+0x8c>
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	4a08      	ldr	r2, [pc, #32]	; (8005d30 <vTaskSwitchContext+0xb4>)
 8005d10:	6013      	str	r3, [r2, #0]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	2000060c 	.word	0x2000060c
 8005d24:	200005f8 	.word	0x200005f8
 8005d28:	200005ec 	.word	0x200005ec
 8005d2c:	200004e8 	.word	0x200004e8
 8005d30:	200004e4 	.word	0x200004e4

08005d34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d3c:	f000 f852 	bl	8005de4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <prvIdleTask+0x28>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d9f9      	bls.n	8005d3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <prvIdleTask+0x2c>)
 8005d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d58:	e7f0      	b.n	8005d3c <prvIdleTask+0x8>
 8005d5a:	bf00      	nop
 8005d5c:	200004e8 	.word	0x200004e8
 8005d60:	e000ed04 	.word	0xe000ed04

08005d64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	607b      	str	r3, [r7, #4]
 8005d6e:	e00c      	b.n	8005d8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4a12      	ldr	r2, [pc, #72]	; (8005dc4 <prvInitialiseTaskLists+0x60>)
 8005d7c:	4413      	add	r3, r2
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff fab1 	bl	80052e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3301      	adds	r3, #1
 8005d88:	607b      	str	r3, [r7, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b06      	cmp	r3, #6
 8005d8e:	d9ef      	bls.n	8005d70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d90:	480d      	ldr	r0, [pc, #52]	; (8005dc8 <prvInitialiseTaskLists+0x64>)
 8005d92:	f7ff faa8 	bl	80052e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d96:	480d      	ldr	r0, [pc, #52]	; (8005dcc <prvInitialiseTaskLists+0x68>)
 8005d98:	f7ff faa5 	bl	80052e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d9c:	480c      	ldr	r0, [pc, #48]	; (8005dd0 <prvInitialiseTaskLists+0x6c>)
 8005d9e:	f7ff faa2 	bl	80052e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005da2:	480c      	ldr	r0, [pc, #48]	; (8005dd4 <prvInitialiseTaskLists+0x70>)
 8005da4:	f7ff fa9f 	bl	80052e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005da8:	480b      	ldr	r0, [pc, #44]	; (8005dd8 <prvInitialiseTaskLists+0x74>)
 8005daa:	f7ff fa9c 	bl	80052e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dae:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <prvInitialiseTaskLists+0x78>)
 8005db0:	4a05      	ldr	r2, [pc, #20]	; (8005dc8 <prvInitialiseTaskLists+0x64>)
 8005db2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005db4:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <prvInitialiseTaskLists+0x7c>)
 8005db6:	4a05      	ldr	r2, [pc, #20]	; (8005dcc <prvInitialiseTaskLists+0x68>)
 8005db8:	601a      	str	r2, [r3, #0]
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	200004e8 	.word	0x200004e8
 8005dc8:	20000574 	.word	0x20000574
 8005dcc:	20000588 	.word	0x20000588
 8005dd0:	200005a4 	.word	0x200005a4
 8005dd4:	200005b8 	.word	0x200005b8
 8005dd8:	200005d0 	.word	0x200005d0
 8005ddc:	2000059c 	.word	0x2000059c
 8005de0:	200005a0 	.word	0x200005a0

08005de4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dea:	e019      	b.n	8005e20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005dec:	f000 fa0a 	bl	8006204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df0:	4b10      	ldr	r3, [pc, #64]	; (8005e34 <prvCheckTasksWaitingTermination+0x50>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff fafc 	bl	80053fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e02:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <prvCheckTasksWaitingTermination+0x54>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	4a0b      	ldr	r2, [pc, #44]	; (8005e38 <prvCheckTasksWaitingTermination+0x54>)
 8005e0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <prvCheckTasksWaitingTermination+0x58>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <prvCheckTasksWaitingTermination+0x58>)
 8005e14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e16:	f000 fa25 	bl	8006264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f810 	bl	8005e40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <prvCheckTasksWaitingTermination+0x58>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e1      	bne.n	8005dec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	200005b8 	.word	0x200005b8
 8005e38:	200005e4 	.word	0x200005e4
 8005e3c:	200005cc 	.word	0x200005cc

08005e40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d108      	bne.n	8005e64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fb82 	bl	8006560 <vPortFree>
				vPortFree( pxTCB );
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fb7f 	bl	8006560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e62:	e018      	b.n	8005e96 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d103      	bne.n	8005e76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fb76 	bl	8006560 <vPortFree>
	}
 8005e74:	e00f      	b.n	8005e96 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d00a      	beq.n	8005e96 <prvDeleteTCB+0x56>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	60fb      	str	r3, [r7, #12]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <prvDeleteTCB+0x54>
	}
 8005e96:	bf00      	nop
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <prvResetNextTaskUnblockTime+0x38>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d104      	bne.n	8005eba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <prvResetNextTaskUnblockTime+0x3c>)
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eb8:	e008      	b.n	8005ecc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <prvResetNextTaskUnblockTime+0x38>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <prvResetNextTaskUnblockTime+0x3c>)
 8005eca:	6013      	str	r3, [r2, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	2000059c 	.word	0x2000059c
 8005edc:	20000604 	.word	0x20000604

08005ee0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eea:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ef0:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fa7f 	bl	80053fa <uxListRemove>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10b      	bne.n	8005f1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f02:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	2201      	movs	r2, #1
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	43da      	mvns	r2, r3
 8005f10:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4013      	ands	r3, r2
 8005f16:	4a20      	ldr	r2, [pc, #128]	; (8005f98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d10a      	bne.n	8005f38 <prvAddCurrentTaskToDelayedList+0x58>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d007      	beq.n	8005f38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f28:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	481a      	ldr	r0, [pc, #104]	; (8005f9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f32:	f7ff fa05 	bl	8005340 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f36:	e026      	b.n	8005f86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f40:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d209      	bcs.n	8005f64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f50:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f7ff fa13 	bl	8005388 <vListInsert>
}
 8005f62:	e010      	b.n	8005f86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f64:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f7ff fa09 	bl	8005388 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d202      	bcs.n	8005f86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f80:	4a09      	ldr	r2, [pc, #36]	; (8005fa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6013      	str	r3, [r2, #0]
}
 8005f86:	bf00      	nop
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200005e8 	.word	0x200005e8
 8005f94:	200004e4 	.word	0x200004e4
 8005f98:	200005ec 	.word	0x200005ec
 8005f9c:	200005d0 	.word	0x200005d0
 8005fa0:	200005a0 	.word	0x200005a0
 8005fa4:	2000059c 	.word	0x2000059c
 8005fa8:	20000604 	.word	0x20000604

08005fac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3b04      	subs	r3, #4
 8005fbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3b04      	subs	r3, #4
 8005fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f023 0201 	bic.w	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3b04      	subs	r3, #4
 8005fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <pxPortInitialiseStack+0x64>)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b14      	subs	r3, #20
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3b04      	subs	r3, #4
 8005ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f06f 0202 	mvn.w	r2, #2
 8005ffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3b20      	subs	r3, #32
 8006000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006002:	68fb      	ldr	r3, [r7, #12]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	08006015 	.word	0x08006015

08006014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800601e:	4b12      	ldr	r3, [pc, #72]	; (8006068 <prvTaskExitError+0x54>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d00a      	beq.n	800603e <prvTaskExitError+0x2a>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	60fb      	str	r3, [r7, #12]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <prvTaskExitError+0x28>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	60bb      	str	r3, [r7, #8]
}
 8006050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006052:	bf00      	nop
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0fc      	beq.n	8006054 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800605a:	bf00      	nop
 800605c:	bf00      	nop
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	2000000c 	.word	0x2000000c
 800606c:	00000000 	.word	0x00000000

08006070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <pxCurrentTCBConst2>)
 8006072:	6819      	ldr	r1, [r3, #0]
 8006074:	6808      	ldr	r0, [r1, #0]
 8006076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607a:	f380 8809 	msr	PSP, r0
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	f380 8811 	msr	BASEPRI, r0
 800608a:	4770      	bx	lr
 800608c:	f3af 8000 	nop.w

08006090 <pxCurrentTCBConst2>:
 8006090:	200004e4 	.word	0x200004e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop

08006098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006098:	4808      	ldr	r0, [pc, #32]	; (80060bc <prvPortStartFirstTask+0x24>)
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	6800      	ldr	r0, [r0, #0]
 800609e:	f380 8808 	msr	MSP, r0
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8814 	msr	CONTROL, r0
 80060aa:	b662      	cpsie	i
 80060ac:	b661      	cpsie	f
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	df00      	svc	0
 80060b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060ba:	bf00      	nop
 80060bc:	e000ed08 	.word	0xe000ed08

080060c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060c6:	4b46      	ldr	r3, [pc, #280]	; (80061e0 <xPortStartScheduler+0x120>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a46      	ldr	r2, [pc, #280]	; (80061e4 <xPortStartScheduler+0x124>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d10a      	bne.n	80060e6 <xPortStartScheduler+0x26>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	613b      	str	r3, [r7, #16]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060e6:	4b3e      	ldr	r3, [pc, #248]	; (80061e0 <xPortStartScheduler+0x120>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3f      	ldr	r2, [pc, #252]	; (80061e8 <xPortStartScheduler+0x128>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d10a      	bne.n	8006106 <xPortStartScheduler+0x46>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60fb      	str	r3, [r7, #12]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006106:	4b39      	ldr	r3, [pc, #228]	; (80061ec <xPortStartScheduler+0x12c>)
 8006108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	22ff      	movs	r2, #255	; 0xff
 8006116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006128:	b2da      	uxtb	r2, r3
 800612a:	4b31      	ldr	r3, [pc, #196]	; (80061f0 <xPortStartScheduler+0x130>)
 800612c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800612e:	4b31      	ldr	r3, [pc, #196]	; (80061f4 <xPortStartScheduler+0x134>)
 8006130:	2207      	movs	r2, #7
 8006132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006134:	e009      	b.n	800614a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006136:	4b2f      	ldr	r3, [pc, #188]	; (80061f4 <xPortStartScheduler+0x134>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3b01      	subs	r3, #1
 800613c:	4a2d      	ldr	r2, [pc, #180]	; (80061f4 <xPortStartScheduler+0x134>)
 800613e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	b2db      	uxtb	r3, r3
 8006148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006152:	2b80      	cmp	r3, #128	; 0x80
 8006154:	d0ef      	beq.n	8006136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006156:	4b27      	ldr	r3, [pc, #156]	; (80061f4 <xPortStartScheduler+0x134>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f1c3 0307 	rsb	r3, r3, #7
 800615e:	2b04      	cmp	r3, #4
 8006160:	d00a      	beq.n	8006178 <xPortStartScheduler+0xb8>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60bb      	str	r3, [r7, #8]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006178:	4b1e      	ldr	r3, [pc, #120]	; (80061f4 <xPortStartScheduler+0x134>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	4a1d      	ldr	r2, [pc, #116]	; (80061f4 <xPortStartScheduler+0x134>)
 8006180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006182:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <xPortStartScheduler+0x134>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800618a:	4a1a      	ldr	r2, [pc, #104]	; (80061f4 <xPortStartScheduler+0x134>)
 800618c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006196:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <xPortStartScheduler+0x138>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <xPortStartScheduler+0x138>)
 800619c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061a2:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <xPortStartScheduler+0x138>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <xPortStartScheduler+0x138>)
 80061a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061ae:	f000 f8dd 	bl	800636c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061b2:	4b12      	ldr	r3, [pc, #72]	; (80061fc <xPortStartScheduler+0x13c>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061b8:	f000 f8fc 	bl	80063b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061bc:	4b10      	ldr	r3, [pc, #64]	; (8006200 <xPortStartScheduler+0x140>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a0f      	ldr	r2, [pc, #60]	; (8006200 <xPortStartScheduler+0x140>)
 80061c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061c8:	f7ff ff66 	bl	8006098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061cc:	f7ff fd56 	bl	8005c7c <vTaskSwitchContext>
	prvTaskExitError();
 80061d0:	f7ff ff20 	bl	8006014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	e000ed00 	.word	0xe000ed00
 80061e4:	410fc271 	.word	0x410fc271
 80061e8:	410fc270 	.word	0x410fc270
 80061ec:	e000e400 	.word	0xe000e400
 80061f0:	20000610 	.word	0x20000610
 80061f4:	20000614 	.word	0x20000614
 80061f8:	e000ed20 	.word	0xe000ed20
 80061fc:	2000000c 	.word	0x2000000c
 8006200:	e000ef34 	.word	0xe000ef34

08006204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	607b      	str	r3, [r7, #4]
}
 800621c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800621e:	4b0f      	ldr	r3, [pc, #60]	; (800625c <vPortEnterCritical+0x58>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	4a0d      	ldr	r2, [pc, #52]	; (800625c <vPortEnterCritical+0x58>)
 8006226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006228:	4b0c      	ldr	r3, [pc, #48]	; (800625c <vPortEnterCritical+0x58>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10f      	bne.n	8006250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <vPortEnterCritical+0x5c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <vPortEnterCritical+0x4c>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	603b      	str	r3, [r7, #0]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <vPortEnterCritical+0x4a>
	}
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	2000000c 	.word	0x2000000c
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800626a:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <vPortExitCritical+0x50>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <vPortExitCritical+0x24>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	607b      	str	r3, [r7, #4]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006288:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <vPortExitCritical+0x50>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3b01      	subs	r3, #1
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <vPortExitCritical+0x50>)
 8006290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006292:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <vPortExitCritical+0x50>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d105      	bne.n	80062a6 <vPortExitCritical+0x42>
 800629a:	2300      	movs	r3, #0
 800629c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	2000000c 	.word	0x2000000c
	...

080062c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062c0:	f3ef 8009 	mrs	r0, PSP
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	4b15      	ldr	r3, [pc, #84]	; (8006320 <pxCurrentTCBConst>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	f01e 0f10 	tst.w	lr, #16
 80062d0:	bf08      	it	eq
 80062d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	6010      	str	r0, [r2, #0]
 80062dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062e4:	f380 8811 	msr	BASEPRI, r0
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f7ff fcc4 	bl	8005c7c <vTaskSwitchContext>
 80062f4:	f04f 0000 	mov.w	r0, #0
 80062f8:	f380 8811 	msr	BASEPRI, r0
 80062fc:	bc09      	pop	{r0, r3}
 80062fe:	6819      	ldr	r1, [r3, #0]
 8006300:	6808      	ldr	r0, [r1, #0]
 8006302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006306:	f01e 0f10 	tst.w	lr, #16
 800630a:	bf08      	it	eq
 800630c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006310:	f380 8809 	msr	PSP, r0
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst>:
 8006320:	200004e4 	.word	0x200004e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	607b      	str	r3, [r7, #4]
}
 8006340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006342:	f7ff fbe3 	bl	8005b0c <xTaskIncrementTick>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <SysTick_Handler+0x40>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	2300      	movs	r3, #0
 8006356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f383 8811 	msr	BASEPRI, r3
}
 800635e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <vPortSetupTimerInterrupt+0x34>)
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <vPortSetupTimerInterrupt+0x38>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <vPortSetupTimerInterrupt+0x3c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <vPortSetupTimerInterrupt+0x40>)
 8006382:	fba2 2303 	umull	r2, r3, r2, r3
 8006386:	099b      	lsrs	r3, r3, #6
 8006388:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <vPortSetupTimerInterrupt+0x44>)
 800638a:	3b01      	subs	r3, #1
 800638c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800638e:	4b04      	ldr	r3, [pc, #16]	; (80063a0 <vPortSetupTimerInterrupt+0x34>)
 8006390:	2207      	movs	r2, #7
 8006392:	601a      	str	r2, [r3, #0]
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	e000e010 	.word	0xe000e010
 80063a4:	e000e018 	.word	0xe000e018
 80063a8:	20000000 	.word	0x20000000
 80063ac:	10624dd3 	.word	0x10624dd3
 80063b0:	e000e014 	.word	0xe000e014

080063b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063c4 <vPortEnableVFP+0x10>
 80063b8:	6801      	ldr	r1, [r0, #0]
 80063ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063be:	6001      	str	r1, [r0, #0]
 80063c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063c2:	bf00      	nop
 80063c4:	e000ed88 	.word	0xe000ed88

080063c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063d0:	2300      	movs	r3, #0
 80063d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063d4:	f7ff fae0 	bl	8005998 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063d8:	4b5b      	ldr	r3, [pc, #364]	; (8006548 <pvPortMalloc+0x180>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063e0:	f000 f920 	bl	8006624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063e4:	4b59      	ldr	r3, [pc, #356]	; (800654c <pvPortMalloc+0x184>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f040 8093 	bne.w	8006518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01d      	beq.n	8006434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063f8:	2208      	movs	r2, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4413      	add	r3, r2
 80063fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	2b00      	cmp	r3, #0
 8006408:	d014      	beq.n	8006434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f023 0307 	bic.w	r3, r3, #7
 8006410:	3308      	adds	r3, #8
 8006412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <pvPortMalloc+0x6c>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	617b      	str	r3, [r7, #20]
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d06e      	beq.n	8006518 <pvPortMalloc+0x150>
 800643a:	4b45      	ldr	r3, [pc, #276]	; (8006550 <pvPortMalloc+0x188>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	429a      	cmp	r2, r3
 8006442:	d869      	bhi.n	8006518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006444:	4b43      	ldr	r3, [pc, #268]	; (8006554 <pvPortMalloc+0x18c>)
 8006446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006448:	4b42      	ldr	r3, [pc, #264]	; (8006554 <pvPortMalloc+0x18c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800644e:	e004      	b.n	800645a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d903      	bls.n	800646c <pvPortMalloc+0xa4>
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1f1      	bne.n	8006450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800646c:	4b36      	ldr	r3, [pc, #216]	; (8006548 <pvPortMalloc+0x180>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006472:	429a      	cmp	r2, r3
 8006474:	d050      	beq.n	8006518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2208      	movs	r2, #8
 800647c:	4413      	add	r3, r2
 800647e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	1ad2      	subs	r2, r2, r3
 8006490:	2308      	movs	r3, #8
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	429a      	cmp	r2, r3
 8006496:	d91f      	bls.n	80064d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4413      	add	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <pvPortMalloc+0xf8>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	613b      	str	r3, [r7, #16]
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	1ad2      	subs	r2, r2, r3
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064d2:	69b8      	ldr	r0, [r7, #24]
 80064d4:	f000 f908 	bl	80066e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <pvPortMalloc+0x188>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <pvPortMalloc+0x188>)
 80064e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064e6:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <pvPortMalloc+0x188>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4b1b      	ldr	r3, [pc, #108]	; (8006558 <pvPortMalloc+0x190>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d203      	bcs.n	80064fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064f2:	4b17      	ldr	r3, [pc, #92]	; (8006550 <pvPortMalloc+0x188>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a18      	ldr	r2, [pc, #96]	; (8006558 <pvPortMalloc+0x190>)
 80064f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	4b13      	ldr	r3, [pc, #76]	; (800654c <pvPortMalloc+0x184>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	431a      	orrs	r2, r3
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800650e:	4b13      	ldr	r3, [pc, #76]	; (800655c <pvPortMalloc+0x194>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3301      	adds	r3, #1
 8006514:	4a11      	ldr	r2, [pc, #68]	; (800655c <pvPortMalloc+0x194>)
 8006516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006518:	f7ff fa4c 	bl	80059b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <pvPortMalloc+0x174>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	60fb      	str	r3, [r7, #12]
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <pvPortMalloc+0x172>
	return pvReturn;
 800653c:	69fb      	ldr	r3, [r7, #28]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3728      	adds	r7, #40	; 0x28
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20004220 	.word	0x20004220
 800654c:	20004234 	.word	0x20004234
 8006550:	20004224 	.word	0x20004224
 8006554:	20004218 	.word	0x20004218
 8006558:	20004228 	.word	0x20004228
 800655c:	2000422c 	.word	0x2000422c

08006560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d04d      	beq.n	800660e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006572:	2308      	movs	r3, #8
 8006574:	425b      	negs	r3, r3
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4413      	add	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	4b24      	ldr	r3, [pc, #144]	; (8006618 <vPortFree+0xb8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4013      	ands	r3, r2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <vPortFree+0x44>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	60fb      	str	r3, [r7, #12]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <vPortFree+0x62>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	60bb      	str	r3, [r7, #8]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	4b14      	ldr	r3, [pc, #80]	; (8006618 <vPortFree+0xb8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01e      	beq.n	800660e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11a      	bne.n	800660e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <vPortFree+0xb8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	401a      	ands	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065e8:	f7ff f9d6 	bl	8005998 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <vPortFree+0xbc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4413      	add	r3, r2
 80065f6:	4a09      	ldr	r2, [pc, #36]	; (800661c <vPortFree+0xbc>)
 80065f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065fa:	6938      	ldr	r0, [r7, #16]
 80065fc:	f000 f874 	bl	80066e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <vPortFree+0xc0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	4a06      	ldr	r2, [pc, #24]	; (8006620 <vPortFree+0xc0>)
 8006608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800660a:	f7ff f9d3 	bl	80059b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800660e:	bf00      	nop
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20004234 	.word	0x20004234
 800661c:	20004224 	.word	0x20004224
 8006620:	20004230 	.word	0x20004230

08006624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800662a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800662e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006630:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <prvHeapInit+0xac>)
 8006632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00c      	beq.n	8006658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3307      	adds	r3, #7
 8006642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0307 	bic.w	r3, r3, #7
 800664a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <prvHeapInit+0xac>)
 8006654:	4413      	add	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800665c:	4a1d      	ldr	r2, [pc, #116]	; (80066d4 <prvHeapInit+0xb0>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006662:	4b1c      	ldr	r3, [pc, #112]	; (80066d4 <prvHeapInit+0xb0>)
 8006664:	2200      	movs	r2, #0
 8006666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	4413      	add	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006670:	2208      	movs	r2, #8
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0307 	bic.w	r3, r3, #7
 800667e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <prvHeapInit+0xb4>)
 8006684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006686:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <prvHeapInit+0xb4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2200      	movs	r2, #0
 800668c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800668e:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <prvHeapInit+0xb4>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066a4:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <prvHeapInit+0xb4>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <prvHeapInit+0xb8>)
 80066b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <prvHeapInit+0xbc>)
 80066ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066bc:	4b09      	ldr	r3, [pc, #36]	; (80066e4 <prvHeapInit+0xc0>)
 80066be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066c2:	601a      	str	r2, [r3, #0]
}
 80066c4:	bf00      	nop
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	20000618 	.word	0x20000618
 80066d4:	20004218 	.word	0x20004218
 80066d8:	20004220 	.word	0x20004220
 80066dc:	20004228 	.word	0x20004228
 80066e0:	20004224 	.word	0x20004224
 80066e4:	20004234 	.word	0x20004234

080066e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066f0:	4b28      	ldr	r3, [pc, #160]	; (8006794 <prvInsertBlockIntoFreeList+0xac>)
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e002      	b.n	80066fc <prvInsertBlockIntoFreeList+0x14>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	429a      	cmp	r2, r3
 8006704:	d8f7      	bhi.n	80066f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	4413      	add	r3, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	429a      	cmp	r2, r3
 8006716:	d108      	bne.n	800672a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	441a      	add	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	441a      	add	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d118      	bne.n	8006770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4b15      	ldr	r3, [pc, #84]	; (8006798 <prvInsertBlockIntoFreeList+0xb0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d00d      	beq.n	8006766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	441a      	add	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e008      	b.n	8006778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006766:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <prvInsertBlockIntoFreeList+0xb0>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e003      	b.n	8006778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	429a      	cmp	r2, r3
 800677e:	d002      	beq.n	8006786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006786:	bf00      	nop
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20004218 	.word	0x20004218
 8006798:	20004220 	.word	0x20004220

0800679c <memset>:
 800679c:	4402      	add	r2, r0
 800679e:	4603      	mov	r3, r0
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d100      	bne.n	80067a6 <memset+0xa>
 80067a4:	4770      	bx	lr
 80067a6:	f803 1b01 	strb.w	r1, [r3], #1
 80067aa:	e7f9      	b.n	80067a0 <memset+0x4>

080067ac <__libc_init_array>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4d0d      	ldr	r5, [pc, #52]	; (80067e4 <__libc_init_array+0x38>)
 80067b0:	4c0d      	ldr	r4, [pc, #52]	; (80067e8 <__libc_init_array+0x3c>)
 80067b2:	1b64      	subs	r4, r4, r5
 80067b4:	10a4      	asrs	r4, r4, #2
 80067b6:	2600      	movs	r6, #0
 80067b8:	42a6      	cmp	r6, r4
 80067ba:	d109      	bne.n	80067d0 <__libc_init_array+0x24>
 80067bc:	4d0b      	ldr	r5, [pc, #44]	; (80067ec <__libc_init_array+0x40>)
 80067be:	4c0c      	ldr	r4, [pc, #48]	; (80067f0 <__libc_init_array+0x44>)
 80067c0:	f000 f818 	bl	80067f4 <_init>
 80067c4:	1b64      	subs	r4, r4, r5
 80067c6:	10a4      	asrs	r4, r4, #2
 80067c8:	2600      	movs	r6, #0
 80067ca:	42a6      	cmp	r6, r4
 80067cc:	d105      	bne.n	80067da <__libc_init_array+0x2e>
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d4:	4798      	blx	r3
 80067d6:	3601      	adds	r6, #1
 80067d8:	e7ee      	b.n	80067b8 <__libc_init_array+0xc>
 80067da:	f855 3b04 	ldr.w	r3, [r5], #4
 80067de:	4798      	blx	r3
 80067e0:	3601      	adds	r6, #1
 80067e2:	e7f2      	b.n	80067ca <__libc_init_array+0x1e>
 80067e4:	08006928 	.word	0x08006928
 80067e8:	08006928 	.word	0x08006928
 80067ec:	08006928 	.word	0x08006928
 80067f0:	0800692c 	.word	0x0800692c

080067f4 <_init>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr

08006800 <_fini>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	bf00      	nop
 8006804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006806:	bc08      	pop	{r3}
 8006808:	469e      	mov	lr, r3
 800680a:	4770      	bx	lr
