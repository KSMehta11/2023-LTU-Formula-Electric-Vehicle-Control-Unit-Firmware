
RTOS LTU Formula Electric 2023 Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007284  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08007454  08007454  00008454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800758c  0800758c  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  0800758c  0800758c  0000858c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007594  08007594  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007594  08007594  00008594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007598  08007598  00008598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800759c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004234  20000014  080075b0  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004248  080075b0  00009248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b4d  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002faf  00000000  00000000  0001bb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0001eb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dda  00000000  00000000  0001fd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024434  00000000  00000000  00020b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014995  00000000  00000000  00044f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e59c1  00000000  00000000  000598e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f2a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd0  00000000  00000000  0013f2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00143eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800743c 	.word	0x0800743c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	0800743c 	.word	0x0800743c

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b96a 	b.w	8000d38 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	460c      	mov	r4, r1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d14e      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a88:	4694      	mov	ip, r2
 8000a8a:	458c      	cmp	ip, r1
 8000a8c:	4686      	mov	lr, r0
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	d962      	bls.n	8000b5a <__udivmoddi4+0xde>
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0320 	rsb	r3, r2, #32
 8000a9a:	4091      	lsls	r1, r2
 8000a9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa4:	4319      	orrs	r1, r3
 8000aa6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aaa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aae:	fa1f f68c 	uxth.w	r6, ip
 8000ab2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ab6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aba:	fb07 1114 	mls	r1, r7, r4, r1
 8000abe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac2:	fb04 f106 	mul.w	r1, r4, r6
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ad2:	f080 8112 	bcs.w	8000cfa <__udivmoddi4+0x27e>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 810f 	bls.w	8000cfa <__udivmoddi4+0x27e>
 8000adc:	3c02      	subs	r4, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a59      	subs	r1, r3, r1
 8000ae2:	fa1f f38e 	uxth.w	r3, lr
 8000ae6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aea:	fb07 1110 	mls	r1, r7, r0, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb00 f606 	mul.w	r6, r0, r6
 8000af6:	429e      	cmp	r6, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x94>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b02:	f080 80fc 	bcs.w	8000cfe <__udivmoddi4+0x282>
 8000b06:	429e      	cmp	r6, r3
 8000b08:	f240 80f9 	bls.w	8000cfe <__udivmoddi4+0x282>
 8000b0c:	4463      	add	r3, ip
 8000b0e:	3802      	subs	r0, #2
 8000b10:	1b9b      	subs	r3, r3, r6
 8000b12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b16:	2100      	movs	r1, #0
 8000b18:	b11d      	cbz	r5, 8000b22 <__udivmoddi4+0xa6>
 8000b1a:	40d3      	lsrs	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d905      	bls.n	8000b36 <__udivmoddi4+0xba>
 8000b2a:	b10d      	cbz	r5, 8000b30 <__udivmoddi4+0xb4>
 8000b2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b30:	2100      	movs	r1, #0
 8000b32:	4608      	mov	r0, r1
 8000b34:	e7f5      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000b36:	fab3 f183 	clz	r1, r3
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d146      	bne.n	8000bcc <__udivmoddi4+0x150>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xcc>
 8000b42:	4290      	cmp	r0, r2
 8000b44:	f0c0 80f0 	bcc.w	8000d28 <__udivmoddi4+0x2ac>
 8000b48:	1a86      	subs	r6, r0, r2
 8000b4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d0e6      	beq.n	8000b22 <__udivmoddi4+0xa6>
 8000b54:	e9c5 6300 	strd	r6, r3, [r5]
 8000b58:	e7e3      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	f040 8090 	bne.w	8000c80 <__udivmoddi4+0x204>
 8000b60:	eba1 040c 	sub.w	r4, r1, ip
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	fa1f f78c 	uxth.w	r7, ip
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b76:	fb08 4416 	mls	r4, r8, r6, r4
 8000b7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b7e:	fb07 f006 	mul.w	r0, r7, r6
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x11c>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x11a>
 8000b90:	4298      	cmp	r0, r3
 8000b92:	f200 80cd 	bhi.w	8000d30 <__udivmoddi4+0x2b4>
 8000b96:	4626      	mov	r6, r4
 8000b98:	1a1c      	subs	r4, r3, r0
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ba2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ba6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000baa:	fb00 f707 	mul.w	r7, r0, r7
 8000bae:	429f      	cmp	r7, r3
 8000bb0:	d908      	bls.n	8000bc4 <__udivmoddi4+0x148>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bba:	d202      	bcs.n	8000bc2 <__udivmoddi4+0x146>
 8000bbc:	429f      	cmp	r7, r3
 8000bbe:	f200 80b0 	bhi.w	8000d22 <__udivmoddi4+0x2a6>
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	1bdb      	subs	r3, r3, r7
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	e7a5      	b.n	8000b18 <__udivmoddi4+0x9c>
 8000bcc:	f1c1 0620 	rsb	r6, r1, #32
 8000bd0:	408b      	lsls	r3, r1
 8000bd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd6:	431f      	orrs	r7, r3
 8000bd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bdc:	fa04 f301 	lsl.w	r3, r4, r1
 8000be0:	ea43 030c 	orr.w	r3, r3, ip
 8000be4:	40f4      	lsrs	r4, r6
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	0c38      	lsrs	r0, r7, #16
 8000bec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bf4:	fa1f fc87 	uxth.w	ip, r7
 8000bf8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c00:	fb0e f90c 	mul.w	r9, lr, ip
 8000c04:	45a1      	cmp	r9, r4
 8000c06:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0a:	d90a      	bls.n	8000c22 <__udivmoddi4+0x1a6>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c12:	f080 8084 	bcs.w	8000d1e <__udivmoddi4+0x2a2>
 8000c16:	45a1      	cmp	r9, r4
 8000c18:	f240 8081 	bls.w	8000d1e <__udivmoddi4+0x2a2>
 8000c1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c20:	443c      	add	r4, r7
 8000c22:	eba4 0409 	sub.w	r4, r4, r9
 8000c26:	fa1f f983 	uxth.w	r9, r3
 8000c2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d907      	bls.n	8000c4e <__udivmoddi4+0x1d2>
 8000c3e:	193c      	adds	r4, r7, r4
 8000c40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c44:	d267      	bcs.n	8000d16 <__udivmoddi4+0x29a>
 8000c46:	45a4      	cmp	ip, r4
 8000c48:	d965      	bls.n	8000d16 <__udivmoddi4+0x29a>
 8000c4a:	3b02      	subs	r3, #2
 8000c4c:	443c      	add	r4, r7
 8000c4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c52:	fba0 9302 	umull	r9, r3, r0, r2
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	429c      	cmp	r4, r3
 8000c5c:	46ce      	mov	lr, r9
 8000c5e:	469c      	mov	ip, r3
 8000c60:	d351      	bcc.n	8000d06 <__udivmoddi4+0x28a>
 8000c62:	d04e      	beq.n	8000d02 <__udivmoddi4+0x286>
 8000c64:	b155      	cbz	r5, 8000c7c <__udivmoddi4+0x200>
 8000c66:	ebb8 030e 	subs.w	r3, r8, lr
 8000c6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c72:	40cb      	lsrs	r3, r1
 8000c74:	431e      	orrs	r6, r3
 8000c76:	40cc      	lsrs	r4, r1
 8000c78:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e750      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000c80:	f1c2 0320 	rsb	r3, r2, #32
 8000c84:	fa20 f103 	lsr.w	r1, r0, r3
 8000c88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c90:	4094      	lsls	r4, r2
 8000c92:	430c      	orrs	r4, r1
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c9c:	fa1f f78c 	uxth.w	r7, ip
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ca8:	0c23      	lsrs	r3, r4, #16
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f107 	mul.w	r1, r0, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x24c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cbe:	d22c      	bcs.n	8000d1a <__udivmoddi4+0x29e>
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d92a      	bls.n	8000d1a <__udivmoddi4+0x29e>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb01 f307 	mul.w	r3, r1, r7
 8000cdc:	42a3      	cmp	r3, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x276>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ce8:	d213      	bcs.n	8000d12 <__udivmoddi4+0x296>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d911      	bls.n	8000d12 <__udivmoddi4+0x296>
 8000cee:	3902      	subs	r1, #2
 8000cf0:	4464      	add	r4, ip
 8000cf2:	1ae4      	subs	r4, r4, r3
 8000cf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf8:	e739      	b.n	8000b6e <__udivmoddi4+0xf2>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	e6f0      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e706      	b.n	8000b10 <__udivmoddi4+0x94>
 8000d02:	45c8      	cmp	r8, r9
 8000d04:	d2ae      	bcs.n	8000c64 <__udivmoddi4+0x1e8>
 8000d06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d0e:	3801      	subs	r0, #1
 8000d10:	e7a8      	b.n	8000c64 <__udivmoddi4+0x1e8>
 8000d12:	4631      	mov	r1, r6
 8000d14:	e7ed      	b.n	8000cf2 <__udivmoddi4+0x276>
 8000d16:	4603      	mov	r3, r0
 8000d18:	e799      	b.n	8000c4e <__udivmoddi4+0x1d2>
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	e7d4      	b.n	8000cc8 <__udivmoddi4+0x24c>
 8000d1e:	46d6      	mov	lr, sl
 8000d20:	e77f      	b.n	8000c22 <__udivmoddi4+0x1a6>
 8000d22:	4463      	add	r3, ip
 8000d24:	3802      	subs	r0, #2
 8000d26:	e74d      	b.n	8000bc4 <__udivmoddi4+0x148>
 8000d28:	4606      	mov	r6, r0
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e70f      	b.n	8000b50 <__udivmoddi4+0xd4>
 8000d30:	3e02      	subs	r6, #2
 8000d32:	4463      	add	r3, ip
 8000d34:	e730      	b.n	8000b98 <__udivmoddi4+0x11c>
 8000d36:	bf00      	nop

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <startNode>:
 */

#include "CAN.h"

void startNode()
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
	uint8_t data[8] = { 0x01, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8000d42:	4a17      	ldr	r2, [pc, #92]	@ (8000da0 <startNode+0x64>)
 8000d44:	f107 0320 	add.w	r3, r7, #32
 8000d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d4c:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t mailbox = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]

	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	617b      	str	r3, [r7, #20]
	txHeader.ExtId = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
	txHeader.IDE = CAN_ID_STD;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
	txHeader.RTR = CAN_RTR_DATA;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
	txHeader.StdId = 0x000;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	763b      	strb	r3, [r7, #24]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	f107 0220 	add.w	r2, r7, #32
 8000d74:	1d39      	adds	r1, r7, #4
 8000d76:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <startNode+0x68>)
 8000d78:	f002 fa8c 	bl	8003294 <HAL_CAN_AddTxMessage>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <startNode+0x4a>
	{
		Error_Handler();
 8000d82:	f001 f999 	bl	80020b8 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000d86:	bf00      	nop
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <startNode+0x68>)
 8000d8e:	f002 fb5c 	bl	800344a <HAL_CAN_IsTxMessagePending>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f7      	bne.n	8000d88 <startNode+0x4c>

	return;
 8000d98:	bf00      	nop
}
 8000d9a:	3728      	adds	r7, #40	@ 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	08007454 	.word	0x08007454
 8000da4:	2000035c 	.word	0x2000035c

08000da8 <clearErrors>:

void clearErrors()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	@ 0x28
 8000dac:	af00      	add	r7, sp, #0
	uint8_t data[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00 };
 8000dae:	4a18      	ldr	r2, [pc, #96]	@ (8000e10 <clearErrors+0x68>)
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db8:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t mailbox = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]

	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 6;
 8000dc0:	2306      	movs	r3, #6
 8000dc2:	617b      	str	r3, [r7, #20]
	txHeader.ExtId = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
	txHeader.IDE = CAN_ID_STD;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
	txHeader.RTR = CAN_RTR_DATA;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
	txHeader.StdId = 0x47A;
 8000dd0:	f240 437a 	movw	r3, #1146	@ 0x47a
 8000dd4:	607b      	str	r3, [r7, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	763b      	strb	r3, [r7, #24]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	f107 0220 	add.w	r2, r7, #32
 8000de2:	1d39      	adds	r1, r7, #4
 8000de4:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <clearErrors+0x6c>)
 8000de6:	f002 fa55 	bl	8003294 <HAL_CAN_AddTxMessage>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <clearErrors+0x4c>
	{
		Error_Handler();
 8000df0:	f001 f962 	bl	80020b8 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000df4:	bf00      	nop
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <clearErrors+0x6c>)
 8000dfc:	f002 fb25 	bl	800344a <HAL_CAN_IsTxMessagePending>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f7      	bne.n	8000df6 <clearErrors+0x4e>

	return;
 8000e06:	bf00      	nop
}
 8000e08:	3728      	adds	r7, #40	@ 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	0800745c 	.word	0x0800745c
 8000e14:	2000035c 	.word	0x2000035c

08000e18 <nodeGuarding>:

void nodeGuarding()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t data[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8000e1e:	4a18      	ldr	r2, [pc, #96]	@ (8000e80 <nodeGuarding+0x68>)
 8000e20:	f107 0320 	add.w	r3, r7, #32
 8000e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e28:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t mailbox = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]

	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 8;
 8000e30:	2308      	movs	r3, #8
 8000e32:	617b      	str	r3, [r7, #20]
	txHeader.ExtId = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
	txHeader.IDE = CAN_ID_STD;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
	txHeader.RTR = CAN_RTR_REMOTE;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	613b      	str	r3, [r7, #16]
	txHeader.StdId = 0x77A;
 8000e40:	f240 737a 	movw	r3, #1914	@ 0x77a
 8000e44:	607b      	str	r3, [r7, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	763b      	strb	r3, [r7, #24]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	f107 0220 	add.w	r2, r7, #32
 8000e52:	1d39      	adds	r1, r7, #4
 8000e54:	480b      	ldr	r0, [pc, #44]	@ (8000e84 <nodeGuarding+0x6c>)
 8000e56:	f002 fa1d 	bl	8003294 <HAL_CAN_AddTxMessage>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <nodeGuarding+0x4c>
	{
		Error_Handler();
 8000e60:	f001 f92a 	bl	80020b8 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000e64:	bf00      	nop
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <nodeGuarding+0x6c>)
 8000e6c:	f002 faed 	bl	800344a <HAL_CAN_IsTxMessagePending>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f7      	bne.n	8000e66 <nodeGuarding+0x4e>

	return;
 8000e76:	bf00      	nop
}
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	08007464 	.word	0x08007464
 8000e84:	2000035c 	.word	0x2000035c

08000e88 <syncMessage>:

void syncMessage()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
	uint8_t data[8] = { 0x00, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8000e8e:	4a18      	ldr	r2, [pc, #96]	@ (8000ef0 <syncMessage+0x68>)
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e98:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t mailbox = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]

	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	617b      	str	r3, [r7, #20]
	txHeader.ExtId = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
	txHeader.IDE = CAN_ID_STD;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
	txHeader.RTR = CAN_RTR_DATA;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
	txHeader.StdId = 0x080;
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	607b      	str	r3, [r7, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	763b      	strb	r3, [r7, #24]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	f107 0220 	add.w	r2, r7, #32
 8000ec0:	1d39      	adds	r1, r7, #4
 8000ec2:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <syncMessage+0x6c>)
 8000ec4:	f002 f9e6 	bl	8003294 <HAL_CAN_AddTxMessage>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <syncMessage+0x4a>
	{
		Error_Handler();
 8000ece:	f001 f8f3 	bl	80020b8 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000ed2:	bf00      	nop
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <syncMessage+0x6c>)
 8000eda:	f002 fab6 	bl	800344a <HAL_CAN_IsTxMessagePending>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f7      	bne.n	8000ed4 <syncMessage+0x4c>
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	@ 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	0800746c 	.word	0x0800746c
 8000ef4:	2000035c 	.word	0x2000035c

08000ef8 <torqueControlMessage>:

void torqueControlMessage(int* torqueRefLim, const int* speedRefLimit)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	@ 0x30
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	uint8_t data[8] = { *torqueRefLim & 0xFF, (*torqueRefLim >> 8) & 0xFF,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	121b      	asrs	r3, r3, #8
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
					 *speedRefLimit & 0xFF, (*speedRefLimit >> 8) & 0xFF,
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
	uint8_t data[8] = { *torqueRefLim & 0xFF, (*torqueRefLim >> 8) & 0xFF,
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					 *speedRefLimit & 0xFF, (*speedRefLimit >> 8) & 0xFF,
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	121b      	asrs	r3, r3, #8
	uint8_t data[8] = { *torqueRefLim & 0xFF, (*torqueRefLim >> 8) & 0xFF,
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000f34:	2300      	movs	r3, #0
 8000f36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					 0x01, 0x00,
					 0x00, 0x00 };

	uint32_t mailbox = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24

	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 6;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	61fb      	str	r3, [r7, #28]
	txHeader.ExtId = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_STD;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
	txHeader.RTR = CAN_RTR_DATA;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
	txHeader.StdId = 0x47A;
 8000f5a:	f240 437a 	movw	r3, #1146	@ 0x47a
 8000f5e:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 3020 	strb.w	r3, [r7, #32]

	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &mailbox) != HAL_OK)
 8000f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f6a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000f6e:	f107 010c 	add.w	r1, r7, #12
 8000f72:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <torqueControlMessage+0xa8>)
 8000f74:	f002 f98e 	bl	8003294 <HAL_CAN_AddTxMessage>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <torqueControlMessage+0x8a>
	{
		Error_Handler();
 8000f7e:	f001 f89b 	bl	80020b8 <Error_Handler>
	}

	while (HAL_CAN_IsTxMessagePending(&hcan1, mailbox));
 8000f82:	bf00      	nop
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <torqueControlMessage+0xa8>)
 8000f8a:	f002 fa5e 	bl	800344a <HAL_CAN_IsTxMessagePending>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f7      	bne.n	8000f84 <torqueControlMessage+0x8c>
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3730      	adds	r7, #48	@ 0x30
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000035c 	.word	0x2000035c

08000fa4 <orionFilterConfig>:

void orionFilterConfig()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef orionFilter;

	orionFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000faa:	2301      	movs	r3, #1
 8000fac:	623b      	str	r3, [r7, #32]
	orionFilter.FilterBank = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
	orionFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
	orionFilter.FilterIdHigh = 0x6CA<<5;
 8000fb6:	f64d 1340 	movw	r3, #55616	@ 0xd940
 8000fba:	603b      	str	r3, [r7, #0]
	orionFilter.FilterIdLow = 0x000;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
	orionFilter.FilterMaskIdHigh = 0x6CA<<5;
 8000fc0:	f64d 1340 	movw	r3, #55616	@ 0xd940
 8000fc4:	60bb      	str	r3, [r7, #8]
	orionFilter.FilterMaskIdLow = 0x000;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
	orionFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
	orionFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
	orionFilter.SlaveStartFilterBank = 20;
 8000fd2:	2314      	movs	r3, #20
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &orionFilter) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	@ (8000ff4 <orionFilterConfig+0x50>)
 8000fdc:	f002 f836 	bl	800304c <HAL_CAN_ConfigFilter>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <orionFilterConfig+0x46>
	{
		Error_Handler();
 8000fe6:	f001 f867 	bl	80020b8 <Error_Handler>
	}
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	@ 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000035c 	.word	0x2000035c

08000ff8 <motorAndControllerTempFilterConfig>:
		Error_Handler();
	}
}

void motorAndControllerTempFilterConfig()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef tempFilter;

	tempFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	623b      	str	r3, [r7, #32]
	tempFilter.FilterBank = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
	tempFilter.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001006:	2301      	movs	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
	tempFilter.FilterIdHigh = 0x1BA<<5;
 800100a:	f44f 535d 	mov.w	r3, #14144	@ 0x3740
 800100e:	603b      	str	r3, [r7, #0]
	tempFilter.FilterIdLow = 0x000;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
	tempFilter.FilterMaskIdHigh = 0x1BA<<5;
 8001014:	f44f 535d 	mov.w	r3, #14144	@ 0x3740
 8001018:	60bb      	str	r3, [r7, #8]
	tempFilter.FilterMaskIdLow = 0x000;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
	tempFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 800101e:	2301      	movs	r3, #1
 8001020:	61bb      	str	r3, [r7, #24]
	tempFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001022:	2301      	movs	r3, #1
 8001024:	61fb      	str	r3, [r7, #28]
	tempFilter.SlaveStartFilterBank = 20;
 8001026:	2314      	movs	r3, #20
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &tempFilter) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	@ (8001048 <motorAndControllerTempFilterConfig+0x50>)
 8001030:	f002 f80c 	bl	800304c <HAL_CAN_ConfigFilter>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <motorAndControllerTempFilterConfig+0x46>
	{
		Error_Handler();
 800103a:	f001 f83d 	bl	80020b8 <Error_Handler>
	}
}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	@ 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000035c 	.word	0x2000035c

0800104c <motorRPMFilterConfig>:

void motorRPMFilterConfig()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	@ 0x28
 8001050:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef rpmFilter;

	rpmFilter.FilterActivation = CAN_FILTER_ENABLE;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
	rpmFilter.FilterBank = 2;
 8001056:	2302      	movs	r3, #2
 8001058:	617b      	str	r3, [r7, #20]
	rpmFilter.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800105a:	2301      	movs	r3, #1
 800105c:	613b      	str	r3, [r7, #16]
	rpmFilter.FilterIdHigh = 0x3FA<<5;
 800105e:	f647 7340 	movw	r3, #32576	@ 0x7f40
 8001062:	603b      	str	r3, [r7, #0]
	rpmFilter.FilterIdLow = 0x000;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
	rpmFilter.FilterMaskIdHigh = 0x3FA<<5;
 8001068:	f647 7340 	movw	r3, #32576	@ 0x7f40
 800106c:	60bb      	str	r3, [r7, #8]
	rpmFilter.FilterMaskIdLow = 0x000;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
	rpmFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
	rpmFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001076:	2301      	movs	r3, #1
 8001078:	61fb      	str	r3, [r7, #28]
	rpmFilter.SlaveStartFilterBank = 20;
 800107a:	2314      	movs	r3, #20
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &rpmFilter) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <motorRPMFilterConfig+0x50>)
 8001084:	f001 ffe2 	bl	800304c <HAL_CAN_ConfigFilter>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <motorRPMFilterConfig+0x46>
	{
		Error_Handler();
 800108e:	f001 f813 	bl	80020b8 <Error_Handler>
	}
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000035c 	.word	0x2000035c

080010a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a07      	ldr	r2, [pc, #28]	@ (80010cc <vApplicationGetIdleTaskMemory+0x2c>)
 80010b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	4a06      	ldr	r2, [pc, #24]	@ (80010d0 <vApplicationGetIdleTaskMemory+0x30>)
 80010b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2280      	movs	r2, #128	@ 0x80
 80010bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000030 	.word	0x20000030
 80010d0:	20000084 	.word	0x20000084

080010d4 <ADC_GetAverageValue>:

/* USER CODE BEGIN PFP */

// Pedal Position Output Filter (Eliminates induces noise and spikes in signal)
uint32_t ADC_GetAverageValue(ADC_HandleTypeDef* hadc, int numOfReadings)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b098      	sub	sp, #96	@ 0x60
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]

	int max = 0, min = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80010e2:	2300      	movs	r3, #0
 80010e4:	65bb      	str	r3, [r7, #88]	@ 0x58
	int maxIndex = 0, minIndex = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80010ea:	2300      	movs	r3, #0
 80010ec:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t data[10] = { 0 };
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2228      	movs	r2, #40	@ 0x28
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 f974 	bl	80073e4 <memset>
	uint32_t sum = 0, average = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001100:	2300      	movs	r3, #0
 8001102:	637b      	str	r3, [r7, #52]	@ 0x34

	for (int i = 0; i < numOfReadings; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001108:	e016      	b.n	8001138 <ADC_GetAverageValue+0x64>
	{
		HAL_ADC_Start(hadc);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f001 fad6 	bl	80026bc <HAL_ADC_Start>

		HAL_ADC_PollForConversion(hadc, 1);
 8001110:	2101      	movs	r1, #1
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f001 fbd7 	bl	80028c6 <HAL_ADC_PollForConversion>

		data[i] = HAL_ADC_GetValue(hadc);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f001 fc5f 	bl	80029dc <HAL_ADC_GetValue>
 800111e:	4602      	mov	r2, r0
 8001120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	3360      	adds	r3, #96	@ 0x60
 8001126:	443b      	add	r3, r7
 8001128:	f843 2c54 	str.w	r2, [r3, #-84]

		HAL_ADC_Stop(hadc);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f001 fb97 	bl	8002860 <HAL_ADC_Stop>
	for (int i = 0; i < numOfReadings; i++)
 8001132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001134:	3301      	adds	r3, #1
 8001136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	dbe4      	blt.n	800110a <ADC_GetAverageValue+0x36>
	}

	max = data[0];
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	65fb      	str	r3, [r7, #92]	@ 0x5c

	for (int i = 1; i < 10; i++)
 8001144:	2301      	movs	r3, #1
 8001146:	647b      	str	r3, [r7, #68]	@ 0x44
 8001148:	e014      	b.n	8001174 <ADC_GetAverageValue+0xa0>
	{
		if (data[i] > max)
 800114a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	3360      	adds	r3, #96	@ 0x60
 8001150:	443b      	add	r3, r7
 8001152:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001158:	429a      	cmp	r2, r3
 800115a:	d908      	bls.n	800116e <ADC_GetAverageValue+0x9a>
		{
			max = data[i];
 800115c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	3360      	adds	r3, #96	@ 0x60
 8001162:	443b      	add	r3, r7
 8001164:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001168:	65fb      	str	r3, [r7, #92]	@ 0x5c
			maxIndex = i;
 800116a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800116c:	657b      	str	r3, [r7, #84]	@ 0x54
	for (int i = 1; i < 10; i++)
 800116e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001170:	3301      	adds	r3, #1
 8001172:	647b      	str	r3, [r7, #68]	@ 0x44
 8001174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001176:	2b09      	cmp	r3, #9
 8001178:	dde7      	ble.n	800114a <ADC_GetAverageValue+0x76>
		}
	}

	min = data[0];
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	65bb      	str	r3, [r7, #88]	@ 0x58

	for (int i = 1; i < 10; i++)
 800117e:	2301      	movs	r3, #1
 8001180:	643b      	str	r3, [r7, #64]	@ 0x40
 8001182:	e014      	b.n	80011ae <ADC_GetAverageValue+0xda>
	{
		if (data[i] < min)
 8001184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	3360      	adds	r3, #96	@ 0x60
 800118a:	443b      	add	r3, r7
 800118c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001190:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001192:	429a      	cmp	r2, r3
 8001194:	d208      	bcs.n	80011a8 <ADC_GetAverageValue+0xd4>
		{
			min = data[i];
 8001196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	3360      	adds	r3, #96	@ 0x60
 800119c:	443b      	add	r3, r7
 800119e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80011a2:	65bb      	str	r3, [r7, #88]	@ 0x58
			minIndex = i;
 80011a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011a6:	653b      	str	r3, [r7, #80]	@ 0x50
	for (int i = 1; i < 10; i++)
 80011a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011aa:	3301      	adds	r3, #1
 80011ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80011ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	dde7      	ble.n	8001184 <ADC_GetAverageValue+0xb0>
		}
	}

	for (int i = 0; i < 10; i++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011b8:	e015      	b.n	80011e6 <ADC_GetAverageValue+0x112>
	{
		if (i == minIndex || i == maxIndex)
 80011ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011be:	429a      	cmp	r2, r3
 80011c0:	d00d      	beq.n	80011de <ADC_GetAverageValue+0x10a>
 80011c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d009      	beq.n	80011de <ADC_GetAverageValue+0x10a>
		{
      sum += 0;
		}
		else
		{
			sum += data[i];
 80011ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	3360      	adds	r3, #96	@ 0x60
 80011d0:	443b      	add	r3, r7
 80011d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80011d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011d8:	4413      	add	r3, r2
 80011da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011dc:	e000      	b.n	80011e0 <ADC_GetAverageValue+0x10c>
      sum += 0;
 80011de:	bf00      	nop
	for (int i = 0; i < 10; i++)
 80011e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011e2:	3301      	adds	r3, #1
 80011e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011e8:	2b09      	cmp	r3, #9
 80011ea:	dde6      	ble.n	80011ba <ADC_GetAverageValue+0xe6>
		}
	}

	average = sum / 8;
 80011ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	637b      	str	r3, [r7, #52]	@ 0x34

	data[maxIndex] = average;
 80011f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	3360      	adds	r3, #96	@ 0x60
 80011f8:	443b      	add	r3, r7
 80011fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011fc:	f843 2c54 	str.w	r2, [r3, #-84]

	data[minIndex] = average;
 8001200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	3360      	adds	r3, #96	@ 0x60
 8001206:	443b      	add	r3, r7
 8001208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800120a:	f843 2c54 	str.w	r2, [r3, #-84]

	sum = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	64fb      	str	r3, [r7, #76]	@ 0x4c

	for (int i = 0; i < 10; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001216:	e00b      	b.n	8001230 <ADC_GetAverageValue+0x15c>
	{
		sum += data[i];
 8001218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	3360      	adds	r3, #96	@ 0x60
 800121e:	443b      	add	r3, r7
 8001220:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001224:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001226:	4413      	add	r3, r2
 8001228:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (int i = 0; i < 10; i++)
 800122a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800122c:	3301      	adds	r3, #1
 800122e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001232:	2b09      	cmp	r3, #9
 8001234:	ddf0      	ble.n	8001218 <ADC_GetAverageValue+0x144>
	}

	average = sum / 10;
 8001236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001238:	4a04      	ldr	r2, [pc, #16]	@ (800124c <ADC_GetAverageValue+0x178>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	08db      	lsrs	r3, r3, #3
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34

	return (average);
 8001242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001244:	4618      	mov	r0, r3
 8001246:	3760      	adds	r7, #96	@ 0x60
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	cccccccd 	.word	0xcccccccd

08001250 <ignitionTask>:
}
*/

// Handles Vehicle Ignition Process
void ignitionTask()
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	buttonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8001254:	2101      	movs	r1, #1
 8001256:	481c      	ldr	r0, [pc, #112]	@ (80012c8 <ignitionTask+0x78>)
 8001258:	f002 fca4 	bl	8003ba4 <HAL_GPIO_ReadPin>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <ignitionTask+0x7c>)
 8001262:	701a      	strb	r2, [r3, #0]

	buttonPressTime = HAL_GetTick();
 8001264:	f001 f9da 	bl	800261c <HAL_GetTick>
 8001268:	4603      	mov	r3, r0
 800126a:	4a19      	ldr	r2, [pc, #100]	@ (80012d0 <ignitionTask+0x80>)
 800126c:	6013      	str	r3, [r2, #0]

	while (buttonState == GPIO_PIN_RESET)
 800126e:	e023      	b.n	80012b8 <ignitionTask+0x68>
	{
		if (HAL_GetTick() - buttonPressTime > 50)
 8001270:	f001 f9d4 	bl	800261c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <ignitionTask+0x80>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b32      	cmp	r3, #50	@ 0x32
 800127e:	d913      	bls.n	80012a8 <ignitionTask+0x58>
		{
			startNode();
 8001280:	f7ff fd5c 	bl	8000d3c <startNode>
			clearErrors();
 8001284:	f7ff fd90 	bl	8000da8 <clearErrors>

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2110      	movs	r1, #16
 800128c:	480e      	ldr	r0, [pc, #56]	@ (80012c8 <ignitionTask+0x78>)
 800128e:	f002 fca1 	bl	8003bd4 <HAL_GPIO_WritePin>

			TIM2->CNT = 0;
 8001292:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800129a:	2100      	movs	r1, #0
 800129c:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <ignitionTask+0x84>)
 800129e:	f003 fbd3 	bl	8004a48 <HAL_TIM_OC_Start_IT>

			enableCar = true;
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <ignitionTask+0x88>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
		}

		buttonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80012a8:	2101      	movs	r1, #1
 80012aa:	4807      	ldr	r0, [pc, #28]	@ (80012c8 <ignitionTask+0x78>)
 80012ac:	f002 fc7a 	bl	8003ba4 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <ignitionTask+0x7c>)
 80012b6:	701a      	strb	r2, [r3, #0]
	while (buttonState == GPIO_PIN_RESET)
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <ignitionTask+0x7c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0d7      	beq.n	8001270 <ignitionTask+0x20>
	}
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40020400 	.word	0x40020400
 80012cc:	2000042c 	.word	0x2000042c
 80012d0:	20000430 	.word	0x20000430
 80012d4:	20000384 	.word	0x20000384
 80012d8:	2000042d 	.word	0x2000042d

080012dc <map>:
		return false;
	}
}

// General purpose map function
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	69b9      	ldr	r1, [r7, #24]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	1a8a      	subs	r2, r1, r2
 80012f6:	fb03 f202 	mul.w	r2, r3, r2
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	fb92 f2f3 	sdiv	r2, r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4413      	add	r3, r2
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <constrain>:

// General constrain function
long constrain(long x, long out_min, long out_max)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	if (x < out_min)
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	429a      	cmp	r2, r3
 8001326:	da01      	bge.n	800132c <constrain+0x18>
	{
		return out_min;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	e006      	b.n	800133a <constrain+0x26>
	}

	if (x > out_max)
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	429a      	cmp	r2, r3
 8001332:	dd01      	ble.n	8001338 <constrain+0x24>
	{
		return out_max;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	e000      	b.n	800133a <constrain+0x26>
	}

	return x;
 8001338:	68fb      	ldr	r3, [r7, #12]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <primaryPotErrorCheck>:

// Primary Pedal position sensor range check
void primaryPotErrorCheck()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	primaryPotValue = constrain(ADC_GetAverageValue(&hadc1, 10), 0, 1023);
 800134c:	210a      	movs	r1, #10
 800134e:	4811      	ldr	r0, [pc, #68]	@ (8001394 <primaryPotErrorCheck+0x4c>)
 8001350:	f7ff fec0 	bl	80010d4 <ADC_GetAverageValue>
 8001354:	4603      	mov	r3, r0
 8001356:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffd9 	bl	8001314 <constrain>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <primaryPotErrorCheck+0x50>)
 8001368:	601a      	str	r2, [r3, #0]

	if (primaryPotValue <= 0 || primaryPotValue >= 550)
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <primaryPotErrorCheck+0x50>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <primaryPotErrorCheck+0x36>
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <primaryPotErrorCheck+0x50>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f240 2225 	movw	r2, #549	@ 0x225
 800137a:	4293      	cmp	r3, r2
 800137c:	d903      	bls.n	8001386 <primaryPotErrorCheck+0x3e>
	{
		errorSet[0] = true;
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <primaryPotErrorCheck+0x54>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	e003      	b.n	800138e <primaryPotErrorCheck+0x46>
	}
	else
	{
		errorSet[0] = false;
 8001386:	4b05      	ldr	r3, [pc, #20]	@ (800139c <primaryPotErrorCheck+0x54>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
	}
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000284 	.word	0x20000284
 8001398:	20000438 	.word	0x20000438
 800139c:	20000434 	.word	0x20000434

080013a0 <secondaryPotErrorCheck>:

// Secondary Pedal position sensor range check
void secondaryPotErrorCheck()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	secondaryPotValue = constrain(ADC_GetAverageValue(&hadc2, 10), 0, 1023);
 80013a4:	210a      	movs	r1, #10
 80013a6:	4811      	ldr	r0, [pc, #68]	@ (80013ec <secondaryPotErrorCheck+0x4c>)
 80013a8:	f7ff fe94 	bl	80010d4 <ADC_GetAverageValue>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ffad 	bl	8001314 <constrain>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <secondaryPotErrorCheck+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]

	if (secondaryPotValue <= 0 || secondaryPotValue >= 550)
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <secondaryPotErrorCheck+0x50>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <secondaryPotErrorCheck+0x36>
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <secondaryPotErrorCheck+0x50>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f240 2225 	movw	r2, #549	@ 0x225
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d903      	bls.n	80013de <secondaryPotErrorCheck+0x3e>
	{
		errorSet[1] = true;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <secondaryPotErrorCheck+0x54>)
 80013d8:	2201      	movs	r2, #1
 80013da:	705a      	strb	r2, [r3, #1]
 80013dc:	e003      	b.n	80013e6 <secondaryPotErrorCheck+0x46>
	}
	else
	{
		errorSet[1] = false;
 80013de:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <secondaryPotErrorCheck+0x54>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	705a      	strb	r2, [r3, #1]
	}
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200002cc 	.word	0x200002cc
 80013f0:	2000043c 	.word	0x2000043c
 80013f4:	20000434 	.word	0x20000434

080013f8 <torqueControl>:
	}
}

// Torque Control and Regenerative Braking Function
void torqueControl()
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af02      	add	r7, sp, #8

	if (errorSet[0] == true && errorSet[1] == true)
 80013fe:	4b54      	ldr	r3, [pc, #336]	@ (8001550 <torqueControl+0x158>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <torqueControl+0x20>
 8001406:	4b52      	ldr	r3, [pc, #328]	@ (8001550 <torqueControl+0x158>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d104      	bne.n	8001418 <torqueControl+0x20>
	{
		torqueRefLimit = 5000;
 800140e:	4b51      	ldr	r3, [pc, #324]	@ (8001554 <torqueControl+0x15c>)
 8001410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e05f      	b.n	80014d8 <torqueControl+0xe0>
	}
	else if (errorSet[0] == true)
 8001418:	4b4d      	ldr	r3, [pc, #308]	@ (8001550 <torqueControl+0x158>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d12e      	bne.n	800147e <torqueControl+0x86>
	{
		secondaryPotValue = constrain(ADC_GetAverageValue(&hadc2, 10), 0, 1023);
 8001420:	210a      	movs	r1, #10
 8001422:	484d      	ldr	r0, [pc, #308]	@ (8001558 <torqueControl+0x160>)
 8001424:	f7ff fe56 	bl	80010d4 <ADC_GetAverageValue>
 8001428:	4603      	mov	r3, r0
 800142a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff6f 	bl	8001314 <constrain>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	4b48      	ldr	r3, [pc, #288]	@ (800155c <torqueControl+0x164>)
 800143c:	601a      	str	r2, [r3, #0]

		torqueRefLimit = map(secondaryPotValue, THROTTLE_POSITION_MIN_2, THROTTLE_POSITION_MAX_2, TORQUE_REF_LIM_MIN, TORQUE_REF_LIM_MAX);
 800143e:	4b47      	ldr	r3, [pc, #284]	@ (800155c <torqueControl+0x164>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	461c      	mov	r4, r3
 8001444:	f240 113b 	movw	r1, #315	@ 0x13b
 8001448:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 800144c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001450:	f242 531c 	movw	r3, #9500	@ 0x251c
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	4603      	mov	r3, r0
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff ff3f 	bl	80012dc <map>
 800145e:	4603      	mov	r3, r0
 8001460:	4a3c      	ldr	r2, [pc, #240]	@ (8001554 <torqueControl+0x15c>)
 8001462:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIM_MIN, TORQUE_REF_LIM_MAX);
 8001464:	4b3b      	ldr	r3, [pc, #236]	@ (8001554 <torqueControl+0x15c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f241 3188 	movw	r1, #5000	@ 0x1388
 800146c:	f242 521c 	movw	r2, #9500	@ 0x251c
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff4f 	bl	8001314 <constrain>
 8001476:	4603      	mov	r3, r0
 8001478:	4a36      	ldr	r2, [pc, #216]	@ (8001554 <torqueControl+0x15c>)
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e02c      	b.n	80014d8 <torqueControl+0xe0>
	}
	else
	{
		primaryPotValue = constrain(ADC_GetAverageValue(&hadc1, 10), 0, 1023);
 800147e:	210a      	movs	r1, #10
 8001480:	4837      	ldr	r0, [pc, #220]	@ (8001560 <torqueControl+0x168>)
 8001482:	f7ff fe27 	bl	80010d4 <ADC_GetAverageValue>
 8001486:	4603      	mov	r3, r0
 8001488:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff40 	bl	8001314 <constrain>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <torqueControl+0x16c>)
 800149a:	601a      	str	r2, [r3, #0]

		torqueRefLimit = map(primaryPotValue, THROTTLE_POSITION_MIN_1, THROTTLE_POSITION_MAX_1, TORQUE_REF_LIM_MIN, TORQUE_REF_LIM_MAX);
 800149c:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <torqueControl+0x16c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80014a6:	22ea      	movs	r2, #234	@ 0xea
 80014a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014ac:	f242 531c 	movw	r3, #9500	@ 0x251c
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	4603      	mov	r3, r0
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff ff11 	bl	80012dc <map>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a25      	ldr	r2, [pc, #148]	@ (8001554 <torqueControl+0x15c>)
 80014be:	6013      	str	r3, [r2, #0]

		torqueRefLimit = constrain(torqueRefLimit, TORQUE_REF_LIM_MIN, TORQUE_REF_LIM_MAX);
 80014c0:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <torqueControl+0x15c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80014c8:	f242 521c 	movw	r2, #9500	@ 0x251c
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff21 	bl	8001314 <constrain>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001554 <torqueControl+0x15c>)
 80014d6:	6013      	str	r3, [r2, #0]
	}

	brakePressure = ADC_GetAverageValue(&hadc3, 10);
 80014d8:	210a      	movs	r1, #10
 80014da:	4823      	ldr	r0, [pc, #140]	@ (8001568 <torqueControl+0x170>)
 80014dc:	f7ff fdfa 	bl	80010d4 <ADC_GetAverageValue>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b21      	ldr	r3, [pc, #132]	@ (800156c <torqueControl+0x174>)
 80014e6:	801a      	strh	r2, [r3, #0]

    brakePressure += 44;
 80014e8:	4b20      	ldr	r3, [pc, #128]	@ (800156c <torqueControl+0x174>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	332c      	adds	r3, #44	@ 0x2c
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <torqueControl+0x174>)
 80014f2:	801a      	strh	r2, [r3, #0]

	if (brakePressure > 110 && brakePressure < 127)
 80014f4:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <torqueControl+0x174>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	2b6e      	cmp	r3, #110	@ 0x6e
 80014fa:	d921      	bls.n	8001540 <torqueControl+0x148>
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <torqueControl+0x174>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	2b7e      	cmp	r3, #126	@ 0x7e
 8001502:	d81d      	bhi.n	8001540 <torqueControl+0x148>
	{
		 if (rpm > 200 && errorSet[0] == false && errorSet[1] == false && errorSet[2] == false)
 8001504:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <torqueControl+0x178>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2bc8      	cmp	r3, #200	@ 0xc8
 800150a:	dd19      	ble.n	8001540 <torqueControl+0x148>
 800150c:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <torqueControl+0x158>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d115      	bne.n	8001540 <torqueControl+0x148>
 8001514:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <torqueControl+0x158>)
 8001516:	785b      	ldrb	r3, [r3, #1]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d111      	bne.n	8001540 <torqueControl+0x148>
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <torqueControl+0x158>)
 800151e:	789b      	ldrb	r3, [r3, #2]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10d      	bne.n	8001540 <torqueControl+0x148>
		 {
			 torqueRefLimit = map(torqueRefLimit, 110, 127, 5000, 4500);
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <torqueControl+0x15c>)
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	f241 1394 	movw	r3, #4500	@ 0x1194
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001532:	227f      	movs	r2, #127	@ 0x7f
 8001534:	216e      	movs	r1, #110	@ 0x6e
 8001536:	f7ff fed1 	bl	80012dc <map>
 800153a:	4603      	mov	r3, r0
 800153c:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <torqueControl+0x15c>)
 800153e:	6013      	str	r3, [r2, #0]
		 }
	}



	torqueControlMessage(&torqueRefLimit, &SPEED_REF_LIMIT);
 8001540:	490c      	ldr	r1, [pc, #48]	@ (8001574 <torqueControl+0x17c>)
 8001542:	4804      	ldr	r0, [pc, #16]	@ (8001554 <torqueControl+0x15c>)
 8001544:	f7ff fcd8 	bl	8000ef8 <torqueControlMessage>
}
 8001548:	bf00      	nop
 800154a:	3704      	adds	r7, #4
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	20000434 	.word	0x20000434
 8001554:	20000000 	.word	0x20000000
 8001558:	200002cc 	.word	0x200002cc
 800155c:	2000043c 	.word	0x2000043c
 8001560:	20000284 	.word	0x20000284
 8001564:	20000438 	.word	0x20000438
 8001568:	20000314 	.word	0x20000314
 800156c:	200004a4 	.word	0x200004a4
 8001570:	20000490 	.word	0x20000490
 8001574:	08007570 	.word	0x08007570

08001578 <HAL_TIM_OC_DelayElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// RTD Speaker interrupt handler
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2110      	movs	r1, #16
 8001584:	4805      	ldr	r0, [pc, #20]	@ (800159c <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8001586:	f002 fb25 	bl	8003bd4 <HAL_GPIO_WritePin>

	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 800158a:	2100      	movs	r1, #0
 800158c:	4804      	ldr	r0, [pc, #16]	@ (80015a0 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 800158e:	f003 fb71 	bl	8004c74 <HAL_TIM_OC_Stop_IT>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40020400 	.word	0x40020400
 80015a0:	20000384 	.word	0x20000384

080015a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b0aa      	sub	sp, #168	@ 0xa8
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015aa:	f001 f801 	bl	80025b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ae:	f000 f8c1 	bl	8001734 <SystemClock_Config>
  //vTraceEnable(TRC_START);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b2:	f000 fb7f 	bl	8001cb4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80015b6:	f000 f929 	bl	800180c <MX_ADC1_Init>
  MX_ADC2_Init();
 80015ba:	f000 f97b 	bl	80018b4 <MX_ADC2_Init>
  MX_CAN1_Init();
 80015be:	f000 fa21 	bl	8001a04 <MX_CAN1_Init>
  MX_TIM2_Init();
 80015c2:	f000 fa57 	bl	8001a74 <MX_TIM2_Init>
  MX_TIM8_Init();
 80015c6:	f000 fac9 	bl	8001b5c <MX_TIM8_Init>
  MX_ADC3_Init();
 80015ca:	f000 f9c7 	bl	800195c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  // Iniitialize CAN Protocol
  HAL_CAN_Start(&hcan1);
 80015ce:	4848      	ldr	r0, [pc, #288]	@ (80016f0 <main+0x14c>)
 80015d0:	f001 fe1c 	bl	800320c <HAL_CAN_Start>

  // Pump and Fan PWM
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80015d4:	2108      	movs	r1, #8
 80015d6:	4847      	ldr	r0, [pc, #284]	@ (80016f4 <main+0x150>)
 80015d8:	f003 fc64 	bl	8004ea4 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80015dc:	210c      	movs	r1, #12
 80015de:	4845      	ldr	r0, [pc, #276]	@ (80016f4 <main+0x150>)
 80015e0:	f003 fc60 	bl	8004ea4 <HAL_TIM_PWM_Start>

  TIM8->CCR3 = 50;
 80015e4:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <main+0x154>)
 80015e6:	2232      	movs	r2, #50	@ 0x32
 80015e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  TIM8->CCR4 = 50;
 80015ea:	4b43      	ldr	r3, [pc, #268]	@ (80016f8 <main+0x154>)
 80015ec:	2232      	movs	r2, #50	@ 0x32
 80015ee:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015f6:	4841      	ldr	r0, [pc, #260]	@ (80016fc <main+0x158>)
 80015f8:	f002 faec 	bl	8003bd4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2120      	movs	r1, #32
 8001600:	483f      	ldr	r0, [pc, #252]	@ (8001700 <main+0x15c>)
 8001602:	f002 fae7 	bl	8003bd4 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TorqueControl */
  osThreadDef(TorqueControl, StartDefaultTask, osPriorityNormal, 0, 200);
 8001606:	4b3f      	ldr	r3, [pc, #252]	@ (8001704 <main+0x160>)
 8001608:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800160c:	461d      	mov	r5, r3
 800160e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TorqueControlHandle = osThreadCreate(osThread(TorqueControl), NULL);
 800161a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f004 fc24 	bl	8005e6e <osThreadCreate>
 8001626:	4603      	mov	r3, r0
 8001628:	4a37      	ldr	r2, [pc, #220]	@ (8001708 <main+0x164>)
 800162a:	6013      	str	r3, [r2, #0]

  /* definition and creation of NodeGuarding */
  osThreadDef(NodeGuarding, StartTask02, osPriorityAboveNormal, 0, 200);
 800162c:	4b37      	ldr	r3, [pc, #220]	@ (800170c <main+0x168>)
 800162e:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001632:	461d      	mov	r5, r3
 8001634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800163c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NodeGuardingHandle = osThreadCreate(osThread(NodeGuarding), NULL);
 8001640:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f004 fc11 	bl	8005e6e <osThreadCreate>
 800164c:	4603      	mov	r3, r0
 800164e:	4a30      	ldr	r2, [pc, #192]	@ (8001710 <main+0x16c>)
 8001650:	6013      	str	r3, [r2, #0]

  /* definition and creation of OrionData */
  osThreadDef(OrionData, StartTask04, osPriorityNormal, 0, 200);
 8001652:	4b30      	ldr	r3, [pc, #192]	@ (8001714 <main+0x170>)
 8001654:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001658:	461d      	mov	r5, r3
 800165a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrionDataHandle = osThreadCreate(osThread(OrionData), NULL);
 8001666:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f004 fbfe 	bl	8005e6e <osThreadCreate>
 8001672:	4603      	mov	r3, r0
 8001674:	4a28      	ldr	r2, [pc, #160]	@ (8001718 <main+0x174>)
 8001676:	6013      	str	r3, [r2, #0]

  /* definition and creation of PWM */
  osThreadDef(PWM, StartTask05, osPriorityNormal, 0, 200);
 8001678:	4b28      	ldr	r3, [pc, #160]	@ (800171c <main+0x178>)
 800167a:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800167e:	461d      	mov	r5, r3
 8001680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PWMHandle = osThreadCreate(osThread(PWM), NULL);
 800168c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f004 fbeb 	bl	8005e6e <osThreadCreate>
 8001698:	4603      	mov	r3, r0
 800169a:	4a21      	ldr	r2, [pc, #132]	@ (8001720 <main+0x17c>)
 800169c:	6013      	str	r3, [r2, #0]

  /* definition and creation of OrionDerateData */
  osThreadDef(OrionDerateData, StartTask06, osPriorityNormal, 0, 200);
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <main+0x180>)
 80016a0:	f107 041c 	add.w	r4, r7, #28
 80016a4:	461d      	mov	r5, r3
 80016a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrionDerateDataHandle = osThreadCreate(osThread(OrionDerateData), NULL);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f004 fbd8 	bl	8005e6e <osThreadCreate>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a19      	ldr	r2, [pc, #100]	@ (8001728 <main+0x184>)
 80016c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Ignition */
  osThreadDef(Ignition, StartTask06, osPriorityNormal, 0, 200);
 80016c4:	4b19      	ldr	r3, [pc, #100]	@ (800172c <main+0x188>)
 80016c6:	463c      	mov	r4, r7
 80016c8:	461d      	mov	r5, r3
 80016ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IgnitionHandle = osThreadCreate(osThread(Ignition), NULL);
 80016d6:	463b      	mov	r3, r7
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fbc7 	bl	8005e6e <osThreadCreate>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a13      	ldr	r2, [pc, #76]	@ (8001730 <main+0x18c>)
 80016e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016e6:	f004 fbbb 	bl	8005e60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ea:	bf00      	nop
 80016ec:	e7fd      	b.n	80016ea <main+0x146>
 80016ee:	bf00      	nop
 80016f0:	2000035c 	.word	0x2000035c
 80016f4:	200003cc 	.word	0x200003cc
 80016f8:	40010400 	.word	0x40010400
 80016fc:	40020400 	.word	0x40020400
 8001700:	40020800 	.word	0x40020800
 8001704:	08007484 	.word	0x08007484
 8001708:	20000414 	.word	0x20000414
 800170c:	080074b0 	.word	0x080074b0
 8001710:	20000418 	.word	0x20000418
 8001714:	080074d8 	.word	0x080074d8
 8001718:	2000041c 	.word	0x2000041c
 800171c:	080074f8 	.word	0x080074f8
 8001720:	20000420 	.word	0x20000420
 8001724:	08007524 	.word	0x08007524
 8001728:	20000424 	.word	0x20000424
 800172c:	0800754c 	.word	0x0800754c
 8001730:	20000428 	.word	0x20000428

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b094      	sub	sp, #80	@ 0x50
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	2234      	movs	r2, #52	@ 0x34
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f005 fe4e 	bl	80073e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <SystemClock_Config+0xd0>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	4a28      	ldr	r2, [pc, #160]	@ (8001804 <SystemClock_Config+0xd0>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001766:	6413      	str	r3, [r2, #64]	@ 0x40
 8001768:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <SystemClock_Config+0xd0>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001774:	2300      	movs	r3, #0
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <SystemClock_Config+0xd4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001780:	4a21      	ldr	r2, [pc, #132]	@ (8001808 <SystemClock_Config+0xd4>)
 8001782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <SystemClock_Config+0xd4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001794:	2302      	movs	r3, #2
 8001796:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001798:	2301      	movs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800179c:	2310      	movs	r3, #16
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a0:	2302      	movs	r3, #2
 80017a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017a8:	2308      	movs	r3, #8
 80017aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80017ac:	235a      	movs	r3, #90	@ 0x5a
 80017ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fd89 	bl	80042d8 <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80017cc:	f000 fc74 	bl	80020b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2302      	movs	r3, #2
 80017d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	2102      	movs	r1, #2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fa0b 	bl	8003c08 <HAL_RCC_ClockConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80017f8:	f000 fc5e 	bl	80020b8 <Error_Handler>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3750      	adds	r7, #80	@ 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000

0800180c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001812:	463b      	mov	r3, r7
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800181e:	4b22      	ldr	r3, [pc, #136]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 8001820:	4a22      	ldr	r2, [pc, #136]	@ (80018ac <MX_ADC1_Init+0xa0>)
 8001822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001824:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 8001826:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800182a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800182c:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 800182e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001832:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001834:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800183a:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 800183c:	2200      	movs	r2, #0
 800183e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001848:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 800184a:	2200      	movs	r2, #0
 800184c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800184e:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 8001850:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <MX_ADC1_Init+0xa4>)
 8001852:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800185a:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 800185c:	2201      	movs	r2, #1
 800185e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 800186a:	2201      	movs	r2, #1
 800186c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800186e:	480e      	ldr	r0, [pc, #56]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 8001870:	f000 fee0 	bl	8002634 <HAL_ADC_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800187a:	f000 fc1d 	bl	80020b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800187e:	230b      	movs	r3, #11
 8001880:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001882:	2301      	movs	r3, #1
 8001884:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001886:	2303      	movs	r3, #3
 8001888:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800188a:	463b      	mov	r3, r7
 800188c:	4619      	mov	r1, r3
 800188e:	4806      	ldr	r0, [pc, #24]	@ (80018a8 <MX_ADC1_Init+0x9c>)
 8001890:	f001 f8b2 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800189a:	f000 fc0d 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000284 	.word	0x20000284
 80018ac:	40012000 	.word	0x40012000
 80018b0:	0f000001 	.word	0x0f000001

080018b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ba:	463b      	mov	r3, r7
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <MX_ADC2_Init+0x9c>)
 80018c8:	4a22      	ldr	r2, [pc, #136]	@ (8001954 <MX_ADC2_Init+0xa0>)
 80018ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80018cc:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <MX_ADC2_Init+0x9c>)
 80018ce:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80018d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 80018d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001950 <MX_ADC2_Init+0x9c>)
 80018d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80018dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <MX_ADC2_Init+0x9c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <MX_ADC2_Init+0x9c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <MX_ADC2_Init+0x9c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018f0:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <MX_ADC2_Init+0x9c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f6:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <MX_ADC2_Init+0x9c>)
 80018f8:	4a17      	ldr	r2, [pc, #92]	@ (8001958 <MX_ADC2_Init+0xa4>)
 80018fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <MX_ADC2_Init+0x9c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001902:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <MX_ADC2_Init+0x9c>)
 8001904:	2201      	movs	r2, #1
 8001906:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <MX_ADC2_Init+0x9c>)
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001910:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <MX_ADC2_Init+0x9c>)
 8001912:	2201      	movs	r2, #1
 8001914:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001916:	480e      	ldr	r0, [pc, #56]	@ (8001950 <MX_ADC2_Init+0x9c>)
 8001918:	f000 fe8c 	bl	8002634 <HAL_ADC_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001922:	f000 fbc9 	bl	80020b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001926:	230c      	movs	r3, #12
 8001928:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800192a:	2301      	movs	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800192e:	2303      	movs	r3, #3
 8001930:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001932:	463b      	mov	r3, r7
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	@ (8001950 <MX_ADC2_Init+0x9c>)
 8001938:	f001 f85e 	bl	80029f8 <HAL_ADC_ConfigChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001942:	f000 fbb9 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200002cc 	.word	0x200002cc
 8001954:	40012100 	.word	0x40012100
 8001958:	0f000001 	.word	0x0f000001

0800195c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001962:	463b      	mov	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800196e:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 8001970:	4a22      	ldr	r2, [pc, #136]	@ (80019fc <MX_ADC3_Init+0xa0>)
 8001972:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001974:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 8001976:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800197a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 800197c:	4b1e      	ldr	r3, [pc, #120]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 800197e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001982:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001984:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 800198c:	2200      	movs	r2, #0
 800198e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001990:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 800199a:	2200      	movs	r2, #0
 800199c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800199e:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 80019a0:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <MX_ADC3_Init+0xa4>)
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80019be:	480e      	ldr	r0, [pc, #56]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 80019c0:	f000 fe38 	bl	8002634 <HAL_ADC_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 80019ca:	f000 fb75 	bl	80020b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80019ce:	230d      	movs	r3, #13
 80019d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80019d6:	2303      	movs	r3, #3
 80019d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019da:	463b      	mov	r3, r7
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	@ (80019f8 <MX_ADC3_Init+0x9c>)
 80019e0:	f001 f80a 	bl	80029f8 <HAL_ADC_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 80019ea:	f000 fb65 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000314 	.word	0x20000314
 80019fc:	40012200 	.word	0x40012200
 8001a00:	0f000001 	.word	0x0f000001

08001a04 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a08:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a0a:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <MX_CAN1_Init+0x6c>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a10:	2205      	movs	r2, #5
 8001a12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a22:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a28:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a2e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a36:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a54:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <MX_CAN1_Init+0x68>)
 8001a56:	f001 f9fd 	bl	8002e54 <HAL_CAN_Init>
  {
    //Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  motorAndControllerTempFilterConfig();
 8001a5a:	f7ff facd 	bl	8000ff8 <motorAndControllerTempFilterConfig>

  motorRPMFilterConfig();
 8001a5e:	f7ff faf5 	bl	800104c <motorRPMFilterConfig>

  orionFilterConfig();
 8001a62:	f7ff fa9f 	bl	8000fa4 <orionFilterConfig>

  //orionFilterConfig_1();

  /* USER CODE END CAN1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2000035c 	.word	0x2000035c
 8001a70:	40006400 	.word	0x40006400

08001a74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08e      	sub	sp, #56	@ 0x38
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
 8001aa0:	615a      	str	r2, [r3, #20]
 8001aa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b58 <MX_TIM2_Init+0xe4>)
 8001aa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000-1;
 8001aac:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <MX_TIM2_Init+0xe4>)
 8001aae:	f244 624f 	movw	r2, #17999	@ 0x464f
 8001ab2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b28      	ldr	r3, [pc, #160]	@ (8001b58 <MX_TIM2_Init+0xe4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001aba:	4b27      	ldr	r3, [pc, #156]	@ (8001b58 <MX_TIM2_Init+0xe4>)
 8001abc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ac0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <MX_TIM2_Init+0xe4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <MX_TIM2_Init+0xe4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ace:	4822      	ldr	r0, [pc, #136]	@ (8001b58 <MX_TIM2_Init+0xe4>)
 8001ad0:	f002 fea0 	bl	8004814 <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ada:	f000 faed 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ae4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	481b      	ldr	r0, [pc, #108]	@ (8001b58 <MX_TIM2_Init+0xe4>)
 8001aec:	f003 fcc8 	bl	8005480 <HAL_TIM_ConfigClockSource>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001af6:	f000 fadf 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001afa:	4817      	ldr	r0, [pc, #92]	@ (8001b58 <MX_TIM2_Init+0xe4>)
 8001afc:	f002 ff4a 	bl	8004994 <HAL_TIM_OC_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b06:	f000 fad7 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b12:	f107 0320 	add.w	r3, r7, #32
 8001b16:	4619      	mov	r1, r3
 8001b18:	480f      	ldr	r0, [pc, #60]	@ (8001b58 <MX_TIM2_Init+0xe4>)
 8001b1a:	f004 f8a7 	bl	8005c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b24:	f000 fac8 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8001b2c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <MX_TIM2_Init+0xe4>)
 8001b42:	f003 fb7f 	bl	8005244 <HAL_TIM_OC_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001b4c:	f000 fab4 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	3738      	adds	r7, #56	@ 0x38
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000384 	.word	0x20000384

08001b5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b096      	sub	sp, #88	@ 0x58
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b62:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b70:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	615a      	str	r2, [r3, #20]
 8001b8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2220      	movs	r2, #32
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 fc25 	bl	80073e4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b9a:	4b44      	ldr	r3, [pc, #272]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001b9c:	4a44      	ldr	r2, [pc, #272]	@ (8001cb0 <MX_TIM8_Init+0x154>)
 8001b9e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 36-1;
 8001ba0:	4b42      	ldr	r3, [pc, #264]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001ba2:	2223      	movs	r2, #35	@ 0x23
 8001ba4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba6:	4b41      	ldr	r3, [pc, #260]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8001bac:	4b3f      	ldr	r3, [pc, #252]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001bae:	2263      	movs	r2, #99	@ 0x63
 8001bb0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001bc4:	4839      	ldr	r0, [pc, #228]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001bc6:	f002 fe25 	bl	8004814 <HAL_TIM_Base_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001bd0:	f000 fa72 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bda:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bde:	4619      	mov	r1, r3
 8001be0:	4832      	ldr	r0, [pc, #200]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001be2:	f003 fc4d 	bl	8005480 <HAL_TIM_ConfigClockSource>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001bec:	f000 fa64 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bf0:	482e      	ldr	r0, [pc, #184]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001bf2:	f003 f8fd 	bl	8004df0 <HAL_TIM_PWM_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001bfc:	f000 fa5c 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4827      	ldr	r0, [pc, #156]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001c10:	f004 f82c 	bl	8005c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001c1a:	f000 fa4d 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1e:	2360      	movs	r3, #96	@ 0x60
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c3e:	2208      	movs	r2, #8
 8001c40:	4619      	mov	r1, r3
 8001c42:	481a      	ldr	r0, [pc, #104]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001c44:	f003 fb5a 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001c4e:	f000 fa33 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c56:	220c      	movs	r2, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4814      	ldr	r0, [pc, #80]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001c5c:	f003 fb4e 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001c66:	f000 fa27 	bl	80020b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001c8e:	f004 f869 	bl	8005d64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001c98:	f000 fa0e 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c9c:	4803      	ldr	r0, [pc, #12]	@ (8001cac <MX_TIM8_Init+0x150>)
 8001c9e:	f000 fb65 	bl	800236c <HAL_TIM_MspPostInit>

}
 8001ca2:	bf00      	nop
 8001ca4:	3758      	adds	r7, #88	@ 0x58
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200003cc 	.word	0x200003cc
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	@ 0x28
 8001cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b41      	ldr	r3, [pc, #260]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a40      	ldr	r2, [pc, #256]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a39      	ldr	r2, [pc, #228]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b37      	ldr	r3, [pc, #220]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b33      	ldr	r3, [pc, #204]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a32      	ldr	r2, [pc, #200]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 8001d40:	4825      	ldr	r0, [pc, #148]	@ (8001dd8 <MX_GPIO_Init+0x124>)
 8001d42:	f001 ff47 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001d46:	2201      	movs	r2, #1
 8001d48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d4c:	4823      	ldr	r0, [pc, #140]	@ (8001ddc <MX_GPIO_Init+0x128>)
 8001d4e:	f001 ff41 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2110      	movs	r1, #16
 8001d56:	4821      	ldr	r0, [pc, #132]	@ (8001ddc <MX_GPIO_Init+0x128>)
 8001d58:	f001 ff3c 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11;
 8001d5c:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8001d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d66:	2302      	movs	r3, #2
 8001d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	4818      	ldr	r0, [pc, #96]	@ (8001dd8 <MX_GPIO_Init+0x124>)
 8001d76:	f001 fd81 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4813      	ldr	r0, [pc, #76]	@ (8001ddc <MX_GPIO_Init+0x128>)
 8001d8e:	f001 fd75 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da0:	2302      	movs	r3, #2
 8001da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <MX_GPIO_Init+0x128>)
 8001dac:	f001 fd66 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001db0:	2310      	movs	r3, #16
 8001db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4805      	ldr	r0, [pc, #20]	@ (8001ddc <MX_GPIO_Init+0x128>)
 8001dc8:	f001 fd58 	bl	800387c <HAL_GPIO_Init>

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	@ 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020400 	.word	0x40020400

08001de0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) // Torque Control Thread
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;
 8001de8:	230a      	movs	r3, #10
 8001dea:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8001dec:	f004 fc9a 	bl	8006724 <xTaskGetTickCount>
 8001df0:	4603      	mov	r3, r0
 8001df2:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {

	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	68f9      	ldr	r1, [r7, #12]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f004 face 	bl	800639c <vTaskDelayUntil>

	  syncMessage();
 8001e00:	f7ff f842 	bl	8000e88 <syncMessage>

	  vTaskDelay(pdMS_TO_TICKS(2));
 8001e04:	2002      	movs	r0, #2
 8001e06:	f004 fb49 	bl	800649c <vTaskDelay>

	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeaderFIFO1, data);
 8001e0a:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <StartDefaultTask+0x90>)
 8001e0c:	4a19      	ldr	r2, [pc, #100]	@ (8001e74 <StartDefaultTask+0x94>)
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4819      	ldr	r0, [pc, #100]	@ (8001e78 <StartDefaultTask+0x98>)
 8001e12:	f001 fb3e 	bl	8003492 <HAL_CAN_GetRxMessage>

	  if (rxHeaderFIFO1.StdId == 0x3FA)
 8001e16:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <StartDefaultTask+0x94>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d109      	bne.n	8001e36 <StartDefaultTask+0x56>
	  {
		  rpm = ((int)(data[1]<<8) | (int)data[0]) - 32768;
 8001e22:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <StartDefaultTask+0x90>)
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <StartDefaultTask+0x90>)
 8001e2a:	7812      	ldrb	r2, [r2, #0]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8001e32:	4a12      	ldr	r2, [pc, #72]	@ (8001e7c <StartDefaultTask+0x9c>)
 8001e34:	6013      	str	r3, [r2, #0]
	  }

	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeaderFIFO1, data);
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <StartDefaultTask+0x90>)
 8001e38:	4a0e      	ldr	r2, [pc, #56]	@ (8001e74 <StartDefaultTask+0x94>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	480e      	ldr	r0, [pc, #56]	@ (8001e78 <StartDefaultTask+0x98>)
 8001e3e:	f001 fb28 	bl	8003492 <HAL_CAN_GetRxMessage>

	  if (rxHeaderFIFO1.StdId == 0x1BA)
 8001e42:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <StartDefaultTask+0x94>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f5b3 7fdd 	cmp.w	r3, #442	@ 0x1ba
 8001e4a:	d109      	bne.n	8001e60 <StartDefaultTask+0x80>
	  {
		  motorControllerTemp = (int)data[0] - 40;
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <StartDefaultTask+0x90>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	3b28      	subs	r3, #40	@ 0x28
 8001e52:	4a0b      	ldr	r2, [pc, #44]	@ (8001e80 <StartDefaultTask+0xa0>)
 8001e54:	6013      	str	r3, [r2, #0]

		  motorTemp = (int)data[1] - 40;
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <StartDefaultTask+0x90>)
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	3b28      	subs	r3, #40	@ 0x28
 8001e5c:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <StartDefaultTask+0xa4>)
 8001e5e:	6013      	str	r3, [r2, #0]
	  }

	  primaryPotErrorCheck();
 8001e60:	f7ff fa72 	bl	8001348 <primaryPotErrorCheck>

	  secondaryPotErrorCheck();
 8001e64:	f7ff fa9c 	bl	80013a0 <secondaryPotErrorCheck>

	  torqueControl();
 8001e68:	f7ff fac6 	bl	80013f8 <torqueControl>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001e6c:	e7c2      	b.n	8001df4 <StartDefaultTask+0x14>
 8001e6e:	bf00      	nop
 8001e70:	20000480 	.word	0x20000480
 8001e74:	20000464 	.word	0x20000464
 8001e78:	2000035c 	.word	0x2000035c
 8001e7c:	20000490 	.word	0x20000490
 8001e80:	20000498 	.word	0x20000498
 8001e84:	20000494 	.word	0x20000494

08001e88 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument) // Inverter Node Guarding Thread
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 150;
 8001e90:	2396      	movs	r3, #150	@ 0x96
 8001e92:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8001e94:	f004 fc46 	bl	8006724 <xTaskGetTickCount>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	68f9      	ldr	r1, [r7, #12]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 fa7a 	bl	800639c <vTaskDelayUntil>

	  nodeGuarding();
 8001ea8:	f7fe ffb6 	bl	8000e18 <nodeGuarding>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001eac:	bf00      	nop
 8001eae:	e7f5      	b.n	8001e9c <StartTask02+0x14>

08001eb0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument) // BMS Torque Deration Thread
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 95;
 8001eb8:	235f      	movs	r3, #95	@ 0x5f
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	68f9      	ldr	r1, [r7, #12]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 fa6a 	bl	800639c <vTaskDelayUntil>

	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeaderFIFO0, dataFIFO0);
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <StartTask04+0x90>)
 8001eca:	4a1e      	ldr	r2, [pc, #120]	@ (8001f44 <StartTask04+0x94>)
 8001ecc:	2100      	movs	r1, #0
 8001ece:	481e      	ldr	r0, [pc, #120]	@ (8001f48 <StartTask04+0x98>)
 8001ed0:	f001 fadf 	bl	8003492 <HAL_CAN_GetRxMessage>

	  if (rxHeaderFIFO0.StdId == 0x6CA)
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <StartTask04+0x94>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f240 62ca 	movw	r2, #1738	@ 0x6ca
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d1ed      	bne.n	8001ebc <StartTask04+0xc>
	  {
		  packCurrent = ((dataFIFO0[0]<<8) | dataFIFO0[1]) / 100;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <StartTask04+0x90>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	4a16      	ldr	r2, [pc, #88]	@ (8001f40 <StartTask04+0x90>)
 8001ee8:	7852      	ldrb	r2, [r2, #1]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	4a17      	ldr	r2, [pc, #92]	@ (8001f4c <StartTask04+0x9c>)
 8001eee:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef2:	1152      	asrs	r2, r2, #5
 8001ef4:	17db      	asrs	r3, r3, #31
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <StartTask04+0xa0>)
 8001efc:	801a      	strh	r2, [r3, #0]

		  packStateOfCharge = ((dataFIFO0[2]<<8) | dataFIFO0[3]) / 100.0 * 2.0;
 8001efe:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <StartTask04+0x90>)
 8001f00:	789b      	ldrb	r3, [r3, #2]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	4a0e      	ldr	r2, [pc, #56]	@ (8001f40 <StartTask04+0x90>)
 8001f06:	78d2      	ldrb	r2, [r2, #3]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fad2 	bl	80004b4 <__aeabi_i2d>
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <StartTask04+0xa4>)
 8001f16:	f7fe fc61 	bl	80007dc <__aeabi_ddiv>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	f7fe f979 	bl	800021c <__adddf3>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	f7fe fd3b 	bl	80009ac <__aeabi_d2f>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a07      	ldr	r2, [pc, #28]	@ (8001f58 <StartTask04+0xa8>)
 8001f3a:	6013      	str	r3, [r2, #0]
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001f3c:	e7be      	b.n	8001ebc <StartTask04+0xc>
 8001f3e:	bf00      	nop
 8001f40:	2000045c 	.word	0x2000045c
 8001f44:	20000440 	.word	0x20000440
 8001f48:	2000035c 	.word	0x2000035c
 8001f4c:	51eb851f 	.word	0x51eb851f
 8001f50:	2000048c 	.word	0x2000048c
 8001f54:	40590000 	.word	0x40590000
 8001f58:	20000488 	.word	0x20000488

08001f5c <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument) // Radiator Fan and Pump PWM Thread
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {

	  if (motorTemp > 30 || motorControllerTemp > 30)
 8001f64:	4b42      	ldr	r3, [pc, #264]	@ (8002070 <StartTask05+0x114>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b1e      	cmp	r3, #30
 8001f6a:	dc03      	bgt.n	8001f74 <StartTask05+0x18>
 8001f6c:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <StartTask05+0x118>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b1e      	cmp	r3, #30
 8001f72:	dd6d      	ble.n	8002050 <StartTask05+0xf4>
	  {
		  if (motorTemp > motorControllerTemp)
 8001f74:	4b3e      	ldr	r3, [pc, #248]	@ (8002070 <StartTask05+0x114>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b3e      	ldr	r3, [pc, #248]	@ (8002074 <StartTask05+0x118>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	dd33      	ble.n	8001fe8 <StartTask05+0x8c>
		  {
			  constrain(motorTemp, 25, 80);
 8001f80:	4b3b      	ldr	r3, [pc, #236]	@ (8002070 <StartTask05+0x114>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2250      	movs	r2, #80	@ 0x50
 8001f86:	2119      	movs	r1, #25
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f9c3 	bl	8001314 <constrain>

			  pumpPWM = constrain(map(motorTemp, 25, 80, 30, 50), 30, 50);
 8001f8e:	4b38      	ldr	r3, [pc, #224]	@ (8002070 <StartTask05+0x114>)
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	2332      	movs	r3, #50	@ 0x32
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	231e      	movs	r3, #30
 8001f98:	2250      	movs	r2, #80	@ 0x50
 8001f9a:	2119      	movs	r1, #25
 8001f9c:	f7ff f99e 	bl	80012dc <map>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2232      	movs	r2, #50	@ 0x32
 8001fa4:	211e      	movs	r1, #30
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f9b4 	bl	8001314 <constrain>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a32      	ldr	r2, [pc, #200]	@ (8002078 <StartTask05+0x11c>)
 8001fb0:	6013      	str	r3, [r2, #0]

			  TIM8->CCR3 =  pumpPWM; // Pump
 8001fb2:	4b31      	ldr	r3, [pc, #196]	@ (8002078 <StartTask05+0x11c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4b31      	ldr	r3, [pc, #196]	@ (800207c <StartTask05+0x120>)
 8001fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

			  fanPWM = constrain(map(motorTemp, 25, 80, 30, 50), 30, 50);
 8001fba:	4b2d      	ldr	r3, [pc, #180]	@ (8002070 <StartTask05+0x114>)
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	2332      	movs	r3, #50	@ 0x32
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	231e      	movs	r3, #30
 8001fc4:	2250      	movs	r2, #80	@ 0x50
 8001fc6:	2119      	movs	r1, #25
 8001fc8:	f7ff f988 	bl	80012dc <map>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2232      	movs	r2, #50	@ 0x32
 8001fd0:	211e      	movs	r1, #30
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f99e 	bl	8001314 <constrain>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a29      	ldr	r2, [pc, #164]	@ (8002080 <StartTask05+0x124>)
 8001fdc:	6013      	str	r3, [r2, #0]

			  TIM8->CCR4 = fanPWM; // Fan
 8001fde:	4b28      	ldr	r3, [pc, #160]	@ (8002080 <StartTask05+0x124>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <StartTask05+0x120>)
 8001fe4:	641a      	str	r2, [r3, #64]	@ 0x40
		  if (motorTemp > motorControllerTemp)
 8001fe6:	e041      	b.n	800206c <StartTask05+0x110>
		  }
		  else
		  {
			  constrain(motorControllerTemp, 25, 55);
 8001fe8:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <StartTask05+0x118>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2237      	movs	r2, #55	@ 0x37
 8001fee:	2119      	movs	r1, #25
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f98f 	bl	8001314 <constrain>

			  pumpPWM = constrain(map(motorControllerTemp, 25, 55, 30, 50), 30, 50);
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8002074 <StartTask05+0x118>)
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	2332      	movs	r3, #50	@ 0x32
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	231e      	movs	r3, #30
 8002000:	2237      	movs	r2, #55	@ 0x37
 8002002:	2119      	movs	r1, #25
 8002004:	f7ff f96a 	bl	80012dc <map>
 8002008:	4603      	mov	r3, r0
 800200a:	2232      	movs	r2, #50	@ 0x32
 800200c:	211e      	movs	r1, #30
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f980 	bl	8001314 <constrain>
 8002014:	4603      	mov	r3, r0
 8002016:	4a18      	ldr	r2, [pc, #96]	@ (8002078 <StartTask05+0x11c>)
 8002018:	6013      	str	r3, [r2, #0]

			  TIM8->CCR3 = pumpPWM; // Pump
 800201a:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <StartTask05+0x11c>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <StartTask05+0x120>)
 8002020:	63da      	str	r2, [r3, #60]	@ 0x3c

			  fanPWM = constrain(map(motorControllerTemp, 25, 55, 30, 50), 30, 50);
 8002022:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <StartTask05+0x118>)
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	2332      	movs	r3, #50	@ 0x32
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	231e      	movs	r3, #30
 800202c:	2237      	movs	r2, #55	@ 0x37
 800202e:	2119      	movs	r1, #25
 8002030:	f7ff f954 	bl	80012dc <map>
 8002034:	4603      	mov	r3, r0
 8002036:	2232      	movs	r2, #50	@ 0x32
 8002038:	211e      	movs	r1, #30
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f96a 	bl	8001314 <constrain>
 8002040:	4603      	mov	r3, r0
 8002042:	4a0f      	ldr	r2, [pc, #60]	@ (8002080 <StartTask05+0x124>)
 8002044:	6013      	str	r3, [r2, #0]

			  TIM8->CCR4 = fanPWM; // Fan
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <StartTask05+0x124>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <StartTask05+0x120>)
 800204c:	641a      	str	r2, [r3, #64]	@ 0x40
		  if (motorTemp > motorControllerTemp)
 800204e:	e00d      	b.n	800206c <StartTask05+0x110>
		  }
	  }
	  else
	  {
		  pumpPWM = 50;
 8002050:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <StartTask05+0x11c>)
 8002052:	2232      	movs	r2, #50	@ 0x32
 8002054:	601a      	str	r2, [r3, #0]

		  fanPWM = 50;
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <StartTask05+0x124>)
 8002058:	2232      	movs	r2, #50	@ 0x32
 800205a:	601a      	str	r2, [r3, #0]

		  TIM8->CCR3 = pumpPWM;
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <StartTask05+0x11c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <StartTask05+0x120>)
 8002062:	63da      	str	r2, [r3, #60]	@ 0x3c

		  TIM8->CCR4 = fanPWM;
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <StartTask05+0x124>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b04      	ldr	r3, [pc, #16]	@ (800207c <StartTask05+0x120>)
 800206a:	641a      	str	r2, [r3, #64]	@ 0x40
	  if (motorTemp > 30 || motorControllerTemp > 30)
 800206c:	e77a      	b.n	8001f64 <StartTask05+0x8>
 800206e:	bf00      	nop
 8002070:	20000494 	.word	0x20000494
 8002074:	20000498 	.word	0x20000498
 8002078:	2000049c 	.word	0x2000049c
 800207c:	40010400 	.word	0x40010400
 8002080:	200004a0 	.word	0x200004a0

08002084 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument) // Ignition Thread
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
	  ignitionTask();
 800208c:	f7ff f8e0 	bl	8001250 <ignitionTask>
 8002090:	e7fc      	b.n	800208c <StartTask06+0x8>
	...

08002094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020a6:	f000 faa5 	bl	80025f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40000400 	.word	0x40000400

080020b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020bc:	b672      	cpsid	i
}
 80020be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <Error_Handler+0x8>

080020c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_MspInit+0x54>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	4a11      	ldr	r2, [pc, #68]	@ (8002118 <HAL_MspInit+0x54>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020da:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <HAL_MspInit+0x54>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <HAL_MspInit+0x54>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <HAL_MspInit+0x54>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f6:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <HAL_MspInit+0x54>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	210f      	movs	r1, #15
 8002106:	f06f 0001 	mvn.w	r0, #1
 800210a:	f001 fb8d 	bl	8003828 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800

0800211c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	@ 0x38
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a45      	ldr	r2, [pc, #276]	@ (8002250 <HAL_ADC_MspInit+0x134>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d128      	bne.n	8002190 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
 8002142:	4b44      	ldr	r3, [pc, #272]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	4a43      	ldr	r2, [pc, #268]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214c:	6453      	str	r3, [r2, #68]	@ 0x44
 800214e:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	4b3d      	ldr	r3, [pc, #244]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a3c      	ldr	r2, [pc, #240]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b3a      	ldr	r3, [pc, #232]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002176:	2302      	movs	r3, #2
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800217a:	2303      	movs	r3, #3
 800217c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002186:	4619      	mov	r1, r3
 8002188:	4833      	ldr	r0, [pc, #204]	@ (8002258 <HAL_ADC_MspInit+0x13c>)
 800218a:	f001 fb77 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800218e:	e05a      	b.n	8002246 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a31      	ldr	r2, [pc, #196]	@ (800225c <HAL_ADC_MspInit+0x140>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d128      	bne.n	80021ec <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	4b2d      	ldr	r3, [pc, #180]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 80021a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	4a25      	ldr	r2, [pc, #148]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c6:	4b23      	ldr	r3, [pc, #140]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d2:	2304      	movs	r3, #4
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d6:	2303      	movs	r3, #3
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e2:	4619      	mov	r1, r3
 80021e4:	481c      	ldr	r0, [pc, #112]	@ (8002258 <HAL_ADC_MspInit+0x13c>)
 80021e6:	f001 fb49 	bl	800387c <HAL_GPIO_Init>
}
 80021ea:	e02c      	b.n	8002246 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002260 <HAL_ADC_MspInit+0x144>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d127      	bne.n	8002246 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	4a15      	ldr	r2, [pc, #84]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 8002200:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002204:	6453      	str	r3, [r2, #68]	@ 0x44
 8002206:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a0e      	ldr	r2, [pc, #56]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <HAL_ADC_MspInit+0x138>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800222e:	2308      	movs	r3, #8
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002232:	2303      	movs	r3, #3
 8002234:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800223e:	4619      	mov	r1, r3
 8002240:	4805      	ldr	r0, [pc, #20]	@ (8002258 <HAL_ADC_MspInit+0x13c>)
 8002242:	f001 fb1b 	bl	800387c <HAL_GPIO_Init>
}
 8002246:	bf00      	nop
 8002248:	3738      	adds	r7, #56	@ 0x38
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40012000 	.word	0x40012000
 8002254:	40023800 	.word	0x40023800
 8002258:	40020800 	.word	0x40020800
 800225c:	40012100 	.word	0x40012100
 8002260:	40012200 	.word	0x40012200

08002264 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	@ (80022e8 <HAL_CAN_MspInit+0x84>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d12c      	bne.n	80022e0 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <HAL_CAN_MspInit+0x88>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	4a17      	ldr	r2, [pc, #92]	@ (80022ec <HAL_CAN_MspInit+0x88>)
 8002290:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002294:	6413      	str	r3, [r2, #64]	@ 0x40
 8002296:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <HAL_CAN_MspInit+0x88>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <HAL_CAN_MspInit+0x88>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a10      	ldr	r2, [pc, #64]	@ (80022ec <HAL_CAN_MspInit+0x88>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <HAL_CAN_MspInit+0x88>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80022c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80022d0:	2309      	movs	r3, #9
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <HAL_CAN_MspInit+0x8c>)
 80022dc:	f001 face 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80022e0:	bf00      	nop
 80022e2:	3728      	adds	r7, #40	@ 0x28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40006400 	.word	0x40006400
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020000 	.word	0x40020000

080022f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002304:	d116      	bne.n	8002334 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b16      	ldr	r3, [pc, #88]	@ (8002364 <HAL_TIM_Base_MspInit+0x70>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	4a15      	ldr	r2, [pc, #84]	@ (8002364 <HAL_TIM_Base_MspInit+0x70>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6413      	str	r3, [r2, #64]	@ 0x40
 8002316:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <HAL_TIM_Base_MspInit+0x70>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2105      	movs	r1, #5
 8002326:	201c      	movs	r0, #28
 8002328:	f001 fa7e 	bl	8003828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800232c:	201c      	movs	r0, #28
 800232e:	f001 fa97 	bl	8003860 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002332:	e012      	b.n	800235a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM8)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0b      	ldr	r2, [pc, #44]	@ (8002368 <HAL_TIM_Base_MspInit+0x74>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10d      	bne.n	800235a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <HAL_TIM_Base_MspInit+0x70>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	4a07      	ldr	r2, [pc, #28]	@ (8002364 <HAL_TIM_Base_MspInit+0x70>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	6453      	str	r3, [r2, #68]	@ 0x44
 800234e:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_TIM_Base_MspInit+0x70>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800
 8002368:	40010400 	.word	0x40010400

0800236c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <HAL_TIM_MspPostInit+0x68>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d11e      	bne.n	80023cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <HAL_TIM_MspPostInit+0x6c>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	4a10      	ldr	r2, [pc, #64]	@ (80023d8 <HAL_TIM_MspPostInit+0x6c>)
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	6313      	str	r3, [r2, #48]	@ 0x30
 800239e:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <HAL_TIM_MspPostInit+0x6c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023bc:	2303      	movs	r3, #3
 80023be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4619      	mov	r1, r3
 80023c6:	4805      	ldr	r0, [pc, #20]	@ (80023dc <HAL_TIM_MspPostInit+0x70>)
 80023c8:	f001 fa58 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40010400 	.word	0x40010400
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020800 	.word	0x40020800

080023e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08e      	sub	sp, #56	@ 0x38
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	4b33      	ldr	r3, [pc, #204]	@ (80024c4 <HAL_InitTick+0xe4>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	4a32      	ldr	r2, [pc, #200]	@ (80024c4 <HAL_InitTick+0xe4>)
 80023fa:	f043 0302 	orr.w	r3, r3, #2
 80023fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002400:	4b30      	ldr	r3, [pc, #192]	@ (80024c4 <HAL_InitTick+0xe4>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800240c:	f107 0210 	add.w	r2, r7, #16
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f001 fcfc 	bl	8003e14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d103      	bne.n	800242e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002426:	f001 fce1 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 800242a:	6378      	str	r0, [r7, #52]	@ 0x34
 800242c:	e004      	b.n	8002438 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800242e:	f001 fcdd 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8002432:	4603      	mov	r3, r0
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243a:	4a23      	ldr	r2, [pc, #140]	@ (80024c8 <HAL_InitTick+0xe8>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	0c9b      	lsrs	r3, r3, #18
 8002442:	3b01      	subs	r3, #1
 8002444:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002446:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_InitTick+0xec>)
 8002448:	4a21      	ldr	r2, [pc, #132]	@ (80024d0 <HAL_InitTick+0xf0>)
 800244a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800244c:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <HAL_InitTick+0xec>)
 800244e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002452:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002454:	4a1d      	ldr	r2, [pc, #116]	@ (80024cc <HAL_InitTick+0xec>)
 8002456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002458:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800245a:	4b1c      	ldr	r3, [pc, #112]	@ (80024cc <HAL_InitTick+0xec>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <HAL_InitTick+0xec>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002466:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <HAL_InitTick+0xec>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800246c:	4817      	ldr	r0, [pc, #92]	@ (80024cc <HAL_InitTick+0xec>)
 800246e:	f002 f9d1 	bl	8004814 <HAL_TIM_Base_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002478:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11b      	bne.n	80024b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002480:	4812      	ldr	r0, [pc, #72]	@ (80024cc <HAL_InitTick+0xec>)
 8002482:	f002 fa17 	bl	80048b4 <HAL_TIM_Base_Start_IT>
 8002486:	4603      	mov	r3, r0
 8002488:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800248c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002494:	201d      	movs	r0, #29
 8002496:	f001 f9e3 	bl	8003860 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d808      	bhi.n	80024b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	201d      	movs	r0, #29
 80024a6:	f001 f9bf 	bl	8003828 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024aa:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <HAL_InitTick+0xf4>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e002      	b.n	80024b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3738      	adds	r7, #56	@ 0x38
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	431bde83 	.word	0x431bde83
 80024cc:	200004a8 	.word	0x200004a8
 80024d0:	40000400 	.word	0x40000400
 80024d4:	20000008 	.word	0x20000008

080024d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <NMI_Handler+0x4>

080024e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <MemManage_Handler+0x4>

080024f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <UsageFault_Handler+0x4>

08002500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002514:	4802      	ldr	r0, [pc, #8]	@ (8002520 <TIM2_IRQHandler+0x10>)
 8002516:	f002 fd8d 	bl	8005034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000384 	.word	0x20000384

08002524 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002528:	4802      	ldr	r0, [pc, #8]	@ (8002534 <TIM3_IRQHandler+0x10>)
 800252a:	f002 fd83 	bl	8005034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200004a8 	.word	0x200004a8

08002538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <SystemInit+0x20>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	4a05      	ldr	r2, [pc, #20]	@ (8002558 <SystemInit+0x20>)
 8002544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800255c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002594 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002560:	480d      	ldr	r0, [pc, #52]	@ (8002598 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002562:	490e      	ldr	r1, [pc, #56]	@ (800259c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002564:	4a0e      	ldr	r2, [pc, #56]	@ (80025a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002568:	e002      	b.n	8002570 <LoopCopyDataInit>

0800256a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800256c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256e:	3304      	adds	r3, #4

08002570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002574:	d3f9      	bcc.n	800256a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002576:	4a0b      	ldr	r2, [pc, #44]	@ (80025a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002578:	4c0b      	ldr	r4, [pc, #44]	@ (80025a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800257c:	e001      	b.n	8002582 <LoopFillZerobss>

0800257e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002580:	3204      	adds	r2, #4

08002582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002584:	d3fb      	bcc.n	800257e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002586:	f7ff ffd7 	bl	8002538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800258a:	f004 ff33 	bl	80073f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800258e:	f7ff f809 	bl	80015a4 <main>
  bx  lr    
 8002592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800259c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80025a0:	0800759c 	.word	0x0800759c
  ldr r2, =_sbss
 80025a4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80025a8:	20004248 	.word	0x20004248

080025ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025ac:	e7fe      	b.n	80025ac <ADC_IRQHandler>
	...

080025b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b4:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0d      	ldr	r2, [pc, #52]	@ (80025f0 <HAL_Init+0x40>)
 80025ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <HAL_Init+0x40>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <HAL_Init+0x40>)
 80025c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025cc:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a07      	ldr	r2, [pc, #28]	@ (80025f0 <HAL_Init+0x40>)
 80025d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d8:	2003      	movs	r0, #3
 80025da:	f001 f91a 	bl	8003812 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025de:	200f      	movs	r0, #15
 80025e0:	f7ff fefe 	bl	80023e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e4:	f7ff fd6e 	bl	80020c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023c00 	.word	0x40023c00

080025f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f8:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <HAL_IncTick+0x20>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_IncTick+0x24>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4413      	add	r3, r2
 8002604:	4a04      	ldr	r2, [pc, #16]	@ (8002618 <HAL_IncTick+0x24>)
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	2000000c 	.word	0x2000000c
 8002618:	200004f0 	.word	0x200004f0

0800261c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return uwTick;
 8002620:	4b03      	ldr	r3, [pc, #12]	@ (8002630 <HAL_GetTick+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	200004f0 	.word	0x200004f0

08002634 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e033      	b.n	80026b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fd62 	bl	800211c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800267a:	f023 0302 	bic.w	r3, r3, #2
 800267e:	f043 0202 	orr.w	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fae8 	bl	8002c5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f023 0303 	bic.w	r3, r3, #3
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80026a2:	e001      	b.n	80026a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Start+0x1a>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e0b2      	b.n	800283c <HAL_ADC_Start+0x180>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d018      	beq.n	800271e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026fc:	4b52      	ldr	r3, [pc, #328]	@ (8002848 <HAL_ADC_Start+0x18c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a52      	ldr	r2, [pc, #328]	@ (800284c <HAL_ADC_Start+0x190>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0c9a      	lsrs	r2, r3, #18
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002710:	e002      	b.n	8002718 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3b01      	subs	r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f9      	bne.n	8002712 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d17a      	bne.n	8002822 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002756:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800276a:	d106      	bne.n	800277a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002770:	f023 0206 	bic.w	r2, r3, #6
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	645a      	str	r2, [r3, #68]	@ 0x44
 8002778:	e002      	b.n	8002780 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002788:	4b31      	ldr	r3, [pc, #196]	@ (8002850 <HAL_ADC_Start+0x194>)
 800278a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002794:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d12a      	bne.n	80027f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002854 <HAL_ADC_Start+0x198>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d015      	beq.n	80027d8 <HAL_ADC_Start+0x11c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a29      	ldr	r2, [pc, #164]	@ (8002858 <HAL_ADC_Start+0x19c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d105      	bne.n	80027c2 <HAL_ADC_Start+0x106>
 80027b6:	4b26      	ldr	r3, [pc, #152]	@ (8002850 <HAL_ADC_Start+0x194>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a25      	ldr	r2, [pc, #148]	@ (800285c <HAL_ADC_Start+0x1a0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d136      	bne.n	800283a <HAL_ADC_Start+0x17e>
 80027cc:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <HAL_ADC_Start+0x194>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d130      	bne.n	800283a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d129      	bne.n	800283a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	e020      	b.n	800283a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a15      	ldr	r2, [pc, #84]	@ (8002854 <HAL_ADC_Start+0x198>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d11b      	bne.n	800283a <HAL_ADC_Start+0x17e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d114      	bne.n	800283a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	e00b      	b.n	800283a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	20000004 	.word	0x20000004
 800284c:	431bde83 	.word	0x431bde83
 8002850:	40012300 	.word	0x40012300
 8002854:	40012000 	.word	0x40012000
 8002858:	40012100 	.word	0x40012100
 800285c:	40012200 	.word	0x40012200

08002860 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_ADC_Stop+0x16>
 8002872:	2302      	movs	r3, #2
 8002874:	e021      	b.n	80028ba <HAL_ADC_Stop+0x5a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e2:	d113      	bne.n	800290c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028f2:	d10b      	bne.n	800290c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	f043 0220 	orr.w	r2, r3, #32
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e063      	b.n	80029d4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800290c:	f7ff fe86 	bl	800261c <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002912:	e021      	b.n	8002958 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d01d      	beq.n	8002958 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_ADC_PollForConversion+0x6c>
 8002922:	f7ff fe7b 	bl	800261c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d212      	bcs.n	8002958 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d00b      	beq.n	8002958 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	f043 0204 	orr.w	r2, r3, #4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e03d      	b.n	80029d4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d1d6      	bne.n	8002914 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f06f 0212 	mvn.w	r2, #18
 800296e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d123      	bne.n	80029d2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800298e:	2b00      	cmp	r3, #0
 8002990:	d11f      	bne.n	80029d2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d111      	bne.n	80029d2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x1c>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e113      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x244>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b09      	cmp	r3, #9
 8002a22:	d925      	bls.n	8002a70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68d9      	ldr	r1, [r3, #12]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	3b1e      	subs	r3, #30
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43da      	mvns	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	400a      	ands	r2, r1
 8002a48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68d9      	ldr	r1, [r3, #12]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4403      	add	r3, r0
 8002a62:	3b1e      	subs	r3, #30
 8002a64:	409a      	lsls	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	e022      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6919      	ldr	r1, [r3, #16]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	2207      	movs	r2, #7
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	400a      	ands	r2, r1
 8002a92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6919      	ldr	r1, [r3, #16]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4403      	add	r3, r0
 8002aac:	409a      	lsls	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d824      	bhi.n	8002b08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b05      	subs	r3, #5
 8002ad0:	221f      	movs	r2, #31
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	400a      	ands	r2, r1
 8002ade:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	4618      	mov	r0, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	3b05      	subs	r3, #5
 8002afa:	fa00 f203 	lsl.w	r2, r0, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b06:	e04c      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d824      	bhi.n	8002b5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b23      	subs	r3, #35	@ 0x23
 8002b22:	221f      	movs	r2, #31
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	400a      	ands	r2, r1
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	3b23      	subs	r3, #35	@ 0x23
 8002b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b58:	e023      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b41      	subs	r3, #65	@ 0x41
 8002b6c:	221f      	movs	r2, #31
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	400a      	ands	r2, r1
 8002b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	3b41      	subs	r3, #65	@ 0x41
 8002b96:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba2:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <HAL_ADC_ConfigChannel+0x250>)
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a28      	ldr	r2, [pc, #160]	@ (8002c4c <HAL_ADC_ConfigChannel+0x254>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10f      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1d8>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b12      	cmp	r3, #18
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <HAL_ADC_ConfigChannel+0x254>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d12b      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x23a>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1c      	ldr	r2, [pc, #112]	@ (8002c50 <HAL_ADC_ConfigChannel+0x258>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <HAL_ADC_ConfigChannel+0x1f4>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b11      	cmp	r3, #17
 8002bea:	d122      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a11      	ldr	r2, [pc, #68]	@ (8002c50 <HAL_ADC_ConfigChannel+0x258>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d111      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c0e:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <HAL_ADC_ConfigChannel+0x25c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a11      	ldr	r2, [pc, #68]	@ (8002c58 <HAL_ADC_ConfigChannel+0x260>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	0c9a      	lsrs	r2, r3, #18
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c24:	e002      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f9      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40012300 	.word	0x40012300
 8002c4c:	40012000 	.word	0x40012000
 8002c50:	10000012 	.word	0x10000012
 8002c54:	20000004 	.word	0x20000004
 8002c58:	431bde83 	.word	0x431bde83

08002c5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c64:	4b79      	ldr	r3, [pc, #484]	@ (8002e4c <ADC_Init+0x1f0>)
 8002c66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	021a      	lsls	r2, r3, #8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002cb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	4a58      	ldr	r2, [pc, #352]	@ (8002e50 <ADC_Init+0x1f4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d022      	beq.n	8002d3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	e00f      	b.n	8002d5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0202 	bic.w	r2, r2, #2
 8002d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7e1b      	ldrb	r3, [r3, #24]
 8002d74:	005a      	lsls	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01b      	beq.n	8002dc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002da6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	3b01      	subs	r3, #1
 8002db4:	035a      	lsls	r2, r3, #13
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	e007      	b.n	8002dd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	051a      	lsls	r2, r3, #20
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6899      	ldr	r1, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e12:	025a      	lsls	r2, r3, #9
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6899      	ldr	r1, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	029a      	lsls	r2, r3, #10
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40012300 	.word	0x40012300
 8002e50:	0f000001 	.word	0x0f000001

08002e54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0ed      	b.n	8003042 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff f9f6 	bl	8002264 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e88:	f7ff fbc8 	bl	800261c <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e8e:	e012      	b.n	8002eb6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e90:	f7ff fbc4 	bl	800261c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b0a      	cmp	r3, #10
 8002e9c:	d90b      	bls.n	8002eb6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2205      	movs	r2, #5
 8002eae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0c5      	b.n	8003042 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0e5      	beq.n	8002e90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0202 	bic.w	r2, r2, #2
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed4:	f7ff fba2 	bl	800261c <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002eda:	e012      	b.n	8002f02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002edc:	f7ff fb9e 	bl	800261c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b0a      	cmp	r3, #10
 8002ee8:	d90b      	bls.n	8002f02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2205      	movs	r2, #5
 8002efa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e09f      	b.n	8003042 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e5      	bne.n	8002edc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7e1b      	ldrb	r3, [r3, #24]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d108      	bne.n	8002f2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e007      	b.n	8002f3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7e5b      	ldrb	r3, [r3, #25]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e007      	b.n	8002f64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7e9b      	ldrb	r3, [r3, #26]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d108      	bne.n	8002f7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0220 	orr.w	r2, r2, #32
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e007      	b.n	8002f8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0220 	bic.w	r2, r2, #32
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7edb      	ldrb	r3, [r3, #27]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d108      	bne.n	8002fa8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0210 	bic.w	r2, r2, #16
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e007      	b.n	8002fb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0210 	orr.w	r2, r2, #16
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7f1b      	ldrb	r3, [r3, #28]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d108      	bne.n	8002fd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0208 	orr.w	r2, r2, #8
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e007      	b.n	8002fe2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0208 	bic.w	r2, r2, #8
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7f5b      	ldrb	r3, [r3, #29]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d108      	bne.n	8002ffc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0204 	orr.w	r2, r2, #4
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e007      	b.n	800300c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0204 	bic.w	r2, r2, #4
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	ea42 0103 	orr.w	r1, r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	1e5a      	subs	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003062:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d003      	beq.n	8003072 <HAL_CAN_ConfigFilter+0x26>
 800306a:	7cfb      	ldrb	r3, [r7, #19]
 800306c:	2b02      	cmp	r3, #2
 800306e:	f040 80be 	bne.w	80031ee <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003072:	4b65      	ldr	r3, [pc, #404]	@ (8003208 <HAL_CAN_ConfigFilter+0x1bc>)
 8003074:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800307c:	f043 0201 	orr.w	r2, r3, #1
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800308c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	431a      	orrs	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2201      	movs	r2, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	401a      	ands	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d123      	bne.n	800311c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43db      	mvns	r3, r3
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3248      	adds	r2, #72	@ 0x48
 80030fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003110:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003112:	6979      	ldr	r1, [r7, #20]
 8003114:	3348      	adds	r3, #72	@ 0x48
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d122      	bne.n	800316a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	431a      	orrs	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003144:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3248      	adds	r2, #72	@ 0x48
 800314a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800315e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003160:	6979      	ldr	r1, [r7, #20]
 8003162:	3348      	adds	r3, #72	@ 0x48
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	440b      	add	r3, r1
 8003168:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43db      	mvns	r3, r3
 800317c:	401a      	ands	r2, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003184:	e007      	b.n	8003196 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	431a      	orrs	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	401a      	ands	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80031b0:	e007      	b.n	80031c2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80031e0:	f023 0201 	bic.w	r2, r3, #1
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e006      	b.n	80031fc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	40006400 	.word	0x40006400

0800320c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d12e      	bne.n	800327e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003238:	f7ff f9f0 	bl	800261c <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800323e:	e012      	b.n	8003266 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003240:	f7ff f9ec 	bl	800261c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b0a      	cmp	r3, #10
 800324c:	d90b      	bls.n	8003266 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2205      	movs	r2, #5
 800325e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e012      	b.n	800328c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e5      	bne.n	8003240 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e006      	b.n	800328c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
  }
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	@ 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032b2:	7ffb      	ldrb	r3, [r7, #31]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d003      	beq.n	80032c0 <HAL_CAN_AddTxMessage+0x2c>
 80032b8:	7ffb      	ldrb	r3, [r7, #31]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	f040 80b8 	bne.w	8003430 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80a0 	beq.w	8003420 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	0e1b      	lsrs	r3, r3, #24
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d907      	bls.n	8003300 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e09e      	b.n	800343e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003300:	2201      	movs	r2, #1
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	409a      	lsls	r2, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10d      	bne.n	800332e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	6809      	ldr	r1, [r1, #0]
 8003320:	431a      	orrs	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3318      	adds	r3, #24
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	440b      	add	r3, r1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e00f      	b.n	800334e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003338:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003342:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	3318      	adds	r3, #24
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	440b      	add	r3, r1
 800334c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6819      	ldr	r1, [r3, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	3318      	adds	r3, #24
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	440b      	add	r3, r1
 800335e:	3304      	adds	r3, #4
 8003360:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	7d1b      	ldrb	r3, [r3, #20]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d111      	bne.n	800338e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3318      	adds	r3, #24
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	6811      	ldr	r1, [r2, #0]
 800337e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3318      	adds	r3, #24
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	440b      	add	r3, r1
 800338a:	3304      	adds	r3, #4
 800338c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3307      	adds	r3, #7
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	061a      	lsls	r2, r3, #24
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3306      	adds	r3, #6
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3305      	adds	r3, #5
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	4313      	orrs	r3, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	3204      	adds	r2, #4
 80033ae:	7812      	ldrb	r2, [r2, #0]
 80033b0:	4610      	mov	r0, r2
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	6811      	ldr	r1, [r2, #0]
 80033b6:	ea43 0200 	orr.w	r2, r3, r0
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	440b      	add	r3, r1
 80033c0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80033c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3303      	adds	r3, #3
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	061a      	lsls	r2, r3, #24
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3302      	adds	r3, #2
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3301      	adds	r3, #1
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	4313      	orrs	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	7812      	ldrb	r2, [r2, #0]
 80033e6:	4610      	mov	r0, r2
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	6811      	ldr	r1, [r2, #0]
 80033ec:	ea43 0200 	orr.w	r2, r3, r0
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	440b      	add	r3, r1
 80033f6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80033fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3318      	adds	r3, #24
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	4413      	add	r3, r2
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	6811      	ldr	r1, [r2, #0]
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	3318      	adds	r3, #24
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	440b      	add	r3, r1
 800341a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e00e      	b.n	800343e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e006      	b.n	800343e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3724      	adds	r7, #36	@ 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800344a:	b480      	push	{r7}
 800344c:	b085      	sub	sp, #20
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800345e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003460:	7afb      	ldrb	r3, [r7, #11]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d002      	beq.n	800346c <HAL_CAN_IsTxMessagePending+0x22>
 8003466:	7afb      	ldrb	r3, [r7, #11]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d10b      	bne.n	8003484 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	069b      	lsls	r3, r3, #26
 8003476:	401a      	ands	r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	069b      	lsls	r3, r3, #26
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003480:	2301      	movs	r3, #1
 8003482:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003484:	68fb      	ldr	r3, [r7, #12]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003492:	b480      	push	{r7}
 8003494:	b087      	sub	sp, #28
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d003      	beq.n	80034b6 <HAL_CAN_GetRxMessage+0x24>
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	f040 80f3 	bne.w	800369c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10e      	bne.n	80034da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d116      	bne.n	80034f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0e7      	b.n	80036aa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d107      	bne.n	80034f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0d8      	b.n	80036aa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	331b      	adds	r3, #27
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	4413      	add	r3, r2
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0204 	and.w	r2, r3, #4
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10c      	bne.n	8003530 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	331b      	adds	r3, #27
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	4413      	add	r3, r2
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	0d5b      	lsrs	r3, r3, #21
 8003526:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e00b      	b.n	8003548 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	331b      	adds	r3, #27
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	4413      	add	r3, r2
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	08db      	lsrs	r3, r3, #3
 8003540:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	331b      	adds	r3, #27
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	4413      	add	r3, r2
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0202 	and.w	r2, r3, #2
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	331b      	adds	r3, #27
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	4413      	add	r3, r2
 800356a:	3304      	adds	r3, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 020f 	and.w	r2, r3, #15
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	331b      	adds	r3, #27
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	4413      	add	r3, r2
 8003582:	3304      	adds	r3, #4
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	b2da      	uxtb	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	331b      	adds	r3, #27
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	4413      	add	r3, r2
 800359a:	3304      	adds	r3, #4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0a1a      	lsrs	r2, r3, #8
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	4413      	add	r3, r2
 80035e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	0c1a      	lsrs	r2, r3, #16
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	3302      	adds	r3, #2
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0e1a      	lsrs	r2, r3, #24
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	3303      	adds	r3, #3
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	4413      	add	r3, r2
 8003614:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	3304      	adds	r3, #4
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	4413      	add	r3, r2
 800362c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	0a1a      	lsrs	r2, r3, #8
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	3305      	adds	r3, #5
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	4413      	add	r3, r2
 8003646:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	0c1a      	lsrs	r2, r3, #16
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	3306      	adds	r3, #6
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	4413      	add	r3, r2
 8003660:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	0e1a      	lsrs	r2, r3, #24
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	3307      	adds	r3, #7
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0220 	orr.w	r2, r2, #32
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	e007      	b.n	8003698 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0220 	orr.w	r2, r2, #32
 8003696:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	e006      	b.n	80036aa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c8:	4b0c      	ldr	r3, [pc, #48]	@ (80036fc <__NVIC_SetPriorityGrouping+0x44>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036d4:	4013      	ands	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ea:	4a04      	ldr	r2, [pc, #16]	@ (80036fc <__NVIC_SetPriorityGrouping+0x44>)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	60d3      	str	r3, [r2, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003704:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <__NVIC_GetPriorityGrouping+0x18>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	0a1b      	lsrs	r3, r3, #8
 800370a:	f003 0307 	and.w	r3, r3, #7
}
 800370e:	4618      	mov	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	2b00      	cmp	r3, #0
 800372c:	db0b      	blt.n	8003746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	f003 021f 	and.w	r2, r3, #31
 8003734:	4907      	ldr	r1, [pc, #28]	@ (8003754 <__NVIC_EnableIRQ+0x38>)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2001      	movs	r0, #1
 800373e:	fa00 f202 	lsl.w	r2, r0, r2
 8003742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	e000e100 	.word	0xe000e100

08003758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	2b00      	cmp	r3, #0
 800376a:	db0a      	blt.n	8003782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	490c      	ldr	r1, [pc, #48]	@ (80037a4 <__NVIC_SetPriority+0x4c>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	0112      	lsls	r2, r2, #4
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	440b      	add	r3, r1
 800377c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003780:	e00a      	b.n	8003798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4908      	ldr	r1, [pc, #32]	@ (80037a8 <__NVIC_SetPriority+0x50>)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	3b04      	subs	r3, #4
 8003790:	0112      	lsls	r2, r2, #4
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	440b      	add	r3, r1
 8003796:	761a      	strb	r2, [r3, #24]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000e100 	.word	0xe000e100
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	@ 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f1c3 0307 	rsb	r3, r3, #7
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	bf28      	it	cs
 80037ca:	2304      	movcs	r3, #4
 80037cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d902      	bls.n	80037dc <NVIC_EncodePriority+0x30>
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3b03      	subs	r3, #3
 80037da:	e000      	b.n	80037de <NVIC_EncodePriority+0x32>
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	f04f 32ff 	mov.w	r2, #4294967295
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	401a      	ands	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f4:	f04f 31ff 	mov.w	r1, #4294967295
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	43d9      	mvns	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003804:	4313      	orrs	r3, r2
         );
}
 8003806:	4618      	mov	r0, r3
 8003808:	3724      	adds	r7, #36	@ 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ff4c 	bl	80036b8 <__NVIC_SetPriorityGrouping>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800383a:	f7ff ff61 	bl	8003700 <__NVIC_GetPriorityGrouping>
 800383e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	6978      	ldr	r0, [r7, #20]
 8003846:	f7ff ffb1 	bl	80037ac <NVIC_EncodePriority>
 800384a:	4602      	mov	r2, r0
 800384c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff ff80 	bl	8003758 <__NVIC_SetPriority>
}
 8003858:	bf00      	nop
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ff54 	bl	800371c <__NVIC_EnableIRQ>
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	@ 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	e165      	b.n	8003b64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003898:	2201      	movs	r2, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	f040 8154 	bne.w	8003b5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d005      	beq.n	80038ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d130      	bne.n	8003930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 0201 	and.w	r2, r3, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b03      	cmp	r3, #3
 800393a:	d017      	beq.n	800396c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2203      	movs	r2, #3
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d123      	bne.n	80039c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	08da      	lsrs	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3208      	adds	r2, #8
 8003980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	220f      	movs	r2, #15
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	08da      	lsrs	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3208      	adds	r2, #8
 80039ba:	69b9      	ldr	r1, [r7, #24]
 80039bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0203 	and.w	r2, r3, #3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80ae 	beq.w	8003b5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	4b5d      	ldr	r3, [pc, #372]	@ (8003b7c <HAL_GPIO_Init+0x300>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003b7c <HAL_GPIO_Init+0x300>)
 8003a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a12:	4b5a      	ldr	r3, [pc, #360]	@ (8003b7c <HAL_GPIO_Init+0x300>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a1e:	4a58      	ldr	r2, [pc, #352]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	3302      	adds	r3, #2
 8003a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	220f      	movs	r2, #15
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4f      	ldr	r2, [pc, #316]	@ (8003b84 <HAL_GPIO_Init+0x308>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d025      	beq.n	8003a96 <HAL_GPIO_Init+0x21a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8003b88 <HAL_GPIO_Init+0x30c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01f      	beq.n	8003a92 <HAL_GPIO_Init+0x216>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4d      	ldr	r2, [pc, #308]	@ (8003b8c <HAL_GPIO_Init+0x310>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d019      	beq.n	8003a8e <HAL_GPIO_Init+0x212>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8003b90 <HAL_GPIO_Init+0x314>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_GPIO_Init+0x20e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a4b      	ldr	r2, [pc, #300]	@ (8003b94 <HAL_GPIO_Init+0x318>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00d      	beq.n	8003a86 <HAL_GPIO_Init+0x20a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8003b98 <HAL_GPIO_Init+0x31c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <HAL_GPIO_Init+0x206>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a49      	ldr	r2, [pc, #292]	@ (8003b9c <HAL_GPIO_Init+0x320>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <HAL_GPIO_Init+0x202>
 8003a7a:	2306      	movs	r3, #6
 8003a7c:	e00c      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a7e:	2307      	movs	r3, #7
 8003a80:	e00a      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a82:	2305      	movs	r3, #5
 8003a84:	e008      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a86:	2304      	movs	r3, #4
 8003a88:	e006      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e004      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e002      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a96:	2300      	movs	r3, #0
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	f002 0203 	and.w	r2, r2, #3
 8003a9e:	0092      	lsls	r2, r2, #2
 8003aa0:	4093      	lsls	r3, r2
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa8:	4935      	ldr	r1, [pc, #212]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ada:	4a31      	ldr	r2, [pc, #196]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b04:	4a26      	ldr	r2, [pc, #152]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b0a:	4b25      	ldr	r3, [pc, #148]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b58:	4a11      	ldr	r2, [pc, #68]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3301      	adds	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2b0f      	cmp	r3, #15
 8003b68:	f67f ae96 	bls.w	8003898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	3724      	adds	r7, #36	@ 0x24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40013800 	.word	0x40013800
 8003b84:	40020000 	.word	0x40020000
 8003b88:	40020400 	.word	0x40020400
 8003b8c:	40020800 	.word	0x40020800
 8003b90:	40020c00 	.word	0x40020c00
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40021400 	.word	0x40021400
 8003b9c:	40021800 	.word	0x40021800
 8003ba0:	40013c00 	.word	0x40013c00

08003ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	887b      	ldrh	r3, [r7, #2]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
 8003bc0:	e001      	b.n	8003bc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]
 8003be0:	4613      	mov	r3, r2
 8003be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be4:	787b      	ldrb	r3, [r7, #1]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bf0:	e003      	b.n	8003bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bf2:	887b      	ldrh	r3, [r7, #2]
 8003bf4:	041a      	lsls	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	619a      	str	r2, [r3, #24]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0cc      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b68      	ldr	r3, [pc, #416]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d90c      	bls.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b65      	ldr	r3, [pc, #404]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b63      	ldr	r3, [pc, #396]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0b8      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c5c:	4b59      	ldr	r3, [pc, #356]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a58      	ldr	r2, [pc, #352]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c74:	4b53      	ldr	r3, [pc, #332]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a52      	ldr	r2, [pc, #328]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c80:	4b50      	ldr	r3, [pc, #320]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	494d      	ldr	r1, [pc, #308]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d044      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	4b47      	ldr	r3, [pc, #284]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d119      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e07f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e06f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e067      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce6:	4b37      	ldr	r3, [pc, #220]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4934      	ldr	r1, [pc, #208]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf8:	f7fe fc90 	bl	800261c <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d00:	f7fe fc8c 	bl	800261c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e04f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 020c 	and.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d1eb      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d28:	4b25      	ldr	r3, [pc, #148]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d20c      	bcs.n	8003d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b22      	ldr	r3, [pc, #136]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b20      	ldr	r3, [pc, #128]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e032      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d5c:	4b19      	ldr	r3, [pc, #100]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4916      	ldr	r1, [pc, #88]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7a:	4b12      	ldr	r3, [pc, #72]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	490e      	ldr	r1, [pc, #56]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d8e:	f000 f873 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	490a      	ldr	r1, [pc, #40]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	5ccb      	ldrb	r3, [r1, r3]
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	4a09      	ldr	r2, [pc, #36]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003daa:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fb16 	bl	80023e0 <HAL_InitTick>

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023c00 	.word	0x40023c00
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08007574 	.word	0x08007574
 8003dcc:	20000004 	.word	0x20000004
 8003dd0:	20000008 	.word	0x20000008

08003dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	@ (8003de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000004 	.word	0x20000004

08003dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003df0:	f7ff fff0 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0a9b      	lsrs	r3, r3, #10
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	@ (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	08007584 	.word	0x08007584

08003e14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	220f      	movs	r2, #15
 8003e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e24:	4b12      	ldr	r3, [pc, #72]	@ (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0203 	and.w	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e30:	4b0f      	ldr	r3, [pc, #60]	@ (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e48:	4b09      	ldr	r3, [pc, #36]	@ (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	08db      	lsrs	r3, r3, #3
 8003e4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e56:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <HAL_RCC_GetClockConfig+0x60>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 020f 	and.w	r2, r3, #15
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40023c00 	.word	0x40023c00

08003e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e7c:	b0ae      	sub	sp, #184	@ 0xb8
 8003e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e9e:	4bcb      	ldr	r3, [pc, #812]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	f200 8206 	bhi.w	80042b8 <HAL_RCC_GetSysClockFreq+0x440>
 8003eac:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb2:	bf00      	nop
 8003eb4:	08003ee9 	.word	0x08003ee9
 8003eb8:	080042b9 	.word	0x080042b9
 8003ebc:	080042b9 	.word	0x080042b9
 8003ec0:	080042b9 	.word	0x080042b9
 8003ec4:	08003ef1 	.word	0x08003ef1
 8003ec8:	080042b9 	.word	0x080042b9
 8003ecc:	080042b9 	.word	0x080042b9
 8003ed0:	080042b9 	.word	0x080042b9
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	080042b9 	.word	0x080042b9
 8003edc:	080042b9 	.word	0x080042b9
 8003ee0:	080042b9 	.word	0x080042b9
 8003ee4:	080040e9 	.word	0x080040e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4bb9      	ldr	r3, [pc, #740]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003eee:	e1e7      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef0:	4bb8      	ldr	r3, [pc, #736]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ef6:	e1e3      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef8:	4bb4      	ldr	r3, [pc, #720]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f04:	4bb1      	ldr	r3, [pc, #708]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d071      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f10:	4bae      	ldr	r3, [pc, #696]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f1c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f36:	4622      	mov	r2, r4
 8003f38:	462b      	mov	r3, r5
 8003f3a:	f04f 0000 	mov.w	r0, #0
 8003f3e:	f04f 0100 	mov.w	r1, #0
 8003f42:	0159      	lsls	r1, r3, #5
 8003f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f48:	0150      	lsls	r0, r2, #5
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4621      	mov	r1, r4
 8003f50:	1a51      	subs	r1, r2, r1
 8003f52:	6439      	str	r1, [r7, #64]	@ 0x40
 8003f54:	4629      	mov	r1, r5
 8003f56:	eb63 0301 	sbc.w	r3, r3, r1
 8003f5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003f68:	4649      	mov	r1, r9
 8003f6a:	018b      	lsls	r3, r1, #6
 8003f6c:	4641      	mov	r1, r8
 8003f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f72:	4641      	mov	r1, r8
 8003f74:	018a      	lsls	r2, r1, #6
 8003f76:	4641      	mov	r1, r8
 8003f78:	1a51      	subs	r1, r2, r1
 8003f7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003f90:	4649      	mov	r1, r9
 8003f92:	00cb      	lsls	r3, r1, #3
 8003f94:	4641      	mov	r1, r8
 8003f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	00ca      	lsls	r2, r1, #3
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	189b      	adds	r3, r3, r2
 8003fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003faa:	462b      	mov	r3, r5
 8003fac:	460a      	mov	r2, r1
 8003fae:	eb42 0303 	adc.w	r3, r2, r3
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	024b      	lsls	r3, r1, #9
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fca:	4621      	mov	r1, r4
 8003fcc:	024a      	lsls	r2, r1, #9
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fe0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fe4:	f7fc fd32 	bl	8000a4c <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4613      	mov	r3, r2
 8003fee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ff2:	e067      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff4:	4b75      	ldr	r3, [pc, #468]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	099b      	lsrs	r3, r3, #6
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004000:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004004:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800400e:	2300      	movs	r3, #0
 8004010:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004012:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004016:	4622      	mov	r2, r4
 8004018:	462b      	mov	r3, r5
 800401a:	f04f 0000 	mov.w	r0, #0
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	0159      	lsls	r1, r3, #5
 8004024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004028:	0150      	lsls	r0, r2, #5
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4621      	mov	r1, r4
 8004030:	1a51      	subs	r1, r2, r1
 8004032:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004034:	4629      	mov	r1, r5
 8004036:	eb63 0301 	sbc.w	r3, r3, r1
 800403a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004048:	4649      	mov	r1, r9
 800404a:	018b      	lsls	r3, r1, #6
 800404c:	4641      	mov	r1, r8
 800404e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004052:	4641      	mov	r1, r8
 8004054:	018a      	lsls	r2, r1, #6
 8004056:	4641      	mov	r1, r8
 8004058:	ebb2 0a01 	subs.w	sl, r2, r1
 800405c:	4649      	mov	r1, r9
 800405e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800406e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004076:	4692      	mov	sl, r2
 8004078:	469b      	mov	fp, r3
 800407a:	4623      	mov	r3, r4
 800407c:	eb1a 0303 	adds.w	r3, sl, r3
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	462b      	mov	r3, r5
 8004084:	eb4b 0303 	adc.w	r3, fp, r3
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004096:	4629      	mov	r1, r5
 8004098:	028b      	lsls	r3, r1, #10
 800409a:	4621      	mov	r1, r4
 800409c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a0:	4621      	mov	r1, r4
 80040a2:	028a      	lsls	r2, r1, #10
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040ac:	2200      	movs	r2, #0
 80040ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80040b0:	677a      	str	r2, [r7, #116]	@ 0x74
 80040b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80040b6:	f7fc fcc9 	bl	8000a4c <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4613      	mov	r3, r2
 80040c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040c4:	4b41      	ldr	r3, [pc, #260]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x354>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	0c1b      	lsrs	r3, r3, #16
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	3301      	adds	r3, #1
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80040d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040e6:	e0eb      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e8:	4b38      	ldr	r3, [pc, #224]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x354>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f4:	4b35      	ldr	r3, [pc, #212]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x354>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d06b      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004100:	4b32      	ldr	r3, [pc, #200]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	099b      	lsrs	r3, r3, #6
 8004106:	2200      	movs	r2, #0
 8004108:	66bb      	str	r3, [r7, #104]	@ 0x68
 800410a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800410c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800410e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004112:	663b      	str	r3, [r7, #96]	@ 0x60
 8004114:	2300      	movs	r3, #0
 8004116:	667b      	str	r3, [r7, #100]	@ 0x64
 8004118:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800411c:	4622      	mov	r2, r4
 800411e:	462b      	mov	r3, r5
 8004120:	f04f 0000 	mov.w	r0, #0
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	0159      	lsls	r1, r3, #5
 800412a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412e:	0150      	lsls	r0, r2, #5
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4621      	mov	r1, r4
 8004136:	1a51      	subs	r1, r2, r1
 8004138:	61b9      	str	r1, [r7, #24]
 800413a:	4629      	mov	r1, r5
 800413c:	eb63 0301 	sbc.w	r3, r3, r1
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800414e:	4659      	mov	r1, fp
 8004150:	018b      	lsls	r3, r1, #6
 8004152:	4651      	mov	r1, sl
 8004154:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004158:	4651      	mov	r1, sl
 800415a:	018a      	lsls	r2, r1, #6
 800415c:	4651      	mov	r1, sl
 800415e:	ebb2 0801 	subs.w	r8, r2, r1
 8004162:	4659      	mov	r1, fp
 8004164:	eb63 0901 	sbc.w	r9, r3, r1
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004174:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004178:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800417c:	4690      	mov	r8, r2
 800417e:	4699      	mov	r9, r3
 8004180:	4623      	mov	r3, r4
 8004182:	eb18 0303 	adds.w	r3, r8, r3
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	462b      	mov	r3, r5
 800418a:	eb49 0303 	adc.w	r3, r9, r3
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800419c:	4629      	mov	r1, r5
 800419e:	024b      	lsls	r3, r1, #9
 80041a0:	4621      	mov	r1, r4
 80041a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041a6:	4621      	mov	r1, r4
 80041a8:	024a      	lsls	r2, r1, #9
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041b2:	2200      	movs	r2, #0
 80041b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80041b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041bc:	f7fc fc46 	bl	8000a4c <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4613      	mov	r3, r2
 80041c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041ca:	e065      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x420>
 80041cc:	40023800 	.word	0x40023800
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d8:	4b3d      	ldr	r3, [pc, #244]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	099b      	lsrs	r3, r3, #6
 80041de:	2200      	movs	r2, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	4611      	mov	r1, r2
 80041e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80041ea:	2300      	movs	r3, #0
 80041ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80041ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80041f2:	4642      	mov	r2, r8
 80041f4:	464b      	mov	r3, r9
 80041f6:	f04f 0000 	mov.w	r0, #0
 80041fa:	f04f 0100 	mov.w	r1, #0
 80041fe:	0159      	lsls	r1, r3, #5
 8004200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004204:	0150      	lsls	r0, r2, #5
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4641      	mov	r1, r8
 800420c:	1a51      	subs	r1, r2, r1
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	4649      	mov	r1, r9
 8004212:	eb63 0301 	sbc.w	r3, r3, r1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004224:	4659      	mov	r1, fp
 8004226:	018b      	lsls	r3, r1, #6
 8004228:	4651      	mov	r1, sl
 800422a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800422e:	4651      	mov	r1, sl
 8004230:	018a      	lsls	r2, r1, #6
 8004232:	4651      	mov	r1, sl
 8004234:	1a54      	subs	r4, r2, r1
 8004236:	4659      	mov	r1, fp
 8004238:	eb63 0501 	sbc.w	r5, r3, r1
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	00eb      	lsls	r3, r5, #3
 8004246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800424a:	00e2      	lsls	r2, r4, #3
 800424c:	4614      	mov	r4, r2
 800424e:	461d      	mov	r5, r3
 8004250:	4643      	mov	r3, r8
 8004252:	18e3      	adds	r3, r4, r3
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	464b      	mov	r3, r9
 8004258:	eb45 0303 	adc.w	r3, r5, r3
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800426a:	4629      	mov	r1, r5
 800426c:	028b      	lsls	r3, r1, #10
 800426e:	4621      	mov	r1, r4
 8004270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004274:	4621      	mov	r1, r4
 8004276:	028a      	lsls	r2, r1, #10
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004280:	2200      	movs	r2, #0
 8004282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004284:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004286:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800428a:	f7fc fbdf 	bl	8000a4c <__aeabi_uldivmod>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4613      	mov	r3, r2
 8004294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004298:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	0f1b      	lsrs	r3, r3, #28
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80042a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042b6:	e003      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80042ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	37b8      	adds	r7, #184	@ 0xb8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
 80042d4:	00f42400 	.word	0x00f42400

080042d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e28d      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8083 	beq.w	80043fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042f8:	4b94      	ldr	r3, [pc, #592]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 030c 	and.w	r3, r3, #12
 8004300:	2b04      	cmp	r3, #4
 8004302:	d019      	beq.n	8004338 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004304:	4b91      	ldr	r3, [pc, #580]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800430c:	2b08      	cmp	r3, #8
 800430e:	d106      	bne.n	800431e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004310:	4b8e      	ldr	r3, [pc, #568]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004318:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800431c:	d00c      	beq.n	8004338 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431e:	4b8b      	ldr	r3, [pc, #556]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004326:	2b0c      	cmp	r3, #12
 8004328:	d112      	bne.n	8004350 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800432a:	4b88      	ldr	r3, [pc, #544]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004336:	d10b      	bne.n	8004350 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004338:	4b84      	ldr	r3, [pc, #528]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d05b      	beq.n	80043fc <HAL_RCC_OscConfig+0x124>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d157      	bne.n	80043fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e25a      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004358:	d106      	bne.n	8004368 <HAL_RCC_OscConfig+0x90>
 800435a:	4b7c      	ldr	r3, [pc, #496]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a7b      	ldr	r2, [pc, #492]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e01d      	b.n	80043a4 <HAL_RCC_OscConfig+0xcc>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0xb4>
 8004372:	4b76      	ldr	r3, [pc, #472]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a75      	ldr	r2, [pc, #468]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4b73      	ldr	r3, [pc, #460]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a72      	ldr	r2, [pc, #456]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e00b      	b.n	80043a4 <HAL_RCC_OscConfig+0xcc>
 800438c:	4b6f      	ldr	r3, [pc, #444]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a6e      	ldr	r2, [pc, #440]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	4b6c      	ldr	r3, [pc, #432]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a6b      	ldr	r2, [pc, #428]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 800439e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d013      	beq.n	80043d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fe f936 	bl	800261c <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043b4:	f7fe f932 	bl	800261c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	@ 0x64
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e21f      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	4b61      	ldr	r3, [pc, #388]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0xdc>
 80043d2:	e014      	b.n	80043fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fe f922 	bl	800261c <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fe f91e 	bl	800261c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	@ 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e20b      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	4b57      	ldr	r3, [pc, #348]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x104>
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d06f      	beq.n	80044ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800440a:	4b50      	ldr	r3, [pc, #320]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b00      	cmp	r3, #0
 8004414:	d017      	beq.n	8004446 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004416:	4b4d      	ldr	r3, [pc, #308]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800441e:	2b08      	cmp	r3, #8
 8004420:	d105      	bne.n	800442e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004422:	4b4a      	ldr	r3, [pc, #296]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00b      	beq.n	8004446 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442e:	4b47      	ldr	r3, [pc, #284]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004436:	2b0c      	cmp	r3, #12
 8004438:	d11c      	bne.n	8004474 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800443a:	4b44      	ldr	r3, [pc, #272]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d116      	bne.n	8004474 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004446:	4b41      	ldr	r3, [pc, #260]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_RCC_OscConfig+0x186>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d001      	beq.n	800445e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e1d3      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445e:	4b3b      	ldr	r3, [pc, #236]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4937      	ldr	r1, [pc, #220]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 800446e:	4313      	orrs	r3, r2
 8004470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004472:	e03a      	b.n	80044ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800447c:	4b34      	ldr	r3, [pc, #208]	@ (8004550 <HAL_RCC_OscConfig+0x278>)
 800447e:	2201      	movs	r2, #1
 8004480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004482:	f7fe f8cb 	bl	800261c <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800448a:	f7fe f8c7 	bl	800261c <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e1b4      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	4b2b      	ldr	r3, [pc, #172]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a8:	4b28      	ldr	r3, [pc, #160]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4925      	ldr	r1, [pc, #148]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	600b      	str	r3, [r1, #0]
 80044bc:	e015      	b.n	80044ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044be:	4b24      	ldr	r3, [pc, #144]	@ (8004550 <HAL_RCC_OscConfig+0x278>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fe f8aa 	bl	800261c <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044cc:	f7fe f8a6 	bl	800261c <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e193      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	4b1b      	ldr	r3, [pc, #108]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d036      	beq.n	8004564 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d016      	beq.n	800452c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fe:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 8004500:	2201      	movs	r2, #1
 8004502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fe f88a 	bl	800261c <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450c:	f7fe f886 	bl	800261c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e173      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <HAL_RCC_OscConfig+0x274>)
 8004520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x234>
 800452a:	e01b      	b.n	8004564 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800452c:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <HAL_RCC_OscConfig+0x27c>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004532:	f7fe f873 	bl	800261c <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004538:	e00e      	b.n	8004558 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800453a:	f7fe f86f 	bl	800261c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d907      	bls.n	8004558 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e15c      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
 800454c:	40023800 	.word	0x40023800
 8004550:	42470000 	.word	0x42470000
 8004554:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004558:	4b8a      	ldr	r3, [pc, #552]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 800455a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1ea      	bne.n	800453a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8097 	beq.w	80046a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004572:	2300      	movs	r3, #0
 8004574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004576:	4b83      	ldr	r3, [pc, #524]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10f      	bne.n	80045a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	4b7f      	ldr	r3, [pc, #508]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	4a7e      	ldr	r2, [pc, #504]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004590:	6413      	str	r3, [r2, #64]	@ 0x40
 8004592:	4b7c      	ldr	r3, [pc, #496]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a2:	4b79      	ldr	r3, [pc, #484]	@ (8004788 <HAL_RCC_OscConfig+0x4b0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d118      	bne.n	80045e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ae:	4b76      	ldr	r3, [pc, #472]	@ (8004788 <HAL_RCC_OscConfig+0x4b0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a75      	ldr	r2, [pc, #468]	@ (8004788 <HAL_RCC_OscConfig+0x4b0>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ba:	f7fe f82f 	bl	800261c <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7fe f82b 	bl	800261c <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e118      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004788 <HAL_RCC_OscConfig+0x4b0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d106      	bne.n	80045f6 <HAL_RCC_OscConfig+0x31e>
 80045e8:	4b66      	ldr	r3, [pc, #408]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	4a65      	ldr	r2, [pc, #404]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f4:	e01c      	b.n	8004630 <HAL_RCC_OscConfig+0x358>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x340>
 80045fe:	4b61      	ldr	r3, [pc, #388]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	4a60      	ldr	r2, [pc, #384]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 8004604:	f043 0304 	orr.w	r3, r3, #4
 8004608:	6713      	str	r3, [r2, #112]	@ 0x70
 800460a:	4b5e      	ldr	r3, [pc, #376]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460e:	4a5d      	ldr	r2, [pc, #372]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6713      	str	r3, [r2, #112]	@ 0x70
 8004616:	e00b      	b.n	8004630 <HAL_RCC_OscConfig+0x358>
 8004618:	4b5a      	ldr	r3, [pc, #360]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461c:	4a59      	ldr	r2, [pc, #356]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	6713      	str	r3, [r2, #112]	@ 0x70
 8004624:	4b57      	ldr	r3, [pc, #348]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004628:	4a56      	ldr	r2, [pc, #344]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 800462a:	f023 0304 	bic.w	r3, r3, #4
 800462e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d015      	beq.n	8004664 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fd fff0 	bl	800261c <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463e:	e00a      	b.n	8004656 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004640:	f7fd ffec 	bl	800261c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e0d7      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004656:	4b4b      	ldr	r3, [pc, #300]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0ee      	beq.n	8004640 <HAL_RCC_OscConfig+0x368>
 8004662:	e014      	b.n	800468e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fd ffda 	bl	800261c <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466a:	e00a      	b.n	8004682 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fd ffd6 	bl	800261c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e0c1      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004682:	4b40      	ldr	r3, [pc, #256]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1ee      	bne.n	800466c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800468e:	7dfb      	ldrb	r3, [r7, #23]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d105      	bne.n	80046a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004694:	4b3b      	ldr	r3, [pc, #236]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 8004696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004698:	4a3a      	ldr	r2, [pc, #232]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 800469a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800469e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80ad 	beq.w	8004804 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046aa:	4b36      	ldr	r3, [pc, #216]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d060      	beq.n	8004778 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d145      	bne.n	800474a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046be:	4b33      	ldr	r3, [pc, #204]	@ (800478c <HAL_RCC_OscConfig+0x4b4>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fd ffaa 	bl	800261c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fd ffa6 	bl	800261c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e093      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	4b29      	ldr	r3, [pc, #164]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69da      	ldr	r2, [r3, #28]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	019b      	lsls	r3, r3, #6
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	3b01      	subs	r3, #1
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	061b      	lsls	r3, r3, #24
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	071b      	lsls	r3, r3, #28
 8004716:	491b      	ldr	r1, [pc, #108]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 8004718:	4313      	orrs	r3, r2
 800471a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800471c:	4b1b      	ldr	r3, [pc, #108]	@ (800478c <HAL_RCC_OscConfig+0x4b4>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004722:	f7fd ff7b 	bl	800261c <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472a:	f7fd ff77 	bl	800261c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e064      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473c:	4b11      	ldr	r3, [pc, #68]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x452>
 8004748:	e05c      	b.n	8004804 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b10      	ldr	r3, [pc, #64]	@ (800478c <HAL_RCC_OscConfig+0x4b4>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fd ff64 	bl	800261c <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004758:	f7fd ff60 	bl	800261c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e04d      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <HAL_RCC_OscConfig+0x4ac>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x480>
 8004776:	e045      	b.n	8004804 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d107      	bne.n	8004790 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e040      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
 8004784:	40023800 	.word	0x40023800
 8004788:	40007000 	.word	0x40007000
 800478c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004790:	4b1f      	ldr	r3, [pc, #124]	@ (8004810 <HAL_RCC_OscConfig+0x538>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d030      	beq.n	8004800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d129      	bne.n	8004800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d122      	bne.n	8004800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d119      	bne.n	8004800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d6:	085b      	lsrs	r3, r3, #1
 80047d8:	3b01      	subs	r3, #1
 80047da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d10f      	bne.n	8004800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d107      	bne.n	8004800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800

08004814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e041      	b.n	80048aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fd fd5a 	bl	80022f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f000 fefa 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d001      	beq.n	80048cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e04e      	b.n	800496a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a23      	ldr	r2, [pc, #140]	@ (8004978 <HAL_TIM_Base_Start_IT+0xc4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f6:	d01d      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1f      	ldr	r2, [pc, #124]	@ (800497c <HAL_TIM_Base_Start_IT+0xc8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1e      	ldr	r2, [pc, #120]	@ (8004980 <HAL_TIM_Base_Start_IT+0xcc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1c      	ldr	r2, [pc, #112]	@ (8004984 <HAL_TIM_Base_Start_IT+0xd0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1b      	ldr	r2, [pc, #108]	@ (8004988 <HAL_TIM_Base_Start_IT+0xd4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a19      	ldr	r2, [pc, #100]	@ (800498c <HAL_TIM_Base_Start_IT+0xd8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a18      	ldr	r2, [pc, #96]	@ (8004990 <HAL_TIM_Base_Start_IT+0xdc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d111      	bne.n	8004958 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b06      	cmp	r3, #6
 8004944:	d010      	beq.n	8004968 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004956:	e007      	b.n	8004968 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40000400 	.word	0x40000400
 8004980:	40000800 	.word	0x40000800
 8004984:	40000c00 	.word	0x40000c00
 8004988:	40010400 	.word	0x40010400
 800498c:	40014000 	.word	0x40014000
 8004990:	40001800 	.word	0x40001800

08004994 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e041      	b.n	8004a2a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f839 	bl	8004a32 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f000 fe3a 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <HAL_TIM_OC_Start_IT+0x28>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e022      	b.n	8004ab6 <HAL_TIM_OC_Start_IT+0x6e>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d109      	bne.n	8004a8a <HAL_TIM_OC_Start_IT+0x42>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	bf14      	ite	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	2300      	moveq	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e015      	b.n	8004ab6 <HAL_TIM_OC_Start_IT+0x6e>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d109      	bne.n	8004aa4 <HAL_TIM_OC_Start_IT+0x5c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	bf14      	ite	ne
 8004a9c:	2301      	movne	r3, #1
 8004a9e:	2300      	moveq	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e008      	b.n	8004ab6 <HAL_TIM_OC_Start_IT+0x6e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e0c7      	b.n	8004c4e <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_OC_Start_IT+0x86>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004acc:	e013      	b.n	8004af6 <HAL_TIM_OC_Start_IT+0xae>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_OC_Start_IT+0x96>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004adc:	e00b      	b.n	8004af6 <HAL_TIM_OC_Start_IT+0xae>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d104      	bne.n	8004aee <HAL_TIM_OC_Start_IT+0xa6>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aec:	e003      	b.n	8004af6 <HAL_TIM_OC_Start_IT+0xae>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	d841      	bhi.n	8004b80 <HAL_TIM_OC_Start_IT+0x138>
 8004afc:	a201      	add	r2, pc, #4	@ (adr r2, 8004b04 <HAL_TIM_OC_Start_IT+0xbc>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004b81 	.word	0x08004b81
 8004b0c:	08004b81 	.word	0x08004b81
 8004b10:	08004b81 	.word	0x08004b81
 8004b14:	08004b4b 	.word	0x08004b4b
 8004b18:	08004b81 	.word	0x08004b81
 8004b1c:	08004b81 	.word	0x08004b81
 8004b20:	08004b81 	.word	0x08004b81
 8004b24:	08004b5d 	.word	0x08004b5d
 8004b28:	08004b81 	.word	0x08004b81
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004b81 	.word	0x08004b81
 8004b34:	08004b6f 	.word	0x08004b6f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0202 	orr.w	r2, r2, #2
 8004b46:	60da      	str	r2, [r3, #12]
      break;
 8004b48:	e01d      	b.n	8004b86 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0204 	orr.w	r2, r2, #4
 8004b58:	60da      	str	r2, [r3, #12]
      break;
 8004b5a:	e014      	b.n	8004b86 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0208 	orr.w	r2, r2, #8
 8004b6a:	60da      	str	r2, [r3, #12]
      break;
 8004b6c:	e00b      	b.n	8004b86 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0210 	orr.w	r2, r2, #16
 8004b7c:	60da      	str	r2, [r3, #12]
      break;
 8004b7e:	e002      	b.n	8004b86 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
      break;
 8004b84:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d15f      	bne.n	8004c4c <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2201      	movs	r2, #1
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 f843 	bl	8005c20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004c58 <HAL_TIM_OC_Start_IT+0x210>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d004      	beq.n	8004bae <HAL_TIM_OC_Start_IT+0x166>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8004c5c <HAL_TIM_OC_Start_IT+0x214>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d101      	bne.n	8004bb2 <HAL_TIM_OC_Start_IT+0x16a>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <HAL_TIM_OC_Start_IT+0x16c>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bc6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a22      	ldr	r2, [pc, #136]	@ (8004c58 <HAL_TIM_OC_Start_IT+0x210>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d022      	beq.n	8004c18 <HAL_TIM_OC_Start_IT+0x1d0>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bda:	d01d      	beq.n	8004c18 <HAL_TIM_OC_Start_IT+0x1d0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c60 <HAL_TIM_OC_Start_IT+0x218>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d018      	beq.n	8004c18 <HAL_TIM_OC_Start_IT+0x1d0>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1e      	ldr	r2, [pc, #120]	@ (8004c64 <HAL_TIM_OC_Start_IT+0x21c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d013      	beq.n	8004c18 <HAL_TIM_OC_Start_IT+0x1d0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c68 <HAL_TIM_OC_Start_IT+0x220>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00e      	beq.n	8004c18 <HAL_TIM_OC_Start_IT+0x1d0>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a17      	ldr	r2, [pc, #92]	@ (8004c5c <HAL_TIM_OC_Start_IT+0x214>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d009      	beq.n	8004c18 <HAL_TIM_OC_Start_IT+0x1d0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <HAL_TIM_OC_Start_IT+0x224>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_TIM_OC_Start_IT+0x1d0>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a17      	ldr	r2, [pc, #92]	@ (8004c70 <HAL_TIM_OC_Start_IT+0x228>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d111      	bne.n	8004c3c <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b06      	cmp	r3, #6
 8004c28:	d010      	beq.n	8004c4c <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3a:	e007      	b.n	8004c4c <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	40010400 	.word	0x40010400
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	40001800 	.word	0x40001800

08004c74 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b0c      	cmp	r3, #12
 8004c86:	d841      	bhi.n	8004d0c <HAL_TIM_OC_Stop_IT+0x98>
 8004c88:	a201      	add	r2, pc, #4	@ (adr r2, 8004c90 <HAL_TIM_OC_Stop_IT+0x1c>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004d0d 	.word	0x08004d0d
 8004c98:	08004d0d 	.word	0x08004d0d
 8004c9c:	08004d0d 	.word	0x08004d0d
 8004ca0:	08004cd7 	.word	0x08004cd7
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004d0d 	.word	0x08004d0d
 8004cac:	08004d0d 	.word	0x08004d0d
 8004cb0:	08004ce9 	.word	0x08004ce9
 8004cb4:	08004d0d 	.word	0x08004d0d
 8004cb8:	08004d0d 	.word	0x08004d0d
 8004cbc:	08004d0d 	.word	0x08004d0d
 8004cc0:	08004cfb 	.word	0x08004cfb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0202 	bic.w	r2, r2, #2
 8004cd2:	60da      	str	r2, [r3, #12]
      break;
 8004cd4:	e01d      	b.n	8004d12 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0204 	bic.w	r2, r2, #4
 8004ce4:	60da      	str	r2, [r3, #12]
      break;
 8004ce6:	e014      	b.n	8004d12 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0208 	bic.w	r2, r2, #8
 8004cf6:	60da      	str	r2, [r3, #12]
      break;
 8004cf8:	e00b      	b.n	8004d12 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0210 	bic.w	r2, r2, #16
 8004d08:	60da      	str	r2, [r3, #12]
      break;
 8004d0a:	e002      	b.n	8004d12 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d10:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d161      	bne.n	8004ddc <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	6839      	ldr	r1, [r7, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 ff7d 	bl	8005c20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8004de8 <HAL_TIM_OC_Stop_IT+0x174>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_TIM_OC_Stop_IT+0xc6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2d      	ldr	r2, [pc, #180]	@ (8004dec <HAL_TIM_OC_Stop_IT+0x178>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_OC_Stop_IT+0xca>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_TIM_OC_Stop_IT+0xcc>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d017      	beq.n	8004d74 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6a1a      	ldr	r2, [r3, #32]
 8004d4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10f      	bne.n	8004d74 <HAL_TIM_OC_Stop_IT+0x100>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6a1a      	ldr	r2, [r3, #32]
 8004d5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <HAL_TIM_OC_Stop_IT+0x100>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d72:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6a1a      	ldr	r2, [r3, #32]
 8004d7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10f      	bne.n	8004da4 <HAL_TIM_OC_Stop_IT+0x130>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6a1a      	ldr	r2, [r3, #32]
 8004d8a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d107      	bne.n	8004da4 <HAL_TIM_OC_Stop_IT+0x130>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d104      	bne.n	8004db4 <HAL_TIM_OC_Stop_IT+0x140>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db2:	e013      	b.n	8004ddc <HAL_TIM_OC_Stop_IT+0x168>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d104      	bne.n	8004dc4 <HAL_TIM_OC_Stop_IT+0x150>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dc2:	e00b      	b.n	8004ddc <HAL_TIM_OC_Stop_IT+0x168>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d104      	bne.n	8004dd4 <HAL_TIM_OC_Stop_IT+0x160>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dd2:	e003      	b.n	8004ddc <HAL_TIM_OC_Stop_IT+0x168>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40010000 	.word	0x40010000
 8004dec:	40010400 	.word	0x40010400

08004df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e041      	b.n	8004e86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f839 	bl	8004e8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f000 fc0c 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <HAL_TIM_PWM_Start+0x24>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	e022      	b.n	8004f0e <HAL_TIM_PWM_Start+0x6a>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d109      	bne.n	8004ee2 <HAL_TIM_PWM_Start+0x3e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	bf14      	ite	ne
 8004eda:	2301      	movne	r3, #1
 8004edc:	2300      	moveq	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	e015      	b.n	8004f0e <HAL_TIM_PWM_Start+0x6a>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d109      	bne.n	8004efc <HAL_TIM_PWM_Start+0x58>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	bf14      	ite	ne
 8004ef4:	2301      	movne	r3, #1
 8004ef6:	2300      	moveq	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	e008      	b.n	8004f0e <HAL_TIM_PWM_Start+0x6a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e07c      	b.n	8005010 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x82>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f24:	e013      	b.n	8004f4e <HAL_TIM_PWM_Start+0xaa>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_PWM_Start+0x92>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f34:	e00b      	b.n	8004f4e <HAL_TIM_PWM_Start+0xaa>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d104      	bne.n	8004f46 <HAL_TIM_PWM_Start+0xa2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f44:	e003      	b.n	8004f4e <HAL_TIM_PWM_Start+0xaa>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2201      	movs	r2, #1
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fe62 	bl	8005c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a2d      	ldr	r2, [pc, #180]	@ (8005018 <HAL_TIM_PWM_Start+0x174>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_TIM_PWM_Start+0xcc>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800501c <HAL_TIM_PWM_Start+0x178>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d101      	bne.n	8004f74 <HAL_TIM_PWM_Start+0xd0>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <HAL_TIM_PWM_Start+0xd2>
 8004f74:	2300      	movs	r3, #0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a22      	ldr	r2, [pc, #136]	@ (8005018 <HAL_TIM_PWM_Start+0x174>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d022      	beq.n	8004fda <HAL_TIM_PWM_Start+0x136>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9c:	d01d      	beq.n	8004fda <HAL_TIM_PWM_Start+0x136>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8005020 <HAL_TIM_PWM_Start+0x17c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d018      	beq.n	8004fda <HAL_TIM_PWM_Start+0x136>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1d      	ldr	r2, [pc, #116]	@ (8005024 <HAL_TIM_PWM_Start+0x180>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <HAL_TIM_PWM_Start+0x136>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8005028 <HAL_TIM_PWM_Start+0x184>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <HAL_TIM_PWM_Start+0x136>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a16      	ldr	r2, [pc, #88]	@ (800501c <HAL_TIM_PWM_Start+0x178>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <HAL_TIM_PWM_Start+0x136>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a18      	ldr	r2, [pc, #96]	@ (800502c <HAL_TIM_PWM_Start+0x188>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <HAL_TIM_PWM_Start+0x136>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a16      	ldr	r2, [pc, #88]	@ (8005030 <HAL_TIM_PWM_Start+0x18c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d111      	bne.n	8004ffe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b06      	cmp	r3, #6
 8004fea:	d010      	beq.n	800500e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffc:	e007      	b.n	800500e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0201 	orr.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40010000 	.word	0x40010000
 800501c:	40010400 	.word	0x40010400
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40014000 	.word	0x40014000
 8005030:	40001800 	.word	0x40001800

08005034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b02      	cmp	r3, #2
 8005048:	d122      	bne.n	8005090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b02      	cmp	r3, #2
 8005056:	d11b      	bne.n	8005090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0202 	mvn.w	r2, #2
 8005060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fac9 	bl	800560e <HAL_TIM_IC_CaptureCallback>
 800507c:	e005      	b.n	800508a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fc fa7a 	bl	8001578 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 facc 	bl	8005622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d122      	bne.n	80050e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d11b      	bne.n	80050e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0204 	mvn.w	r2, #4
 80050b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fa9f 	bl	800560e <HAL_TIM_IC_CaptureCallback>
 80050d0:	e005      	b.n	80050de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fc fa50 	bl	8001578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 faa2 	bl	8005622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d122      	bne.n	8005138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0208 	mvn.w	r2, #8
 8005108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2204      	movs	r2, #4
 800510e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fa75 	bl	800560e <HAL_TIM_IC_CaptureCallback>
 8005124:	e005      	b.n	8005132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fc fa26 	bl	8001578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fa78 	bl	8005622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b10      	cmp	r3, #16
 8005144:	d122      	bne.n	800518c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b10      	cmp	r3, #16
 8005152:	d11b      	bne.n	800518c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0210 	mvn.w	r2, #16
 800515c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2208      	movs	r2, #8
 8005162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa4b 	bl	800560e <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc f9fc 	bl	8001578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fa4e 	bl	8005622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b01      	cmp	r3, #1
 8005198:	d10e      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d107      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0201 	mvn.w	r2, #1
 80051b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fc ff6e 	bl	8002094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c2:	2b80      	cmp	r3, #128	@ 0x80
 80051c4:	d10e      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d0:	2b80      	cmp	r3, #128	@ 0x80
 80051d2:	d107      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fe1c 	bl	8005e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ee:	2b40      	cmp	r3, #64	@ 0x40
 80051f0:	d10e      	bne.n	8005210 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fc:	2b40      	cmp	r3, #64	@ 0x40
 80051fe:	d107      	bne.n	8005210 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa13 	bl	8005636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b20      	cmp	r3, #32
 800521c:	d10e      	bne.n	800523c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b20      	cmp	r3, #32
 800522a:	d107      	bne.n	800523c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0220 	mvn.w	r2, #32
 8005234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fde6 	bl	8005e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800523c:	bf00      	nop
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_TIM_OC_ConfigChannel+0x1e>
 800525e:	2302      	movs	r3, #2
 8005260:	e048      	b.n	80052f4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b0c      	cmp	r3, #12
 800526e:	d839      	bhi.n	80052e4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005270:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	080052ad 	.word	0x080052ad
 800527c:	080052e5 	.word	0x080052e5
 8005280:	080052e5 	.word	0x080052e5
 8005284:	080052e5 	.word	0x080052e5
 8005288:	080052bb 	.word	0x080052bb
 800528c:	080052e5 	.word	0x080052e5
 8005290:	080052e5 	.word	0x080052e5
 8005294:	080052e5 	.word	0x080052e5
 8005298:	080052c9 	.word	0x080052c9
 800529c:	080052e5 	.word	0x080052e5
 80052a0:	080052e5 	.word	0x080052e5
 80052a4:	080052e5 	.word	0x080052e5
 80052a8:	080052d7 	.word	0x080052d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fa6a 	bl	800578c <TIM_OC1_SetConfig>
      break;
 80052b8:	e017      	b.n	80052ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fad3 	bl	800586c <TIM_OC2_SetConfig>
      break;
 80052c6:	e010      	b.n	80052ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fb42 	bl	8005958 <TIM_OC3_SetConfig>
      break;
 80052d4:	e009      	b.n	80052ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fbaf 	bl	8005a40 <TIM_OC4_SetConfig>
      break;
 80052e2:	e002      	b.n	80052ea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	75fb      	strb	r3, [r7, #23]
      break;
 80052e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005316:	2302      	movs	r3, #2
 8005318:	e0ae      	b.n	8005478 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b0c      	cmp	r3, #12
 8005326:	f200 809f 	bhi.w	8005468 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800532a:	a201      	add	r2, pc, #4	@ (adr r2, 8005330 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005365 	.word	0x08005365
 8005334:	08005469 	.word	0x08005469
 8005338:	08005469 	.word	0x08005469
 800533c:	08005469 	.word	0x08005469
 8005340:	080053a5 	.word	0x080053a5
 8005344:	08005469 	.word	0x08005469
 8005348:	08005469 	.word	0x08005469
 800534c:	08005469 	.word	0x08005469
 8005350:	080053e7 	.word	0x080053e7
 8005354:	08005469 	.word	0x08005469
 8005358:	08005469 	.word	0x08005469
 800535c:	08005469 	.word	0x08005469
 8005360:	08005427 	.word	0x08005427
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fa0e 	bl	800578c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0208 	orr.w	r2, r2, #8
 800537e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0204 	bic.w	r2, r2, #4
 800538e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6999      	ldr	r1, [r3, #24]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	619a      	str	r2, [r3, #24]
      break;
 80053a2:	e064      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fa5e 	bl	800586c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6999      	ldr	r1, [r3, #24]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	021a      	lsls	r2, r3, #8
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	619a      	str	r2, [r3, #24]
      break;
 80053e4:	e043      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fab3 	bl	8005958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0208 	orr.w	r2, r2, #8
 8005400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0204 	bic.w	r2, r2, #4
 8005410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	61da      	str	r2, [r3, #28]
      break;
 8005424:	e023      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fb07 	bl	8005a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69d9      	ldr	r1, [r3, #28]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	021a      	lsls	r2, r3, #8
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	61da      	str	r2, [r3, #28]
      break;
 8005466:	e002      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	75fb      	strb	r3, [r7, #23]
      break;
 800546c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_TIM_ConfigClockSource+0x1c>
 8005498:	2302      	movs	r3, #2
 800549a:	e0b4      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x186>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054d4:	d03e      	beq.n	8005554 <HAL_TIM_ConfigClockSource+0xd4>
 80054d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054da:	f200 8087 	bhi.w	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e2:	f000 8086 	beq.w	80055f2 <HAL_TIM_ConfigClockSource+0x172>
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ea:	d87f      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b70      	cmp	r3, #112	@ 0x70
 80054ee:	d01a      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0xa6>
 80054f0:	2b70      	cmp	r3, #112	@ 0x70
 80054f2:	d87b      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b60      	cmp	r3, #96	@ 0x60
 80054f6:	d050      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x11a>
 80054f8:	2b60      	cmp	r3, #96	@ 0x60
 80054fa:	d877      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b50      	cmp	r3, #80	@ 0x50
 80054fe:	d03c      	beq.n	800557a <HAL_TIM_ConfigClockSource+0xfa>
 8005500:	2b50      	cmp	r3, #80	@ 0x50
 8005502:	d873      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b40      	cmp	r3, #64	@ 0x40
 8005506:	d058      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x13a>
 8005508:	2b40      	cmp	r3, #64	@ 0x40
 800550a:	d86f      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b30      	cmp	r3, #48	@ 0x30
 800550e:	d064      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005510:	2b30      	cmp	r3, #48	@ 0x30
 8005512:	d86b      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b20      	cmp	r3, #32
 8005516:	d060      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d867      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d05c      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005520:	2b10      	cmp	r3, #16
 8005522:	d05a      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005524:	e062      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6899      	ldr	r1, [r3, #8]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f000 fb53 	bl	8005be0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005548:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	609a      	str	r2, [r3, #8]
      break;
 8005552:	e04f      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	6899      	ldr	r1, [r3, #8]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f000 fb3c 	bl	8005be0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005576:	609a      	str	r2, [r3, #8]
      break;
 8005578:	e03c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	461a      	mov	r2, r3
 8005588:	f000 fab0 	bl	8005aec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2150      	movs	r1, #80	@ 0x50
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fb09 	bl	8005baa <TIM_ITRx_SetConfig>
      break;
 8005598:	e02c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f000 facf 	bl	8005b4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2160      	movs	r1, #96	@ 0x60
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 faf9 	bl	8005baa <TIM_ITRx_SetConfig>
      break;
 80055b8:	e01c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6859      	ldr	r1, [r3, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f000 fa90 	bl	8005aec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2140      	movs	r1, #64	@ 0x40
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fae9 	bl	8005baa <TIM_ITRx_SetConfig>
      break;
 80055d8:	e00c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f000 fae0 	bl	8005baa <TIM_ITRx_SetConfig>
      break;
 80055ea:	e003      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
      break;
 80055f0:	e000      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a40      	ldr	r2, [pc, #256]	@ (8005760 <TIM_Base_SetConfig+0x114>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d013      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800566a:	d00f      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a3d      	ldr	r2, [pc, #244]	@ (8005764 <TIM_Base_SetConfig+0x118>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00b      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a3c      	ldr	r2, [pc, #240]	@ (8005768 <TIM_Base_SetConfig+0x11c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d007      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a3b      	ldr	r2, [pc, #236]	@ (800576c <TIM_Base_SetConfig+0x120>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d003      	beq.n	800568c <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a3a      	ldr	r2, [pc, #232]	@ (8005770 <TIM_Base_SetConfig+0x124>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d108      	bne.n	800569e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2f      	ldr	r2, [pc, #188]	@ (8005760 <TIM_Base_SetConfig+0x114>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d02b      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ac:	d027      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005764 <TIM_Base_SetConfig+0x118>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d023      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005768 <TIM_Base_SetConfig+0x11c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d01f      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a2a      	ldr	r2, [pc, #168]	@ (800576c <TIM_Base_SetConfig+0x120>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01b      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a29      	ldr	r2, [pc, #164]	@ (8005770 <TIM_Base_SetConfig+0x124>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d017      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a28      	ldr	r2, [pc, #160]	@ (8005774 <TIM_Base_SetConfig+0x128>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d013      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a27      	ldr	r2, [pc, #156]	@ (8005778 <TIM_Base_SetConfig+0x12c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00f      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a26      	ldr	r2, [pc, #152]	@ (800577c <TIM_Base_SetConfig+0x130>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00b      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a25      	ldr	r2, [pc, #148]	@ (8005780 <TIM_Base_SetConfig+0x134>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d007      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a24      	ldr	r2, [pc, #144]	@ (8005784 <TIM_Base_SetConfig+0x138>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a23      	ldr	r2, [pc, #140]	@ (8005788 <TIM_Base_SetConfig+0x13c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d108      	bne.n	8005710 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a0a      	ldr	r2, [pc, #40]	@ (8005760 <TIM_Base_SetConfig+0x114>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_Base_SetConfig+0xf8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a0c      	ldr	r2, [pc, #48]	@ (8005770 <TIM_Base_SetConfig+0x124>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d103      	bne.n	800574c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	615a      	str	r2, [r3, #20]
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40010000 	.word	0x40010000
 8005764:	40000400 	.word	0x40000400
 8005768:	40000800 	.word	0x40000800
 800576c:	40000c00 	.word	0x40000c00
 8005770:	40010400 	.word	0x40010400
 8005774:	40014000 	.word	0x40014000
 8005778:	40014400 	.word	0x40014400
 800577c:	40014800 	.word	0x40014800
 8005780:	40001800 	.word	0x40001800
 8005784:	40001c00 	.word	0x40001c00
 8005788:	40002000 	.word	0x40002000

0800578c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f023 0201 	bic.w	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f023 0302 	bic.w	r3, r3, #2
 80057d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a20      	ldr	r2, [pc, #128]	@ (8005864 <TIM_OC1_SetConfig+0xd8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_OC1_SetConfig+0x64>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005868 <TIM_OC1_SetConfig+0xdc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d10c      	bne.n	800580a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0308 	bic.w	r3, r3, #8
 80057f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 0304 	bic.w	r3, r3, #4
 8005808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a15      	ldr	r2, [pc, #84]	@ (8005864 <TIM_OC1_SetConfig+0xd8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_OC1_SetConfig+0x8e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a14      	ldr	r2, [pc, #80]	@ (8005868 <TIM_OC1_SetConfig+0xdc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d111      	bne.n	800583e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	621a      	str	r2, [r3, #32]
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40010000 	.word	0x40010000
 8005868:	40010400 	.word	0x40010400

0800586c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0210 	bic.w	r2, r3, #16
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0320 	bic.w	r3, r3, #32
 80058b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a22      	ldr	r2, [pc, #136]	@ (8005950 <TIM_OC2_SetConfig+0xe4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC2_SetConfig+0x68>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a21      	ldr	r2, [pc, #132]	@ (8005954 <TIM_OC2_SetConfig+0xe8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d10d      	bne.n	80058f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a17      	ldr	r2, [pc, #92]	@ (8005950 <TIM_OC2_SetConfig+0xe4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_OC2_SetConfig+0x94>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a16      	ldr	r2, [pc, #88]	@ (8005954 <TIM_OC2_SetConfig+0xe8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d113      	bne.n	8005928 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800590e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	621a      	str	r2, [r3, #32]
}
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40010000 	.word	0x40010000
 8005954:	40010400 	.word	0x40010400

08005958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0303 	bic.w	r3, r3, #3
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a21      	ldr	r2, [pc, #132]	@ (8005a38 <TIM_OC3_SetConfig+0xe0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d003      	beq.n	80059be <TIM_OC3_SetConfig+0x66>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a20      	ldr	r2, [pc, #128]	@ (8005a3c <TIM_OC3_SetConfig+0xe4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d10d      	bne.n	80059da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a16      	ldr	r2, [pc, #88]	@ (8005a38 <TIM_OC3_SetConfig+0xe0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_OC3_SetConfig+0x92>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a15      	ldr	r2, [pc, #84]	@ (8005a3c <TIM_OC3_SetConfig+0xe4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d113      	bne.n	8005a12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	bf00      	nop
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	031b      	lsls	r3, r3, #12
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a12      	ldr	r2, [pc, #72]	@ (8005ae4 <TIM_OC4_SetConfig+0xa4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_OC4_SetConfig+0x68>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a11      	ldr	r2, [pc, #68]	@ (8005ae8 <TIM_OC4_SetConfig+0xa8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d109      	bne.n	8005abc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	019b      	lsls	r3, r3, #6
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	621a      	str	r2, [r3, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40010000 	.word	0x40010000
 8005ae8:	40010400 	.word	0x40010400

08005aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0201 	bic.w	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f023 030a 	bic.w	r3, r3, #10
 8005b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	621a      	str	r2, [r3, #32]
}
 8005b3e:	bf00      	nop
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b087      	sub	sp, #28
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f023 0210 	bic.w	r2, r3, #16
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	031b      	lsls	r3, r3, #12
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f043 0307 	orr.w	r3, r3, #7
 8005bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	609a      	str	r2, [r3, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	021a      	lsls	r2, r3, #8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 031f 	and.w	r3, r3, #31
 8005c32:	2201      	movs	r2, #1
 8005c34:	fa02 f303 	lsl.w	r3, r2, r3
 8005c38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a1a      	ldr	r2, [r3, #32]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	401a      	ands	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1a      	ldr	r2, [r3, #32]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	fa01 f303 	lsl.w	r3, r1, r3
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	621a      	str	r2, [r3, #32]
}
 8005c5e:	bf00      	nop
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e05a      	b.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a21      	ldr	r2, [pc, #132]	@ (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d022      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd0:	d01d      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d018      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1a      	ldr	r2, [pc, #104]	@ (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00e      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a18      	ldr	r2, [pc, #96]	@ (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d009      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a17      	ldr	r2, [pc, #92]	@ (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d004      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a15      	ldr	r2, [pc, #84]	@ (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d10c      	bne.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40000c00 	.word	0x40000c00
 8005d58:	40010400 	.word	0x40010400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40001800 	.word	0x40001800

08005d64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e03d      	b.n	8005dfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e42:	2b84      	cmp	r3, #132	@ 0x84
 8005e44:	d005      	beq.n	8005e52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3303      	adds	r3, #3
 8005e50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e52:	68fb      	ldr	r3, [r7, #12]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e64:	f000 fb50 	bl	8006508 <vTaskStartScheduler>
  
  return osOK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e70:	b089      	sub	sp, #36	@ 0x24
 8005e72:	af04      	add	r7, sp, #16
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d020      	beq.n	8005ec2 <osThreadCreate+0x54>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01c      	beq.n	8005ec2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685c      	ldr	r4, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691e      	ldr	r6, [r3, #16]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff ffc8 	bl	8005e30 <makeFreeRtosPriority>
 8005ea0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eaa:	9202      	str	r2, [sp, #8]
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	9100      	str	r1, [sp, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	4632      	mov	r2, r6
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 f8d9 	bl	800606e <xTaskCreateStatic>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e01c      	b.n	8005efc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685c      	ldr	r4, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ece:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff ffaa 	bl	8005e30 <makeFreeRtosPriority>
 8005edc:	4602      	mov	r2, r0
 8005ede:	f107 030c 	add.w	r3, r7, #12
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	9200      	str	r2, [sp, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	4632      	mov	r2, r6
 8005eea:	4629      	mov	r1, r5
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 f91e 	bl	800612e <xTaskCreate>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d001      	beq.n	8005efc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e000      	b.n	8005efe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005efc:	68fb      	ldr	r3, [r7, #12]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f103 0208 	add.w	r2, r3, #8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f103 0208 	add.w	r2, r3, #8
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f103 0208 	add.w	r2, r3, #8
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	601a      	str	r2, [r3, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d103      	bne.n	8005fc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e00c      	b.n	8005fe2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	e002      	b.n	8005fd6 <vListInsert+0x2e>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d2f6      	bcs.n	8005fd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6892      	ldr	r2, [r2, #8]
 8006030:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6852      	ldr	r2, [r2, #4]
 800603a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	429a      	cmp	r2, r3
 8006044:	d103      	bne.n	800604e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	1e5a      	subs	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800606e:	b580      	push	{r7, lr}
 8006070:	b08e      	sub	sp, #56	@ 0x38
 8006072:	af04      	add	r7, sp, #16
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
 800607a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800607c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	e7fd      	b.n	8006096 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800609a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10b      	bne.n	80060b8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	61fb      	str	r3, [r7, #28]
}
 80060b2:	bf00      	nop
 80060b4:	bf00      	nop
 80060b6:	e7fd      	b.n	80060b4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060b8:	2354      	movs	r3, #84	@ 0x54
 80060ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	2b54      	cmp	r3, #84	@ 0x54
 80060c0:	d00b      	beq.n	80060da <xTaskCreateStatic+0x6c>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	61bb      	str	r3, [r7, #24]
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	e7fd      	b.n	80060d6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01e      	beq.n	8006120 <xTaskCreateStatic+0xb2>
 80060e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01b      	beq.n	8006120 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060f0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060fa:	2300      	movs	r3, #0
 80060fc:	9303      	str	r3, [sp, #12]
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	9302      	str	r3, [sp, #8]
 8006102:	f107 0314 	add.w	r3, r7, #20
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f850 	bl	80061b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006118:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800611a:	f000 f8d5 	bl	80062c8 <prvAddNewTaskToReadyList>
 800611e:	e001      	b.n	8006124 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006124:	697b      	ldr	r3, [r7, #20]
	}
 8006126:	4618      	mov	r0, r3
 8006128:	3728      	adds	r7, #40	@ 0x28
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800612e:	b580      	push	{r7, lr}
 8006130:	b08c      	sub	sp, #48	@ 0x30
 8006132:	af04      	add	r7, sp, #16
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4618      	mov	r0, r3
 8006144:	f000 ff60 	bl	8007008 <pvPortMalloc>
 8006148:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00e      	beq.n	800616e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006150:	2054      	movs	r0, #84	@ 0x54
 8006152:	f000 ff59 	bl	8007008 <pvPortMalloc>
 8006156:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	631a      	str	r2, [r3, #48]	@ 0x30
 8006164:	e005      	b.n	8006172 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006166:	6978      	ldr	r0, [r7, #20]
 8006168:	f001 f81c 	bl	80071a4 <vPortFree>
 800616c:	e001      	b.n	8006172 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d017      	beq.n	80061a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	2300      	movs	r3, #0
 8006184:	9303      	str	r3, [sp, #12]
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	9302      	str	r3, [sp, #8]
 800618a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f80e 	bl	80061b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800619c:	69f8      	ldr	r0, [r7, #28]
 800619e:	f000 f893 	bl	80062c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061a2:	2301      	movs	r3, #1
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e002      	b.n	80061ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061a8:	f04f 33ff 	mov.w	r3, #4294967295
 80061ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061ae:	69bb      	ldr	r3, [r7, #24]
	}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061d0:	3b01      	subs	r3, #1
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f023 0307 	bic.w	r3, r3, #7
 80061de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00b      	beq.n	8006202 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	617b      	str	r3, [r7, #20]
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	e7fd      	b.n	80061fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01f      	beq.n	8006248 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006208:	2300      	movs	r3, #0
 800620a:	61fb      	str	r3, [r7, #28]
 800620c:	e012      	b.n	8006234 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	4413      	add	r3, r2
 8006214:	7819      	ldrb	r1, [r3, #0]
 8006216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	3334      	adds	r3, #52	@ 0x34
 800621e:	460a      	mov	r2, r1
 8006220:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d006      	beq.n	800623c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3301      	adds	r3, #1
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b0f      	cmp	r3, #15
 8006238:	d9e9      	bls.n	800620e <prvInitialiseNewTask+0x56>
 800623a:	e000      	b.n	800623e <prvInitialiseNewTask+0x86>
			{
				break;
 800623c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006246:	e003      	b.n	8006250 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006252:	2b06      	cmp	r3, #6
 8006254:	d901      	bls.n	800625a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006256:	2306      	movs	r3, #6
 8006258:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800625e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006264:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	2200      	movs	r2, #0
 800626a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	3304      	adds	r3, #4
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fe68 	bl	8005f46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	3318      	adds	r3, #24
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fe63 	bl	8005f46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006284:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	f1c3 0207 	rsb	r2, r3, #7
 800628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006294:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	2200      	movs	r2, #0
 800629a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	68f9      	ldr	r1, [r7, #12]
 80062a8:	69b8      	ldr	r0, [r7, #24]
 80062aa:	f000 fc9d 	bl	8006be8 <pxPortInitialiseStack>
 80062ae:	4602      	mov	r2, r0
 80062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062c0:	bf00      	nop
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062d0:	f000 fdba 	bl	8006e48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006380 <prvAddNewTaskToReadyList+0xb8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3301      	adds	r3, #1
 80062da:	4a29      	ldr	r2, [pc, #164]	@ (8006380 <prvAddNewTaskToReadyList+0xb8>)
 80062dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062de:	4b29      	ldr	r3, [pc, #164]	@ (8006384 <prvAddNewTaskToReadyList+0xbc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062e6:	4a27      	ldr	r2, [pc, #156]	@ (8006384 <prvAddNewTaskToReadyList+0xbc>)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062ec:	4b24      	ldr	r3, [pc, #144]	@ (8006380 <prvAddNewTaskToReadyList+0xb8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d110      	bne.n	8006316 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062f4:	f000 fb54 	bl	80069a0 <prvInitialiseTaskLists>
 80062f8:	e00d      	b.n	8006316 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062fa:	4b23      	ldr	r3, [pc, #140]	@ (8006388 <prvAddNewTaskToReadyList+0xc0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d109      	bne.n	8006316 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006302:	4b20      	ldr	r3, [pc, #128]	@ (8006384 <prvAddNewTaskToReadyList+0xbc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	429a      	cmp	r2, r3
 800630e:	d802      	bhi.n	8006316 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006310:	4a1c      	ldr	r2, [pc, #112]	@ (8006384 <prvAddNewTaskToReadyList+0xbc>)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006316:	4b1d      	ldr	r3, [pc, #116]	@ (800638c <prvAddNewTaskToReadyList+0xc4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3301      	adds	r3, #1
 800631c:	4a1b      	ldr	r2, [pc, #108]	@ (800638c <prvAddNewTaskToReadyList+0xc4>)
 800631e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006324:	2201      	movs	r2, #1
 8006326:	409a      	lsls	r2, r3
 8006328:	4b19      	ldr	r3, [pc, #100]	@ (8006390 <prvAddNewTaskToReadyList+0xc8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4313      	orrs	r3, r2
 800632e:	4a18      	ldr	r2, [pc, #96]	@ (8006390 <prvAddNewTaskToReadyList+0xc8>)
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4a15      	ldr	r2, [pc, #84]	@ (8006394 <prvAddNewTaskToReadyList+0xcc>)
 8006340:	441a      	add	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3304      	adds	r3, #4
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f7ff fe09 	bl	8005f60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800634e:	f000 fdad 	bl	8006eac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006352:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <prvAddNewTaskToReadyList+0xc0>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00e      	beq.n	8006378 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800635a:	4b0a      	ldr	r3, [pc, #40]	@ (8006384 <prvAddNewTaskToReadyList+0xbc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	429a      	cmp	r2, r3
 8006366:	d207      	bcs.n	8006378 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006368:	4b0b      	ldr	r3, [pc, #44]	@ (8006398 <prvAddNewTaskToReadyList+0xd0>)
 800636a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006378:	bf00      	nop
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	200005f4 	.word	0x200005f4
 8006384:	200004f4 	.word	0x200004f4
 8006388:	20000600 	.word	0x20000600
 800638c:	20000610 	.word	0x20000610
 8006390:	200005fc 	.word	0x200005fc
 8006394:	200004f8 	.word	0x200004f8
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	@ 0x28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10b      	bne.n	80063c8 <vTaskDelayUntil+0x2c>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	617b      	str	r3, [r7, #20]
}
 80063c2:	bf00      	nop
 80063c4:	bf00      	nop
 80063c6:	e7fd      	b.n	80063c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <vTaskDelayUntil+0x4a>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	613b      	str	r3, [r7, #16]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80063e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006490 <vTaskDelayUntil+0xf4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <vTaskDelayUntil+0x6a>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	60fb      	str	r3, [r7, #12]
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	e7fd      	b.n	8006402 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8006406:	f000 f8e1 	bl	80065cc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800640a:	4b22      	ldr	r3, [pc, #136]	@ (8006494 <vTaskDelayUntil+0xf8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	4413      	add	r3, r2
 8006418:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6a3a      	ldr	r2, [r7, #32]
 8006420:	429a      	cmp	r2, r3
 8006422:	d20b      	bcs.n	800643c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	429a      	cmp	r2, r3
 800642c:	d211      	bcs.n	8006452 <vTaskDelayUntil+0xb6>
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	429a      	cmp	r2, r3
 8006434:	d90d      	bls.n	8006452 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006436:	2301      	movs	r3, #1
 8006438:	627b      	str	r3, [r7, #36]	@ 0x24
 800643a:	e00a      	b.n	8006452 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	429a      	cmp	r2, r3
 8006444:	d303      	bcc.n	800644e <vTaskDelayUntil+0xb2>
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	429a      	cmp	r2, r3
 800644c:	d901      	bls.n	8006452 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	2b00      	cmp	r3, #0
 800645c:	d006      	beq.n	800646c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fb58 	bl	8006b1c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800646c:	f000 f8bc 	bl	80065e8 <xTaskResumeAll>
 8006470:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d107      	bne.n	8006488 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006478:	4b07      	ldr	r3, [pc, #28]	@ (8006498 <vTaskDelayUntil+0xfc>)
 800647a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006488:	bf00      	nop
 800648a:	3728      	adds	r7, #40	@ 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	2000061c 	.word	0x2000061c
 8006494:	200005f8 	.word	0x200005f8
 8006498:	e000ed04 	.word	0xe000ed04

0800649c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d018      	beq.n	80064e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064ae:	4b14      	ldr	r3, [pc, #80]	@ (8006500 <vTaskDelay+0x64>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00b      	beq.n	80064ce <vTaskDelay+0x32>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60bb      	str	r3, [r7, #8]
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	e7fd      	b.n	80064ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064ce:	f000 f87d 	bl	80065cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064d2:	2100      	movs	r1, #0
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fb21 	bl	8006b1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064da:	f000 f885 	bl	80065e8 <xTaskResumeAll>
 80064de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d107      	bne.n	80064f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80064e6:	4b07      	ldr	r3, [pc, #28]	@ (8006504 <vTaskDelay+0x68>)
 80064e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	2000061c 	.word	0x2000061c
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	@ 0x28
 800650c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006512:	2300      	movs	r3, #0
 8006514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006516:	463a      	mov	r2, r7
 8006518:	1d39      	adds	r1, r7, #4
 800651a:	f107 0308 	add.w	r3, r7, #8
 800651e:	4618      	mov	r0, r3
 8006520:	f7fa fdbe 	bl	80010a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	9202      	str	r2, [sp, #8]
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	2300      	movs	r3, #0
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	2300      	movs	r3, #0
 8006534:	460a      	mov	r2, r1
 8006536:	491f      	ldr	r1, [pc, #124]	@ (80065b4 <vTaskStartScheduler+0xac>)
 8006538:	481f      	ldr	r0, [pc, #124]	@ (80065b8 <vTaskStartScheduler+0xb0>)
 800653a:	f7ff fd98 	bl	800606e <xTaskCreateStatic>
 800653e:	4603      	mov	r3, r0
 8006540:	4a1e      	ldr	r2, [pc, #120]	@ (80065bc <vTaskStartScheduler+0xb4>)
 8006542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006544:	4b1d      	ldr	r3, [pc, #116]	@ (80065bc <vTaskStartScheduler+0xb4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800654c:	2301      	movs	r3, #1
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	e001      	b.n	8006556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006552:	2300      	movs	r3, #0
 8006554:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d116      	bne.n	800658a <vTaskStartScheduler+0x82>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	613b      	str	r3, [r7, #16]
}
 800656e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006570:	4b13      	ldr	r3, [pc, #76]	@ (80065c0 <vTaskStartScheduler+0xb8>)
 8006572:	f04f 32ff 	mov.w	r2, #4294967295
 8006576:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006578:	4b12      	ldr	r3, [pc, #72]	@ (80065c4 <vTaskStartScheduler+0xbc>)
 800657a:	2201      	movs	r2, #1
 800657c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800657e:	4b12      	ldr	r3, [pc, #72]	@ (80065c8 <vTaskStartScheduler+0xc0>)
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006584:	f000 fbbc 	bl	8006d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006588:	e00f      	b.n	80065aa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d10b      	bne.n	80065aa <vTaskStartScheduler+0xa2>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	60fb      	str	r3, [r7, #12]
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	e7fd      	b.n	80065a6 <vTaskStartScheduler+0x9e>
}
 80065aa:	bf00      	nop
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	08007568 	.word	0x08007568
 80065b8:	08006971 	.word	0x08006971
 80065bc:	20000618 	.word	0x20000618
 80065c0:	20000614 	.word	0x20000614
 80065c4:	20000600 	.word	0x20000600
 80065c8:	200005f8 	.word	0x200005f8

080065cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065d0:	4b04      	ldr	r3, [pc, #16]	@ (80065e4 <vTaskSuspendAll+0x18>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	4a03      	ldr	r2, [pc, #12]	@ (80065e4 <vTaskSuspendAll+0x18>)
 80065d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065da:	bf00      	nop
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	2000061c 	.word	0x2000061c

080065e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065f6:	4b42      	ldr	r3, [pc, #264]	@ (8006700 <xTaskResumeAll+0x118>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <xTaskResumeAll+0x2e>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	603b      	str	r3, [r7, #0]
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	e7fd      	b.n	8006612 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006616:	f000 fc17 	bl	8006e48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800661a:	4b39      	ldr	r3, [pc, #228]	@ (8006700 <xTaskResumeAll+0x118>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3b01      	subs	r3, #1
 8006620:	4a37      	ldr	r2, [pc, #220]	@ (8006700 <xTaskResumeAll+0x118>)
 8006622:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006624:	4b36      	ldr	r3, [pc, #216]	@ (8006700 <xTaskResumeAll+0x118>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d161      	bne.n	80066f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800662c:	4b35      	ldr	r3, [pc, #212]	@ (8006704 <xTaskResumeAll+0x11c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d05d      	beq.n	80066f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006634:	e02e      	b.n	8006694 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006636:	4b34      	ldr	r3, [pc, #208]	@ (8006708 <xTaskResumeAll+0x120>)
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3318      	adds	r3, #24
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff fce9 	bl	800601a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3304      	adds	r3, #4
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff fce4 	bl	800601a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006656:	2201      	movs	r2, #1
 8006658:	409a      	lsls	r2, r3
 800665a:	4b2c      	ldr	r3, [pc, #176]	@ (800670c <xTaskResumeAll+0x124>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4313      	orrs	r3, r2
 8006660:	4a2a      	ldr	r2, [pc, #168]	@ (800670c <xTaskResumeAll+0x124>)
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4a27      	ldr	r2, [pc, #156]	@ (8006710 <xTaskResumeAll+0x128>)
 8006672:	441a      	add	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3304      	adds	r3, #4
 8006678:	4619      	mov	r1, r3
 800667a:	4610      	mov	r0, r2
 800667c:	f7ff fc70 	bl	8005f60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006684:	4b23      	ldr	r3, [pc, #140]	@ (8006714 <xTaskResumeAll+0x12c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668a:	429a      	cmp	r2, r3
 800668c:	d302      	bcc.n	8006694 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800668e:	4b22      	ldr	r3, [pc, #136]	@ (8006718 <xTaskResumeAll+0x130>)
 8006690:	2201      	movs	r2, #1
 8006692:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006694:	4b1c      	ldr	r3, [pc, #112]	@ (8006708 <xTaskResumeAll+0x120>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1cc      	bne.n	8006636 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066a2:	f000 fa1b 	bl	8006adc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066a6:	4b1d      	ldr	r3, [pc, #116]	@ (800671c <xTaskResumeAll+0x134>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d010      	beq.n	80066d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066b2:	f000 f847 	bl	8006744 <xTaskIncrementTick>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066bc:	4b16      	ldr	r3, [pc, #88]	@ (8006718 <xTaskResumeAll+0x130>)
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1f1      	bne.n	80066b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066ce:	4b13      	ldr	r3, [pc, #76]	@ (800671c <xTaskResumeAll+0x134>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066d4:	4b10      	ldr	r3, [pc, #64]	@ (8006718 <xTaskResumeAll+0x130>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066dc:	2301      	movs	r3, #1
 80066de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006720 <xTaskResumeAll+0x138>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066f0:	f000 fbdc 	bl	8006eac <vPortExitCritical>

	return xAlreadyYielded;
 80066f4:	68bb      	ldr	r3, [r7, #8]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	2000061c 	.word	0x2000061c
 8006704:	200005f4 	.word	0x200005f4
 8006708:	200005b4 	.word	0x200005b4
 800670c:	200005fc 	.word	0x200005fc
 8006710:	200004f8 	.word	0x200004f8
 8006714:	200004f4 	.word	0x200004f4
 8006718:	20000608 	.word	0x20000608
 800671c:	20000604 	.word	0x20000604
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800672a:	4b05      	ldr	r3, [pc, #20]	@ (8006740 <xTaskGetTickCount+0x1c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006730:	687b      	ldr	r3, [r7, #4]
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	200005f8 	.word	0x200005f8

08006744 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800674e:	4b4f      	ldr	r3, [pc, #316]	@ (800688c <xTaskIncrementTick+0x148>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 808f 	bne.w	8006876 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006758:	4b4d      	ldr	r3, [pc, #308]	@ (8006890 <xTaskIncrementTick+0x14c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006760:	4a4b      	ldr	r2, [pc, #300]	@ (8006890 <xTaskIncrementTick+0x14c>)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d121      	bne.n	80067b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800676c:	4b49      	ldr	r3, [pc, #292]	@ (8006894 <xTaskIncrementTick+0x150>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	603b      	str	r3, [r7, #0]
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	e7fd      	b.n	800678a <xTaskIncrementTick+0x46>
 800678e:	4b41      	ldr	r3, [pc, #260]	@ (8006894 <xTaskIncrementTick+0x150>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	4b40      	ldr	r3, [pc, #256]	@ (8006898 <xTaskIncrementTick+0x154>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a3e      	ldr	r2, [pc, #248]	@ (8006894 <xTaskIncrementTick+0x150>)
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	4a3e      	ldr	r2, [pc, #248]	@ (8006898 <xTaskIncrementTick+0x154>)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	4b3e      	ldr	r3, [pc, #248]	@ (800689c <xTaskIncrementTick+0x158>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	4a3c      	ldr	r2, [pc, #240]	@ (800689c <xTaskIncrementTick+0x158>)
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	f000 f996 	bl	8006adc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067b0:	4b3b      	ldr	r3, [pc, #236]	@ (80068a0 <xTaskIncrementTick+0x15c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d348      	bcc.n	800684c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ba:	4b36      	ldr	r3, [pc, #216]	@ (8006894 <xTaskIncrementTick+0x150>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d104      	bne.n	80067ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067c4:	4b36      	ldr	r3, [pc, #216]	@ (80068a0 <xTaskIncrementTick+0x15c>)
 80067c6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ca:	601a      	str	r2, [r3, #0]
					break;
 80067cc:	e03e      	b.n	800684c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ce:	4b31      	ldr	r3, [pc, #196]	@ (8006894 <xTaskIncrementTick+0x150>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d203      	bcs.n	80067ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067e6:	4a2e      	ldr	r2, [pc, #184]	@ (80068a0 <xTaskIncrementTick+0x15c>)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067ec:	e02e      	b.n	800684c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	3304      	adds	r3, #4
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fc11 	bl	800601a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d004      	beq.n	800680a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	3318      	adds	r3, #24
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff fc08 	bl	800601a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	2201      	movs	r2, #1
 8006810:	409a      	lsls	r2, r3
 8006812:	4b24      	ldr	r3, [pc, #144]	@ (80068a4 <xTaskIncrementTick+0x160>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4313      	orrs	r3, r2
 8006818:	4a22      	ldr	r2, [pc, #136]	@ (80068a4 <xTaskIncrementTick+0x160>)
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4a1f      	ldr	r2, [pc, #124]	@ (80068a8 <xTaskIncrementTick+0x164>)
 800682a:	441a      	add	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	3304      	adds	r3, #4
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f7ff fb94 	bl	8005f60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683c:	4b1b      	ldr	r3, [pc, #108]	@ (80068ac <xTaskIncrementTick+0x168>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	429a      	cmp	r2, r3
 8006844:	d3b9      	bcc.n	80067ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006846:	2301      	movs	r3, #1
 8006848:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800684a:	e7b6      	b.n	80067ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800684c:	4b17      	ldr	r3, [pc, #92]	@ (80068ac <xTaskIncrementTick+0x168>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006852:	4915      	ldr	r1, [pc, #84]	@ (80068a8 <xTaskIncrementTick+0x164>)
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d901      	bls.n	8006868 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006864:	2301      	movs	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006868:	4b11      	ldr	r3, [pc, #68]	@ (80068b0 <xTaskIncrementTick+0x16c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d007      	beq.n	8006880 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006870:	2301      	movs	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	e004      	b.n	8006880 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006876:	4b0f      	ldr	r3, [pc, #60]	@ (80068b4 <xTaskIncrementTick+0x170>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	4a0d      	ldr	r2, [pc, #52]	@ (80068b4 <xTaskIncrementTick+0x170>)
 800687e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006880:	697b      	ldr	r3, [r7, #20]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	2000061c 	.word	0x2000061c
 8006890:	200005f8 	.word	0x200005f8
 8006894:	200005ac 	.word	0x200005ac
 8006898:	200005b0 	.word	0x200005b0
 800689c:	2000060c 	.word	0x2000060c
 80068a0:	20000614 	.word	0x20000614
 80068a4:	200005fc 	.word	0x200005fc
 80068a8:	200004f8 	.word	0x200004f8
 80068ac:	200004f4 	.word	0x200004f4
 80068b0:	20000608 	.word	0x20000608
 80068b4:	20000604 	.word	0x20000604

080068b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068be:	4b27      	ldr	r3, [pc, #156]	@ (800695c <vTaskSwitchContext+0xa4>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068c6:	4b26      	ldr	r3, [pc, #152]	@ (8006960 <vTaskSwitchContext+0xa8>)
 80068c8:	2201      	movs	r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068cc:	e040      	b.n	8006950 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80068ce:	4b24      	ldr	r3, [pc, #144]	@ (8006960 <vTaskSwitchContext+0xa8>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d4:	4b23      	ldr	r3, [pc, #140]	@ (8006964 <vTaskSwitchContext+0xac>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	fab3 f383 	clz	r3, r3
 80068e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	f1c3 031f 	rsb	r3, r3, #31
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	491f      	ldr	r1, [pc, #124]	@ (8006968 <vTaskSwitchContext+0xb0>)
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10b      	bne.n	8006916 <vTaskSwitchContext+0x5e>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	607b      	str	r3, [r7, #4]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <vTaskSwitchContext+0x5a>
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4a11      	ldr	r2, [pc, #68]	@ (8006968 <vTaskSwitchContext+0xb0>)
 8006922:	4413      	add	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	3308      	adds	r3, #8
 8006938:	429a      	cmp	r2, r3
 800693a:	d104      	bne.n	8006946 <vTaskSwitchContext+0x8e>
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	605a      	str	r2, [r3, #4]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	4a07      	ldr	r2, [pc, #28]	@ (800696c <vTaskSwitchContext+0xb4>)
 800694e:	6013      	str	r3, [r2, #0]
}
 8006950:	bf00      	nop
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	2000061c 	.word	0x2000061c
 8006960:	20000608 	.word	0x20000608
 8006964:	200005fc 	.word	0x200005fc
 8006968:	200004f8 	.word	0x200004f8
 800696c:	200004f4 	.word	0x200004f4

08006970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006978:	f000 f852 	bl	8006a20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800697c:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <prvIdleTask+0x28>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d9f9      	bls.n	8006978 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006984:	4b05      	ldr	r3, [pc, #20]	@ (800699c <prvIdleTask+0x2c>)
 8006986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006994:	e7f0      	b.n	8006978 <prvIdleTask+0x8>
 8006996:	bf00      	nop
 8006998:	200004f8 	.word	0x200004f8
 800699c:	e000ed04 	.word	0xe000ed04

080069a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069a6:	2300      	movs	r3, #0
 80069a8:	607b      	str	r3, [r7, #4]
 80069aa:	e00c      	b.n	80069c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4613      	mov	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4a12      	ldr	r2, [pc, #72]	@ (8006a00 <prvInitialiseTaskLists+0x60>)
 80069b8:	4413      	add	r3, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff faa3 	bl	8005f06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3301      	adds	r3, #1
 80069c4:	607b      	str	r3, [r7, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b06      	cmp	r3, #6
 80069ca:	d9ef      	bls.n	80069ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069cc:	480d      	ldr	r0, [pc, #52]	@ (8006a04 <prvInitialiseTaskLists+0x64>)
 80069ce:	f7ff fa9a 	bl	8005f06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069d2:	480d      	ldr	r0, [pc, #52]	@ (8006a08 <prvInitialiseTaskLists+0x68>)
 80069d4:	f7ff fa97 	bl	8005f06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069d8:	480c      	ldr	r0, [pc, #48]	@ (8006a0c <prvInitialiseTaskLists+0x6c>)
 80069da:	f7ff fa94 	bl	8005f06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069de:	480c      	ldr	r0, [pc, #48]	@ (8006a10 <prvInitialiseTaskLists+0x70>)
 80069e0:	f7ff fa91 	bl	8005f06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069e4:	480b      	ldr	r0, [pc, #44]	@ (8006a14 <prvInitialiseTaskLists+0x74>)
 80069e6:	f7ff fa8e 	bl	8005f06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <prvInitialiseTaskLists+0x78>)
 80069ec:	4a05      	ldr	r2, [pc, #20]	@ (8006a04 <prvInitialiseTaskLists+0x64>)
 80069ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069f0:	4b0a      	ldr	r3, [pc, #40]	@ (8006a1c <prvInitialiseTaskLists+0x7c>)
 80069f2:	4a05      	ldr	r2, [pc, #20]	@ (8006a08 <prvInitialiseTaskLists+0x68>)
 80069f4:	601a      	str	r2, [r3, #0]
}
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	200004f8 	.word	0x200004f8
 8006a04:	20000584 	.word	0x20000584
 8006a08:	20000598 	.word	0x20000598
 8006a0c:	200005b4 	.word	0x200005b4
 8006a10:	200005c8 	.word	0x200005c8
 8006a14:	200005e0 	.word	0x200005e0
 8006a18:	200005ac 	.word	0x200005ac
 8006a1c:	200005b0 	.word	0x200005b0

08006a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a26:	e019      	b.n	8006a5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a28:	f000 fa0e 	bl	8006e48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a2c:	4b10      	ldr	r3, [pc, #64]	@ (8006a70 <prvCheckTasksWaitingTermination+0x50>)
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff faee 	bl	800601a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <prvCheckTasksWaitingTermination+0x54>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	4a0b      	ldr	r2, [pc, #44]	@ (8006a74 <prvCheckTasksWaitingTermination+0x54>)
 8006a46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a48:	4b0b      	ldr	r3, [pc, #44]	@ (8006a78 <prvCheckTasksWaitingTermination+0x58>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a78 <prvCheckTasksWaitingTermination+0x58>)
 8006a50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a52:	f000 fa2b 	bl	8006eac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f810 	bl	8006a7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a5c:	4b06      	ldr	r3, [pc, #24]	@ (8006a78 <prvCheckTasksWaitingTermination+0x58>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e1      	bne.n	8006a28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	200005c8 	.word	0x200005c8
 8006a74:	200005f4 	.word	0x200005f4
 8006a78:	200005dc 	.word	0x200005dc

08006a7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d108      	bne.n	8006aa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fb86 	bl	80071a4 <vPortFree>
				vPortFree( pxTCB );
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fb83 	bl	80071a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a9e:	e019      	b.n	8006ad4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d103      	bne.n	8006ab2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fb7a 	bl	80071a4 <vPortFree>
	}
 8006ab0:	e010      	b.n	8006ad4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d00b      	beq.n	8006ad4 <prvDeleteTCB+0x58>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60fb      	str	r3, [r7, #12]
}
 8006ace:	bf00      	nop
 8006ad0:	bf00      	nop
 8006ad2:	e7fd      	b.n	8006ad0 <prvDeleteTCB+0x54>
	}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8006b14 <prvResetNextTaskUnblockTime+0x38>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d104      	bne.n	8006af6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006aec:	4b0a      	ldr	r3, [pc, #40]	@ (8006b18 <prvResetNextTaskUnblockTime+0x3c>)
 8006aee:	f04f 32ff 	mov.w	r2, #4294967295
 8006af2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006af4:	e008      	b.n	8006b08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af6:	4b07      	ldr	r3, [pc, #28]	@ (8006b14 <prvResetNextTaskUnblockTime+0x38>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	4a04      	ldr	r2, [pc, #16]	@ (8006b18 <prvResetNextTaskUnblockTime+0x3c>)
 8006b06:	6013      	str	r3, [r2, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	200005ac 	.word	0x200005ac
 8006b18:	20000614 	.word	0x20000614

08006b1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b26:	4b29      	ldr	r3, [pc, #164]	@ (8006bcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b2c:	4b28      	ldr	r3, [pc, #160]	@ (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff fa71 	bl	800601a <uxListRemove>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10b      	bne.n	8006b56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006b3e:	4b24      	ldr	r3, [pc, #144]	@ (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b44:	2201      	movs	r2, #1
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	43da      	mvns	r2, r3
 8006b4c:	4b21      	ldr	r3, [pc, #132]	@ (8006bd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4013      	ands	r3, r2
 8006b52:	4a20      	ldr	r2, [pc, #128]	@ (8006bd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d10a      	bne.n	8006b74 <prvAddCurrentTaskToDelayedList+0x58>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b64:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	481a      	ldr	r0, [pc, #104]	@ (8006bd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b6e:	f7ff f9f7 	bl	8005f60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b72:	e026      	b.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b7c:	4b14      	ldr	r3, [pc, #80]	@ (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d209      	bcs.n	8006ba0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b8c:	4b13      	ldr	r3, [pc, #76]	@ (8006bdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f7ff fa05 	bl	8005fa8 <vListInsert>
}
 8006b9e:	e010      	b.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8006be0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7ff f9fb 	bl	8005fa8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d202      	bcs.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006bbc:	4a09      	ldr	r2, [pc, #36]	@ (8006be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6013      	str	r3, [r2, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	200005f8 	.word	0x200005f8
 8006bd0:	200004f4 	.word	0x200004f4
 8006bd4:	200005fc 	.word	0x200005fc
 8006bd8:	200005e0 	.word	0x200005e0
 8006bdc:	200005b0 	.word	0x200005b0
 8006be0:	200005ac 	.word	0x200005ac
 8006be4:	20000614 	.word	0x20000614

08006be8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3b04      	subs	r3, #4
 8006bf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3b04      	subs	r3, #4
 8006c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f023 0201 	bic.w	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3b04      	subs	r3, #4
 8006c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c18:	4a0c      	ldr	r2, [pc, #48]	@ (8006c4c <pxPortInitialiseStack+0x64>)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3b14      	subs	r3, #20
 8006c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3b04      	subs	r3, #4
 8006c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f06f 0202 	mvn.w	r2, #2
 8006c36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3b20      	subs	r3, #32
 8006c3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	08006c51 	.word	0x08006c51

08006c50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c5a:	4b13      	ldr	r3, [pc, #76]	@ (8006ca8 <prvTaskExitError+0x58>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d00b      	beq.n	8006c7c <prvTaskExitError+0x2c>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	60fb      	str	r3, [r7, #12]
}
 8006c76:	bf00      	nop
 8006c78:	bf00      	nop
 8006c7a:	e7fd      	b.n	8006c78 <prvTaskExitError+0x28>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60bb      	str	r3, [r7, #8]
}
 8006c8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c90:	bf00      	nop
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0fc      	beq.n	8006c92 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	20000010 	.word	0x20000010
 8006cac:	00000000 	.word	0x00000000

08006cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006cb0:	4b07      	ldr	r3, [pc, #28]	@ (8006cd0 <pxCurrentTCBConst2>)
 8006cb2:	6819      	ldr	r1, [r3, #0]
 8006cb4:	6808      	ldr	r0, [r1, #0]
 8006cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cba:	f380 8809 	msr	PSP, r0
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f04f 0000 	mov.w	r0, #0
 8006cc6:	f380 8811 	msr	BASEPRI, r0
 8006cca:	4770      	bx	lr
 8006ccc:	f3af 8000 	nop.w

08006cd0 <pxCurrentTCBConst2>:
 8006cd0:	200004f4 	.word	0x200004f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop

08006cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006cd8:	4808      	ldr	r0, [pc, #32]	@ (8006cfc <prvPortStartFirstTask+0x24>)
 8006cda:	6800      	ldr	r0, [r0, #0]
 8006cdc:	6800      	ldr	r0, [r0, #0]
 8006cde:	f380 8808 	msr	MSP, r0
 8006ce2:	f04f 0000 	mov.w	r0, #0
 8006ce6:	f380 8814 	msr	CONTROL, r0
 8006cea:	b662      	cpsie	i
 8006cec:	b661      	cpsie	f
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	df00      	svc	0
 8006cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cfa:	bf00      	nop
 8006cfc:	e000ed08 	.word	0xe000ed08

08006d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d06:	4b47      	ldr	r3, [pc, #284]	@ (8006e24 <xPortStartScheduler+0x124>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a47      	ldr	r2, [pc, #284]	@ (8006e28 <xPortStartScheduler+0x128>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d10b      	bne.n	8006d28 <xPortStartScheduler+0x28>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	613b      	str	r3, [r7, #16]
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	e7fd      	b.n	8006d24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d28:	4b3e      	ldr	r3, [pc, #248]	@ (8006e24 <xPortStartScheduler+0x124>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a3f      	ldr	r2, [pc, #252]	@ (8006e2c <xPortStartScheduler+0x12c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d10b      	bne.n	8006d4a <xPortStartScheduler+0x4a>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	60fb      	str	r3, [r7, #12]
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	e7fd      	b.n	8006d46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d4a:	4b39      	ldr	r3, [pc, #228]	@ (8006e30 <xPortStartScheduler+0x130>)
 8006d4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	22ff      	movs	r2, #255	@ 0xff
 8006d5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	4b31      	ldr	r3, [pc, #196]	@ (8006e34 <xPortStartScheduler+0x134>)
 8006d70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d72:	4b31      	ldr	r3, [pc, #196]	@ (8006e38 <xPortStartScheduler+0x138>)
 8006d74:	2207      	movs	r2, #7
 8006d76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d78:	e009      	b.n	8006d8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8006e38 <xPortStartScheduler+0x138>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	4a2d      	ldr	r2, [pc, #180]	@ (8006e38 <xPortStartScheduler+0x138>)
 8006d82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d8e:	78fb      	ldrb	r3, [r7, #3]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d96:	2b80      	cmp	r3, #128	@ 0x80
 8006d98:	d0ef      	beq.n	8006d7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d9a:	4b27      	ldr	r3, [pc, #156]	@ (8006e38 <xPortStartScheduler+0x138>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f1c3 0307 	rsb	r3, r3, #7
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d00b      	beq.n	8006dbe <xPortStartScheduler+0xbe>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	60bb      	str	r3, [r7, #8]
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8006e38 <xPortStartScheduler+0x138>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	021b      	lsls	r3, r3, #8
 8006dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e38 <xPortStartScheduler+0x138>)
 8006dc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e38 <xPortStartScheduler+0x138>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006dd0:	4a19      	ldr	r2, [pc, #100]	@ (8006e38 <xPortStartScheduler+0x138>)
 8006dd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ddc:	4b17      	ldr	r3, [pc, #92]	@ (8006e3c <xPortStartScheduler+0x13c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a16      	ldr	r2, [pc, #88]	@ (8006e3c <xPortStartScheduler+0x13c>)
 8006de2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006de6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006de8:	4b14      	ldr	r3, [pc, #80]	@ (8006e3c <xPortStartScheduler+0x13c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a13      	ldr	r2, [pc, #76]	@ (8006e3c <xPortStartScheduler+0x13c>)
 8006dee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006df2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006df4:	f000 f8da 	bl	8006fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006df8:	4b11      	ldr	r3, [pc, #68]	@ (8006e40 <xPortStartScheduler+0x140>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006dfe:	f000 f8f9 	bl	8006ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e02:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <xPortStartScheduler+0x144>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a0f      	ldr	r2, [pc, #60]	@ (8006e44 <xPortStartScheduler+0x144>)
 8006e08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006e0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e0e:	f7ff ff63 	bl	8006cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e12:	f7ff fd51 	bl	80068b8 <vTaskSwitchContext>
	prvTaskExitError();
 8006e16:	f7ff ff1b 	bl	8006c50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	e000ed00 	.word	0xe000ed00
 8006e28:	410fc271 	.word	0x410fc271
 8006e2c:	410fc270 	.word	0x410fc270
 8006e30:	e000e400 	.word	0xe000e400
 8006e34:	20000620 	.word	0x20000620
 8006e38:	20000624 	.word	0x20000624
 8006e3c:	e000ed20 	.word	0xe000ed20
 8006e40:	20000010 	.word	0x20000010
 8006e44:	e000ef34 	.word	0xe000ef34

08006e48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	607b      	str	r3, [r7, #4]
}
 8006e60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e62:	4b10      	ldr	r3, [pc, #64]	@ (8006ea4 <vPortEnterCritical+0x5c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3301      	adds	r3, #1
 8006e68:	4a0e      	ldr	r2, [pc, #56]	@ (8006ea4 <vPortEnterCritical+0x5c>)
 8006e6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <vPortEnterCritical+0x5c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d110      	bne.n	8006e96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e74:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea8 <vPortEnterCritical+0x60>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <vPortEnterCritical+0x4e>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	603b      	str	r3, [r7, #0]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <vPortEnterCritical+0x4a>
	}
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000010 	.word	0x20000010
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eb2:	4b12      	ldr	r3, [pc, #72]	@ (8006efc <vPortExitCritical+0x50>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <vPortExitCritical+0x26>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	607b      	str	r3, [r7, #4]
}
 8006ecc:	bf00      	nop
 8006ece:	bf00      	nop
 8006ed0:	e7fd      	b.n	8006ece <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8006efc <vPortExitCritical+0x50>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	4a08      	ldr	r2, [pc, #32]	@ (8006efc <vPortExitCritical+0x50>)
 8006eda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006edc:	4b07      	ldr	r3, [pc, #28]	@ (8006efc <vPortExitCritical+0x50>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d105      	bne.n	8006ef0 <vPortExitCritical+0x44>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006eee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	20000010 	.word	0x20000010

08006f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f00:	f3ef 8009 	mrs	r0, PSP
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	4b15      	ldr	r3, [pc, #84]	@ (8006f60 <pxCurrentTCBConst>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	f01e 0f10 	tst.w	lr, #16
 8006f10:	bf08      	it	eq
 8006f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1a:	6010      	str	r0, [r2, #0]
 8006f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006f24:	f380 8811 	msr	BASEPRI, r0
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f7ff fcc2 	bl	80068b8 <vTaskSwitchContext>
 8006f34:	f04f 0000 	mov.w	r0, #0
 8006f38:	f380 8811 	msr	BASEPRI, r0
 8006f3c:	bc09      	pop	{r0, r3}
 8006f3e:	6819      	ldr	r1, [r3, #0]
 8006f40:	6808      	ldr	r0, [r1, #0]
 8006f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f46:	f01e 0f10 	tst.w	lr, #16
 8006f4a:	bf08      	it	eq
 8006f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f50:	f380 8809 	msr	PSP, r0
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	f3af 8000 	nop.w

08006f60 <pxCurrentTCBConst>:
 8006f60:	200004f4 	.word	0x200004f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop

08006f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	607b      	str	r3, [r7, #4]
}
 8006f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f82:	f7ff fbdf 	bl	8006744 <xTaskIncrementTick>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f8c:	4b06      	ldr	r3, [pc, #24]	@ (8006fa8 <SysTick_Handler+0x40>)
 8006f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	2300      	movs	r3, #0
 8006f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	f383 8811 	msr	BASEPRI, r3
}
 8006f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	e000ed04 	.word	0xe000ed04

08006fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe0 <vPortSetupTimerInterrupt+0x34>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe4 <vPortSetupTimerInterrupt+0x38>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe8 <vPortSetupTimerInterrupt+0x3c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8006fec <vPortSetupTimerInterrupt+0x40>)
 8006fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc6:	099b      	lsrs	r3, r3, #6
 8006fc8:	4a09      	ldr	r2, [pc, #36]	@ (8006ff0 <vPortSetupTimerInterrupt+0x44>)
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fce:	4b04      	ldr	r3, [pc, #16]	@ (8006fe0 <vPortSetupTimerInterrupt+0x34>)
 8006fd0:	2207      	movs	r2, #7
 8006fd2:	601a      	str	r2, [r3, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	e000e010 	.word	0xe000e010
 8006fe4:	e000e018 	.word	0xe000e018
 8006fe8:	20000004 	.word	0x20000004
 8006fec:	10624dd3 	.word	0x10624dd3
 8006ff0:	e000e014 	.word	0xe000e014

08006ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007004 <vPortEnableVFP+0x10>
 8006ff8:	6801      	ldr	r1, [r0, #0]
 8006ffa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006ffe:	6001      	str	r1, [r0, #0]
 8007000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007002:	bf00      	nop
 8007004:	e000ed88 	.word	0xe000ed88

08007008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08a      	sub	sp, #40	@ 0x28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007010:	2300      	movs	r3, #0
 8007012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007014:	f7ff fada 	bl	80065cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007018:	4b5c      	ldr	r3, [pc, #368]	@ (800718c <pvPortMalloc+0x184>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007020:	f000 f924 	bl	800726c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007024:	4b5a      	ldr	r3, [pc, #360]	@ (8007190 <pvPortMalloc+0x188>)
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4013      	ands	r3, r2
 800702c:	2b00      	cmp	r3, #0
 800702e:	f040 8095 	bne.w	800715c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01e      	beq.n	8007076 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007038:	2208      	movs	r2, #8
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	2b00      	cmp	r3, #0
 8007048:	d015      	beq.n	8007076 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f023 0307 	bic.w	r3, r3, #7
 8007050:	3308      	adds	r3, #8
 8007052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00b      	beq.n	8007076 <pvPortMalloc+0x6e>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	617b      	str	r3, [r7, #20]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d06f      	beq.n	800715c <pvPortMalloc+0x154>
 800707c:	4b45      	ldr	r3, [pc, #276]	@ (8007194 <pvPortMalloc+0x18c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	429a      	cmp	r2, r3
 8007084:	d86a      	bhi.n	800715c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007086:	4b44      	ldr	r3, [pc, #272]	@ (8007198 <pvPortMalloc+0x190>)
 8007088:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800708a:	4b43      	ldr	r3, [pc, #268]	@ (8007198 <pvPortMalloc+0x190>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007090:	e004      	b.n	800709c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d903      	bls.n	80070ae <pvPortMalloc+0xa6>
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f1      	bne.n	8007092 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070ae:	4b37      	ldr	r3, [pc, #220]	@ (800718c <pvPortMalloc+0x184>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d051      	beq.n	800715c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2208      	movs	r2, #8
 80070be:	4413      	add	r3, r2
 80070c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	1ad2      	subs	r2, r2, r3
 80070d2:	2308      	movs	r3, #8
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d920      	bls.n	800711c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <pvPortMalloc+0xfc>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	613b      	str	r3, [r7, #16]
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	1ad2      	subs	r2, r2, r3
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007116:	69b8      	ldr	r0, [r7, #24]
 8007118:	f000 f90a 	bl	8007330 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800711c:	4b1d      	ldr	r3, [pc, #116]	@ (8007194 <pvPortMalloc+0x18c>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	4a1b      	ldr	r2, [pc, #108]	@ (8007194 <pvPortMalloc+0x18c>)
 8007128:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800712a:	4b1a      	ldr	r3, [pc, #104]	@ (8007194 <pvPortMalloc+0x18c>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b1b      	ldr	r3, [pc, #108]	@ (800719c <pvPortMalloc+0x194>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d203      	bcs.n	800713e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007136:	4b17      	ldr	r3, [pc, #92]	@ (8007194 <pvPortMalloc+0x18c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a18      	ldr	r2, [pc, #96]	@ (800719c <pvPortMalloc+0x194>)
 800713c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	4b13      	ldr	r3, [pc, #76]	@ (8007190 <pvPortMalloc+0x188>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	431a      	orrs	r2, r3
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007152:	4b13      	ldr	r3, [pc, #76]	@ (80071a0 <pvPortMalloc+0x198>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3301      	adds	r3, #1
 8007158:	4a11      	ldr	r2, [pc, #68]	@ (80071a0 <pvPortMalloc+0x198>)
 800715a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800715c:	f7ff fa44 	bl	80065e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00b      	beq.n	8007182 <pvPortMalloc+0x17a>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	60fb      	str	r3, [r7, #12]
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	e7fd      	b.n	800717e <pvPortMalloc+0x176>
	return pvReturn;
 8007182:	69fb      	ldr	r3, [r7, #28]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3728      	adds	r7, #40	@ 0x28
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20004230 	.word	0x20004230
 8007190:	20004244 	.word	0x20004244
 8007194:	20004234 	.word	0x20004234
 8007198:	20004228 	.word	0x20004228
 800719c:	20004238 	.word	0x20004238
 80071a0:	2000423c 	.word	0x2000423c

080071a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d04f      	beq.n	8007256 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071b6:	2308      	movs	r3, #8
 80071b8:	425b      	negs	r3, r3
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4413      	add	r3, r2
 80071be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	4b25      	ldr	r3, [pc, #148]	@ (8007260 <vPortFree+0xbc>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4013      	ands	r3, r2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10b      	bne.n	80071ea <vPortFree+0x46>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	60fb      	str	r3, [r7, #12]
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop
 80071e8:	e7fd      	b.n	80071e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <vPortFree+0x66>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	60bb      	str	r3, [r7, #8]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	4b14      	ldr	r3, [pc, #80]	@ (8007260 <vPortFree+0xbc>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4013      	ands	r3, r2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01e      	beq.n	8007256 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d11a      	bne.n	8007256 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	4b0e      	ldr	r3, [pc, #56]	@ (8007260 <vPortFree+0xbc>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	43db      	mvns	r3, r3
 800722a:	401a      	ands	r2, r3
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007230:	f7ff f9cc 	bl	80065cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	4b0a      	ldr	r3, [pc, #40]	@ (8007264 <vPortFree+0xc0>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4413      	add	r3, r2
 800723e:	4a09      	ldr	r2, [pc, #36]	@ (8007264 <vPortFree+0xc0>)
 8007240:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007242:	6938      	ldr	r0, [r7, #16]
 8007244:	f000 f874 	bl	8007330 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007248:	4b07      	ldr	r3, [pc, #28]	@ (8007268 <vPortFree+0xc4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3301      	adds	r3, #1
 800724e:	4a06      	ldr	r2, [pc, #24]	@ (8007268 <vPortFree+0xc4>)
 8007250:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007252:	f7ff f9c9 	bl	80065e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007256:	bf00      	nop
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20004244 	.word	0x20004244
 8007264:	20004234 	.word	0x20004234
 8007268:	20004240 	.word	0x20004240

0800726c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007272:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007276:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007278:	4b27      	ldr	r3, [pc, #156]	@ (8007318 <prvHeapInit+0xac>)
 800727a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00c      	beq.n	80072a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3307      	adds	r3, #7
 800728a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0307 	bic.w	r3, r3, #7
 8007292:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	4a1f      	ldr	r2, [pc, #124]	@ (8007318 <prvHeapInit+0xac>)
 800729c:	4413      	add	r3, r2
 800729e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072a4:	4a1d      	ldr	r2, [pc, #116]	@ (800731c <prvHeapInit+0xb0>)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072aa:	4b1c      	ldr	r3, [pc, #112]	@ (800731c <prvHeapInit+0xb0>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4413      	add	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072b8:	2208      	movs	r2, #8
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1a9b      	subs	r3, r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0307 	bic.w	r3, r3, #7
 80072c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4a15      	ldr	r2, [pc, #84]	@ (8007320 <prvHeapInit+0xb4>)
 80072cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072ce:	4b14      	ldr	r3, [pc, #80]	@ (8007320 <prvHeapInit+0xb4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072d6:	4b12      	ldr	r3, [pc, #72]	@ (8007320 <prvHeapInit+0xb4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	1ad2      	subs	r2, r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007320 <prvHeapInit+0xb4>)
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	4a0a      	ldr	r2, [pc, #40]	@ (8007324 <prvHeapInit+0xb8>)
 80072fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	4a09      	ldr	r2, [pc, #36]	@ (8007328 <prvHeapInit+0xbc>)
 8007302:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007304:	4b09      	ldr	r3, [pc, #36]	@ (800732c <prvHeapInit+0xc0>)
 8007306:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800730a:	601a      	str	r2, [r3, #0]
}
 800730c:	bf00      	nop
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	20000628 	.word	0x20000628
 800731c:	20004228 	.word	0x20004228
 8007320:	20004230 	.word	0x20004230
 8007324:	20004238 	.word	0x20004238
 8007328:	20004234 	.word	0x20004234
 800732c:	20004244 	.word	0x20004244

08007330 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007338:	4b28      	ldr	r3, [pc, #160]	@ (80073dc <prvInsertBlockIntoFreeList+0xac>)
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	e002      	b.n	8007344 <prvInsertBlockIntoFreeList+0x14>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	429a      	cmp	r2, r3
 800734c:	d8f7      	bhi.n	800733e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	4413      	add	r3, r2
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	429a      	cmp	r2, r3
 800735e:	d108      	bne.n	8007372 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	441a      	add	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	441a      	add	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d118      	bne.n	80073b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4b15      	ldr	r3, [pc, #84]	@ (80073e0 <prvInsertBlockIntoFreeList+0xb0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d00d      	beq.n	80073ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	441a      	add	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	e008      	b.n	80073c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073ae:	4b0c      	ldr	r3, [pc, #48]	@ (80073e0 <prvInsertBlockIntoFreeList+0xb0>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e003      	b.n	80073c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d002      	beq.n	80073ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ce:	bf00      	nop
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	20004228 	.word	0x20004228
 80073e0:	20004230 	.word	0x20004230

080073e4 <memset>:
 80073e4:	4402      	add	r2, r0
 80073e6:	4603      	mov	r3, r0
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d100      	bne.n	80073ee <memset+0xa>
 80073ec:	4770      	bx	lr
 80073ee:	f803 1b01 	strb.w	r1, [r3], #1
 80073f2:	e7f9      	b.n	80073e8 <memset+0x4>

080073f4 <__libc_init_array>:
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	4d0d      	ldr	r5, [pc, #52]	@ (800742c <__libc_init_array+0x38>)
 80073f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007430 <__libc_init_array+0x3c>)
 80073fa:	1b64      	subs	r4, r4, r5
 80073fc:	10a4      	asrs	r4, r4, #2
 80073fe:	2600      	movs	r6, #0
 8007400:	42a6      	cmp	r6, r4
 8007402:	d109      	bne.n	8007418 <__libc_init_array+0x24>
 8007404:	4d0b      	ldr	r5, [pc, #44]	@ (8007434 <__libc_init_array+0x40>)
 8007406:	4c0c      	ldr	r4, [pc, #48]	@ (8007438 <__libc_init_array+0x44>)
 8007408:	f000 f818 	bl	800743c <_init>
 800740c:	1b64      	subs	r4, r4, r5
 800740e:	10a4      	asrs	r4, r4, #2
 8007410:	2600      	movs	r6, #0
 8007412:	42a6      	cmp	r6, r4
 8007414:	d105      	bne.n	8007422 <__libc_init_array+0x2e>
 8007416:	bd70      	pop	{r4, r5, r6, pc}
 8007418:	f855 3b04 	ldr.w	r3, [r5], #4
 800741c:	4798      	blx	r3
 800741e:	3601      	adds	r6, #1
 8007420:	e7ee      	b.n	8007400 <__libc_init_array+0xc>
 8007422:	f855 3b04 	ldr.w	r3, [r5], #4
 8007426:	4798      	blx	r3
 8007428:	3601      	adds	r6, #1
 800742a:	e7f2      	b.n	8007412 <__libc_init_array+0x1e>
 800742c:	08007594 	.word	0x08007594
 8007430:	08007594 	.word	0x08007594
 8007434:	08007594 	.word	0x08007594
 8007438:	08007598 	.word	0x08007598

0800743c <_init>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	bf00      	nop
 8007440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007442:	bc08      	pop	{r3}
 8007444:	469e      	mov	lr, r3
 8007446:	4770      	bx	lr

08007448 <_fini>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	bf00      	nop
 800744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744e:	bc08      	pop	{r3}
 8007450:	469e      	mov	lr, r3
 8007452:	4770      	bx	lr
